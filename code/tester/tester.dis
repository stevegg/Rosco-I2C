
tester.elf:     file format elf32-m68k


Disassembly of section .text.init:

00002000 <START>:
    2000:	2e78 0414      	moveal 414 <SDB_MEMSIZE>,%sp
    2004:	41fa fffa      	lea %pc@(2000 <START>),%a0
    2008:	43f9 0000 2000 	lea 2000 <START>,%a1
    200e:	203c 0000 20c4 	movel #8388,%d0
    2014:	9089           	subl %a1,%d0
    2016:	e488           	lsrl #2,%d0
    2018:	5380           	subql #1,%d0
    201a:	22d8           	movel %a0@+,%a1@+
    201c:	51c8 fffc      	dbf %d0,201a <START+0x1a>
    2020:	4ef9 0000 2026 	jmp 2026 <_init_end>

Disassembly of section .text.postinit:

00002026 <_postinit>:
    2026:	203c 0000 46e4 	movel #18148,%d0
    202c:	9089           	subl %a1,%d0
    202e:	e488           	lsrl #2,%d0
    2030:	2200           	movel %d0,%d1
    2032:	4841           	swap %d1
    2034:	6002           	bras 2038 <_postinit+0x12>
    2036:	22d8           	movel %a0@+,%a1@+
    2038:	51c8 fffc      	dbf %d0,2036 <_postinit+0x10>
    203c:	51c9 fff8      	dbf %d1,2036 <_postinit+0x10>

00002040 <PREMAIN>:
    2040:	23f8 0490 0000 	movel 490 <EFP_PROG_EXIT>,46c0 <_code_end>
    2046:	46c0 
    2048:	21fc 0000 2062 	movel #8290,490 <EFP_PROG_EXIT>
    204e:	0490 
    2050:	41f9 0000 2102 	lea 2102 <__kinit>,%a0
    2056:	4e90           	jsr %a0@
    2058:	6124           	bsrs 207e <CALL_CTORS>
    205a:	41f9 0000 20c4 	lea 20c4 <_postinit_end>,%a0
    2060:	4e90           	jsr %a0@
    2062:	21f9 0000 46c0 	movel 46c0 <_code_end>,490 <EFP_PROG_EXIT>
    2068:	0490 
    206a:	42a7           	clrl %sp@-
    206c:	41f9 0000 212e 	lea 212e <__cxa_finalize>,%a0
    2072:	4e90           	jsr %a0@
    2074:	588f           	addql #4,%sp
    2076:	6128           	bsrs 20a0 <CALL_DTORS>
    2078:	2078 0004      	moveal 4 <DUART_CRA>,%a0
    207c:	4ed0           	jmp %a0@

0000207e <CALL_CTORS>:
    207e:	48e7 0038      	moveml %a2-%a4,%sp@-
    2082:	45f9 0000 46c0 	lea 46c0 <_code_end>,%a2
    2088:	47f9 0000 46c0 	lea 46c0 <_code_end>,%a3
    208e:	598b           	subql #4,%a3
    2090:	b7ca           	cmpal %a2,%a3
    2092:	6506           	bcss 209a <CALL_CTORS+0x1c>
    2094:	2853           	moveal %a3@,%a4
    2096:	4e94           	jsr %a4@
    2098:	60f4           	bras 208e <CALL_CTORS+0x10>
    209a:	4cdf 1c00      	moveml %sp@+,%a2-%a4
    209e:	4e75           	rts

000020a0 <CALL_DTORS>:
    20a0:	48e7 0038      	moveml %a2-%a4,%sp@-
    20a4:	45f9 0000 46c0 	lea 46c0 <_code_end>,%a2
    20aa:	47f9 0000 46c0 	lea 46c0 <_code_end>,%a3
    20b0:	b5cb           	cmpal %a3,%a2
    20b2:	6708           	beqs 20bc <CALL_DTORS+0x1c>
    20b4:	2852           	moveal %a2@,%a4
    20b6:	4e94           	jsr %a4@
    20b8:	588a           	addql #4,%a2
    20ba:	60f4           	bras 20b0 <CALL_DTORS+0x10>
    20bc:	4cdf 1c00      	moveml %sp@+,%a2-%a4
    20c0:	4e75           	rts
	...

Disassembly of section .text:

000020c4 <kmain>:

#include <stdio.h>

void kmain() {

  printf("Starting up...");
    20c4:	4879 0000 464e 	pea 464e <__gedf2+0x22>
    20ca:	4eb9 0000 3436 	jsr 3436 <printf_>
    20d0:	588f           	addql #4,%sp
  volatile int *address = (int *)0xF83F01;
  while ( 1 ) {
    *address = 0xFF;
    20d2:	207c 00f8 3f01 	moveal #16269057,%a0
    20d8:	1010           	moveb %a0@,%d0
    20da:	4210           	clrb %a0@
    20dc:	1039 00f8 3f02 	moveb f83f02 <DUART_BASE_R2+0x3e5a>,%d0
    20e2:	4239 00f8 3f02 	clrb f83f02 <DUART_BASE_R2+0x3e5a>
    20e8:	1039 00f8 3f03 	moveb f83f03 <DUART_BASE_R2+0x3e5b>,%d0
    20ee:	4239 00f8 3f03 	clrb f83f03 <DUART_BASE_R2+0x3e5b>
    20f4:	1039 00f8 3f04 	moveb f83f04 <DUART_BASE_R2+0x3e5c>,%d0
    20fa:	50f9 00f8 3f04 	st f83f04 <DUART_BASE_R2+0x3e5c>
  while ( 1 ) {
    2100:	60d0           	bras 20d2 <kmain+0xe>

00002102 <__kinit>:

void *__dso_handle;

__attribute__((weak)) void __kinit() {
  // zero .bss
  for (uint32_t *dst = &_bss_start; dst < &_bss_end; *dst++ = 0);
    2102:	41f9 0000 46e4 	lea 46e4 <cxa_atexit_count>,%a0
    2108:	b1fc 0000 7ee8 	cmpal #32488,%a0
    210e:	641c           	bccs 212c <__kinit+0x2a>
    2110:	203c 0000 7ee8 	movel #32488,%d0
    2116:	0480 0000 46e5 	subil #18149,%d0
    211c:	72fc           	moveq #-4,%d1
    211e:	c081           	andl %d1,%d0
    2120:	0680 0000 46e8 	addil #18152,%d0
    2126:	4298           	clrl %a0@+
    2128:	b088           	cmpl %a0,%d0
    212a:	66fa           	bnes 2126 <__kinit+0x24>
}
    212c:	4e75           	rts

0000212e <__cxa_finalize>:
/*
 * We probably don't need the full dso_handle capability as we're always
 * statically linked, but I'd rather do a proper impl now than have it 
 * break later because of a half-baked one :D
 */
void __cxa_finalize(void *dso_handle) {
    212e:	48e7 3020      	moveml %d2-%d3/%a2,%sp@-
    2132:	262f 0010      	movel %sp@(16),%d3
    for (int i = cxa_atexit_count - 1; i >= 0; i--) {
    2136:	7200           	moveq #0,%d1
    2138:	3239 0000 46e4 	movew 46e4 <cxa_atexit_count>,%d1
    213e:	2401           	movel %d1,%d2
    2140:	5382           	subql #1,%d2
    2142:	4a81           	tstl %d1
    2144:	6728           	beqs 216e <__cxa_finalize+0x40>
    2146:	2001           	movel %d1,%d0
    2148:	e788           	lsll #3,%d0
    214a:	2440           	moveal %d0,%a2
    214c:	95c1           	subal %d1,%a2
    214e:	d5ca           	addal %a2,%a2
    2150:	d5fc 0000 46d8 	addal #18136,%a2
        cxa_atexit_entry *entry = &cxa_atexits[i];

        if ((dso_handle == NULL || dso_handle == entry->dso_handle) && !entry->done) {
    2156:	4a83           	tstl %d3
    2158:	671a           	beqs 2174 <__cxa_finalize+0x46>
    215a:	b6aa 0008      	cmpl %a2@(8),%d3
    215e:	6714           	beqs 2174 <__cxa_finalize+0x46>
    for (int i = cxa_atexit_count - 1; i >= 0; i--) {
    2160:	45ea fff2      	lea %a2@(-14),%a2
    2164:	51ca fff0      	dbf %d2,2156 <__cxa_finalize+0x28>
    2168:	4242           	clrw %d2
    216a:	5382           	subql #1,%d2
    216c:	64e8           	bccs 2156 <__cxa_finalize+0x28>
            entry->func(entry->ptr);
            entry->done = true;
        }
    }
}
    216e:	4cdf 040c      	moveml %sp@+,%d2-%d3/%a2
    2172:	4e75           	rts
        if ((dso_handle == NULL || dso_handle == entry->dso_handle) && !entry->done) {
    2174:	4a2a 000c      	tstb %a2@(12)
    2178:	66e6           	bnes 2160 <__cxa_finalize+0x32>
            entry->func(entry->ptr);
    217a:	2f2a 0004      	movel %a2@(4),%sp@-
    217e:	2052           	moveal %a2@,%a0
    2180:	4e90           	jsr %a0@
            entry->done = true;
    2182:	157c 0001 000c 	moveb #1,%a2@(12)
    2188:	588f           	addql #4,%sp
    for (int i = cxa_atexit_count - 1; i >= 0; i--) {
    218a:	45ea fff2      	lea %a2@(-14),%a2
    218e:	51ca ffc6      	dbf %d2,2156 <__cxa_finalize+0x28>
    2192:	4242           	clrw %d2
    2194:	5382           	subql #1,%d2
    2196:	64be           	bccs 2156 <__cxa_finalize+0x28>
    2198:	60d4           	bras 216e <__cxa_finalize+0x40>

0000219a <_out_null>:

// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
    219a:	4e75           	rts

0000219c <_out_rev>:
}


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
    219c:	48e7 3f3e      	moveml %d2-%d7/%a2-%fp,%sp@-
    21a0:	266f 0030      	moveal %sp@(48),%a3
    21a4:	262f 0034      	movel %sp@(52),%d3
    21a8:	2a6f 0038      	moveal %sp@(56),%a5
    21ac:	282f 003c      	movel %sp@(60),%d4
    21b0:	2c2f 0040      	movel %sp@(64),%d6
    21b4:	286f 0044      	moveal %sp@(68),%a4
    21b8:	2e2f 0048      	movel %sp@(72),%d7
    21bc:	2a2f 004c      	movel %sp@(76),%d5
  const size_t start_idx = idx;

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    21c0:	7003           	moveq #3,%d0
    21c2:	c085           	andl %d5,%d0
    21c4:	667e           	bnes 2244 <_out_rev+0xa8>
    for (size_t i = len; i < width; i++) {
    21c6:	be8c           	cmpl %a4,%d7
    21c8:	637a           	blss 2244 <_out_rev+0xa8>
    21ca:	2407           	movel %d7,%d2
    21cc:	948c           	subl %a4,%d2
    21ce:	d48d           	addl %a5,%d2
    21d0:	244d           	moveal %a5,%a2
      out(' ', buffer, idx++, maxlen);
    21d2:	200a           	movel %a2,%d0
    21d4:	528a           	addql #1,%a2
    21d6:	2f04           	movel %d4,%sp@-
    21d8:	2f00           	movel %d0,%sp@-
    21da:	2f03           	movel %d3,%sp@-
    21dc:	4878 0020      	pea 20 <R_STOPCNTCMD+0x2>
    21e0:	4e93           	jsr %a3@
    for (size_t i = len; i < width; i++) {
    21e2:	4fef 0010      	lea %sp@(16),%sp
    21e6:	b48a           	cmpl %a2,%d2
    21e8:	66e8           	bnes 21d2 <_out_rev+0x36>
    }
  }

  // reverse string
  while (len) {
    21ea:	b8fc 0000      	cmpaw #0,%a4
    21ee:	6726           	beqs 2216 <_out_rev+0x7a>
    21f0:	45f4 6800      	lea %a4@(0000000000000000,%d6:l),%a2
    21f4:	4df2 2800      	lea %a2@(0000000000000000,%d2:l),%fp
    out(buf[--len], buffer, idx++, maxlen);
    21f8:	2f04           	movel %d4,%sp@-
    21fa:	200e           	movel %fp,%d0
    21fc:	908a           	subl %a2,%d0
    21fe:	2f00           	movel %d0,%sp@-
    2200:	2f03           	movel %d3,%sp@-
    2202:	1022           	moveb %a2@-,%d0
    2204:	4880           	extw %d0
    2206:	3040           	moveaw %d0,%a0
    2208:	2f08           	movel %a0,%sp@-
    220a:	4e93           	jsr %a3@
  while (len) {
    220c:	4fef 0010      	lea %sp@(16),%sp
    2210:	b5c6           	cmpal %d6,%a2
    2212:	66e4           	bnes 21f8 <_out_rev+0x5c>
    out(buf[--len], buffer, idx++, maxlen);
    2214:	d48c           	addl %a4,%d2
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
    2216:	0805 0001      	btst #1,%d5
    221a:	6720           	beqs 223c <_out_rev+0xa0>
    while (idx - start_idx < width) {
    221c:	2a02           	movel %d2,%d5
    221e:	9a8d           	subl %a5,%d5
    2220:	ba87           	cmpl %d7,%d5
    2222:	6418           	bccs 223c <_out_rev+0xa0>
      out(' ', buffer, idx++, maxlen);
    2224:	2f04           	movel %d4,%sp@-
    2226:	2f02           	movel %d2,%sp@-
    2228:	5282           	addql #1,%d2
    222a:	2f03           	movel %d3,%sp@-
    222c:	4878 0020      	pea 20 <R_STOPCNTCMD+0x2>
    2230:	4e93           	jsr %a3@
    while (idx - start_idx < width) {
    2232:	5285           	addql #1,%d5
    2234:	4fef 0010      	lea %sp@(16),%sp
    2238:	ba87           	cmpl %d7,%d5
    223a:	65e8           	bcss 2224 <_out_rev+0x88>
    }
  }

  return idx;
}
    223c:	2002           	movel %d2,%d0
    223e:	4cdf 7cfc      	moveml %sp@+,%d2-%d7/%a2-%fp
    2242:	4e75           	rts
    2244:	240d           	movel %a5,%d2
    2246:	60a2           	bras 21ea <_out_rev+0x4e>

00002248 <_ntoa_long>:
}


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    2248:	4fef ffd4      	lea %sp@(-44),%sp
    224c:	48e7 3f3e      	moveml %d2-%d7/%a2-%fp,%sp@-
    2250:	242f 006c      	movel %sp@(108),%d2
    2254:	262f 0074      	movel %sp@(116),%d3
    2258:	2a2f 0080      	movel %sp@(128),%d5
    225c:	1f6f 0073 0037 	moveb %sp@(115),%sp@(55)
  if (!value) {
    flags &= ~FLAGS_HASH;
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    2262:	2205           	movel %d5,%d1
    2264:	0281 0000 0400 	andil #1024,%d1
    226a:	2f41 002e      	movel %d1,%sp@(46)
  if (!value) {
    226e:	4a82           	tstl %d2
    2270:	6600 00fa      	bnew 236c <_ntoa_long+0x124>
    flags &= ~FLAGS_HASH;
    2274:	70ef           	moveq #-17,%d0
    2276:	c085           	andl %d5,%d0
  if (!(flags & FLAGS_PRECISION) || value) {
    2278:	4a81           	tstl %d1
    227a:	6600 0124      	bnew 23a0 <_ntoa_long+0x158>
    227e:	42af 0032      	clrl %sp@(50)
    flags &= ~FLAGS_HASH;
    2282:	2a00           	movel %d0,%d5
    2284:	0805 0005      	btst #5,%d5
    2288:	6600 00f2      	bnew 237c <_ntoa_long+0x134>
    228c:	7c61           	moveq #97,%d6
    228e:	4bef 0038      	lea %sp@(56),%a5
    2292:	4def 0058      	lea %sp@(88),%fp
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    2296:	244d           	moveal %a5,%a2
    2298:	49f9 0000 3540 	lea 3540 <__umodsi3>,%a4
    229e:	7801           	moveq #1,%d4
    22a0:	988d           	subl %a5,%d4
    22a2:	47f9 0000 34b4 	lea 34b4 <__udivsi3>,%a3
    22a8:	0606 fff6      	addib #-10,%d6
      const char digit = (char)(value % base);
    22ac:	2f03           	movel %d3,%sp@-
    22ae:	2f02           	movel %d2,%sp@-
    22b0:	4e94           	jsr %a4@
    22b2:	508f           	addql #8,%sp
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    22b4:	7209           	moveq #9,%d1
    22b6:	b280           	cmpl %d0,%d1
    22b8:	652c           	bcss 22e6 <_ntoa_long+0x9e>
    22ba:	0600 0030      	addib #48,%d0
    22be:	2e04           	movel %d4,%d7
    22c0:	de8a           	addl %a2,%d7
    22c2:	14c0           	moveb %d0,%a2@+
      value /= base;
    22c4:	2f03           	movel %d3,%sp@-
    22c6:	2f02           	movel %d2,%sp@-
    22c8:	4e93           	jsr %a3@
    22ca:	508f           	addql #8,%sp
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    22cc:	b682           	cmpl %d2,%d3
    22ce:	622a           	bhis 22fa <_ntoa_long+0xb2>
    22d0:	b5ce           	cmpal %fp,%a2
    22d2:	6700 01dc      	beqw 24b0 <_ntoa_long+0x268>
      value /= base;
    22d6:	2400           	movel %d0,%d2
      const char digit = (char)(value % base);
    22d8:	2f03           	movel %d3,%sp@-
    22da:	2f02           	movel %d2,%sp@-
    22dc:	4e94           	jsr %a4@
    22de:	508f           	addql #8,%sp
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    22e0:	7209           	moveq #9,%d1
    22e2:	b280           	cmpl %d0,%d1
    22e4:	64d4           	bccs 22ba <_ntoa_long+0x72>
    22e6:	d006           	addb %d6,%d0
    22e8:	2e04           	movel %d4,%d7
    22ea:	de8a           	addl %a2,%d7
    22ec:	14c0           	moveb %d0,%a2@+
      value /= base;
    22ee:	2f03           	movel %d3,%sp@-
    22f0:	2f02           	movel %d2,%sp@-
    22f2:	4e93           	jsr %a3@
    22f4:	508f           	addql #8,%sp
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    22f6:	b682           	cmpl %d2,%d3
    22f8:	63d6           	blss 22d0 <_ntoa_long+0x88>
  if (!(flags & FLAGS_LEFT)) {
    22fa:	0805 0001      	btst #1,%d5
    22fe:	6700 00b6      	beqw 23b6 <_ntoa_long+0x16e>
  if (flags & FLAGS_HASH) {
    2302:	4aaf 0032      	tstl %sp@(50)
    2306:	6700 0170      	beqw 2478 <_ntoa_long+0x230>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    230a:	4aaf 002e      	tstl %sp@(46)
    230e:	6600 0146      	bnew 2456 <_ntoa_long+0x20e>
    2312:	4a87           	tstl %d7
    2314:	6600 0130      	bnew 2446 <_ntoa_long+0x1fe>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2318:	7010           	moveq #16,%d0
    231a:	b083           	cmpl %d3,%d0
    231c:	6700 028a      	beqw 25a8 <_ntoa_long+0x360>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2320:	5583           	subql #2,%d3
    2322:	6700 0316      	beqw 263a <_ntoa_long+0x3f2>
      buf[len++] = '0';
    2326:	1f7c 0030 0038 	moveb #48,%sp@(56)
    232c:	7e01           	moveq #1,%d7
    if (negative) {
    232e:	4a2f 0037      	tstb %sp@(55)
    2332:	6700 018a      	beqw 24be <_ntoa_long+0x276>
      buf[len++] = '-';
    2336:	1fbc 002d 7838 	moveb #45,%sp@(0000000000000038,%d7:l)
    233c:	5287           	addql #1,%d7
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
    233e:	2f05           	movel %d5,%sp@-
    2340:	2f2f 0080      	movel %sp@(128),%sp@-
    2344:	2f07           	movel %d7,%sp@-
    2346:	2f0d           	movel %a5,%sp@-
    2348:	2f2f 0078      	movel %sp@(120),%sp@-
    234c:	2f2f 0078      	movel %sp@(120),%sp@-
    2350:	2f2f 0078      	movel %sp@(120),%sp@-
    2354:	2f2f 0078      	movel %sp@(120),%sp@-
    2358:	4eb9 0000 219c 	jsr 219c <_out_rev>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    235e:	4fef 0020      	lea %sp@(32),%sp
}
    2362:	4cdf 7cfc      	moveml %sp@+,%d2-%d7/%a2-%fp
    2366:	4fef 002c      	lea %sp@(44),%sp
    236a:	4e75           	rts
  if (flags & FLAGS_HASH) {
    236c:	7210           	moveq #16,%d1
    236e:	c285           	andl %d5,%d1
    2370:	2f41 0032      	movel %d1,%sp@(50)
    2374:	0805 0005      	btst #5,%d5
    2378:	6700 ff12      	beqw 228c <_ntoa_long+0x44>
    237c:	7c41           	moveq #65,%d6
    237e:	4bef 0038      	lea %sp@(56),%a5
    2382:	4def 0058      	lea %sp@(88),%fp
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    2386:	244d           	moveal %a5,%a2
    2388:	49f9 0000 3540 	lea 3540 <__umodsi3>,%a4
    238e:	7801           	moveq #1,%d4
    2390:	988d           	subl %a5,%d4
    2392:	47f9 0000 34b4 	lea 34b4 <__udivsi3>,%a3
    2398:	0606 fff6      	addib #-10,%d6
    239c:	6000 ff0e      	braw 22ac <_ntoa_long+0x64>
  if (!(flags & FLAGS_LEFT)) {
    23a0:	7e02           	moveq #2,%d7
    23a2:	ce85           	andl %d5,%d7
    23a4:	0805 0001      	btst #1,%d5
    23a8:	6600 0176      	bnew 2520 <_ntoa_long+0x2d8>
    23ac:	2a00           	movel %d0,%d5
    23ae:	42af 0032      	clrl %sp@(50)
    23b2:	4bef 0038      	lea %sp@(56),%a5
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
    23b6:	7001           	moveq #1,%d0
    23b8:	c085           	andl %d5,%d0
    23ba:	4aaf 007c      	tstl %sp@(124)
    23be:	6700 0144      	beqw 2504 <_ntoa_long+0x2bc>
    23c2:	4a80           	tstl %d0
    23c4:	6700 0166      	beqw 252c <_ntoa_long+0x2e4>
    23c8:	4a2f 0037      	tstb %sp@(55)
    23cc:	6600 01f6      	bnew 25c4 <_ntoa_long+0x37c>
    23d0:	740c           	moveq #12,%d2
    23d2:	c485           	andl %d5,%d2
    23d4:	6600 01ee      	bnew 25c4 <_ntoa_long+0x37c>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    23d8:	beaf 0078      	cmpl %sp@(120),%d7
    23dc:	6426           	bccs 2404 <_ntoa_long+0x1bc>
    23de:	7220           	moveq #32,%d1
    23e0:	b287           	cmpl %d7,%d1
    23e2:	6700 0246      	beqw 262a <_ntoa_long+0x3e2>
    23e6:	41f5 7800      	lea %a5@(0000000000000000,%d7:l),%a0
    23ea:	222f 0078      	movel %sp@(120),%d1
      buf[len++] = '0';
    23ee:	5287           	addql #1,%d7
    23f0:	10fc 0030      	moveb #48,%a0@+
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    23f4:	be81           	cmpl %d1,%d7
    23f6:	6406           	bccs 23fe <_ntoa_long+0x1b6>
    23f8:	7420           	moveq #32,%d2
    23fa:	b487           	cmpl %d7,%d2
    23fc:	66f0           	bnes 23ee <_ntoa_long+0x1a6>
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    23fe:	4a80           	tstl %d0
    2400:	6700 ff00      	beqw 2302 <_ntoa_long+0xba>
    2404:	beaf 007c      	cmpl %sp@(124),%d7
    2408:	6400 fef8      	bccw 2302 <_ntoa_long+0xba>
    240c:	7020           	moveq #32,%d0
    240e:	b087           	cmpl %d7,%d0
    2410:	6700 0222      	beqw 2634 <_ntoa_long+0x3ec>
    2414:	41f5 7800      	lea %a5@(0000000000000000,%d7:l),%a0
    2418:	226f 007c      	moveal %sp@(124),%a1
    241c:	d3cd           	addal %a5,%a1
    241e:	4def 0058      	lea %sp@(88),%fp
    2422:	7001           	moveq #1,%d0
    2424:	908d           	subl %a5,%d0
      buf[len++] = '0';
    2426:	2e00           	movel %d0,%d7
    2428:	de88           	addl %a0,%d7
    242a:	10fc 0030      	moveb #48,%a0@+
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    242e:	b3c8           	cmpal %a0,%a1
    2430:	6700 fed0      	beqw 2302 <_ntoa_long+0xba>
    2434:	bdc8           	cmpal %a0,%fp
    2436:	66ee           	bnes 2426 <_ntoa_long+0x1de>
  if (flags & FLAGS_HASH) {
    2438:	4aaf 0032      	tstl %sp@(50)
    243c:	6700 ff00      	beqw 233e <_ntoa_long+0xf6>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    2440:	4aaf 002e      	tstl %sp@(46)
    2444:	6610           	bnes 2456 <_ntoa_long+0x20e>
    2446:	beaf 0078      	cmpl %sp@(120),%d7
    244a:	6700 014a      	beqw 2596 <_ntoa_long+0x34e>
    244e:	beaf 007c      	cmpl %sp@(124),%d7
    2452:	6700 0142      	beqw 2596 <_ntoa_long+0x34e>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2456:	7410           	moveq #16,%d2
    2458:	b483           	cmpl %d3,%d2
    245a:	6700 0170      	beqw 25cc <_ntoa_long+0x384>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    245e:	5583           	subql #2,%d3
    2460:	6700 011e      	beqw 2580 <_ntoa_long+0x338>
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    2464:	7420           	moveq #32,%d2
    2466:	b487           	cmpl %d7,%d2
    2468:	6700 fed4      	beqw 233e <_ntoa_long+0xf6>
    246c:	2007           	movel %d7,%d0
      buf[len++] = '0';
    246e:	2e00           	movel %d0,%d7
    2470:	5287           	addql #1,%d7
    2472:	1fbc 0030 0838 	moveb #48,%sp@(0000000000000038,%d0:l)
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
    2478:	7020           	moveq #32,%d0
    247a:	b087           	cmpl %d7,%d0
    247c:	6600 feb0      	bnew 232e <_ntoa_long+0xe6>
      buf[len++] = ' ';
    2480:	7e20           	moveq #32,%d7
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
    2482:	2f05           	movel %d5,%sp@-
    2484:	2f2f 0080      	movel %sp@(128),%sp@-
    2488:	2f07           	movel %d7,%sp@-
    248a:	2f0d           	movel %a5,%sp@-
    248c:	2f2f 0078      	movel %sp@(120),%sp@-
    2490:	2f2f 0078      	movel %sp@(120),%sp@-
    2494:	2f2f 0078      	movel %sp@(120),%sp@-
    2498:	2f2f 0078      	movel %sp@(120),%sp@-
    249c:	4eb9 0000 219c 	jsr 219c <_out_rev>
  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    24a2:	4fef 0020      	lea %sp@(32),%sp
}
    24a6:	4cdf 7cfc      	moveml %sp@+,%d2-%d7/%a2-%fp
    24aa:	4fef 002c      	lea %sp@(44),%sp
    24ae:	4e75           	rts
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    24b0:	7e20           	moveq #32,%d7
  if (!(flags & FLAGS_LEFT)) {
    24b2:	0805 0001      	btst #1,%d5
    24b6:	6600 fe4a      	bnew 2302 <_ntoa_long+0xba>
    24ba:	6000 fefa      	braw 23b6 <_ntoa_long+0x16e>
    else if (flags & FLAGS_PLUS) {
    24be:	0805 0002      	btst #2,%d5
    24c2:	6600 0086      	bnew 254a <_ntoa_long+0x302>
    else if (flags & FLAGS_SPACE) {
    24c6:	0805 0003      	btst #3,%d5
    24ca:	6700 fe72      	beqw 233e <_ntoa_long+0xf6>
      buf[len++] = ' ';
    24ce:	1fbc 0020 7838 	moveb #32,%sp@(0000000000000038,%d7:l)
    24d4:	5287           	addql #1,%d7
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
    24d6:	2f05           	movel %d5,%sp@-
    24d8:	2f2f 0080      	movel %sp@(128),%sp@-
    24dc:	2f07           	movel %d7,%sp@-
    24de:	2f0d           	movel %a5,%sp@-
    24e0:	2f2f 0078      	movel %sp@(120),%sp@-
    24e4:	2f2f 0078      	movel %sp@(120),%sp@-
    24e8:	2f2f 0078      	movel %sp@(120),%sp@-
    24ec:	2f2f 0078      	movel %sp@(120),%sp@-
    24f0:	4eb9 0000 219c 	jsr 219c <_out_rev>
  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    24f6:	4fef 0020      	lea %sp@(32),%sp
}
    24fa:	4cdf 7cfc      	moveml %sp@+,%d2-%d7/%a2-%fp
    24fe:	4fef 002c      	lea %sp@(44),%sp
    2502:	4e75           	rts
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2504:	beaf 0078      	cmpl %sp@(120),%d7
    2508:	6400 fef4      	bccw 23fe <_ntoa_long+0x1b6>
    250c:	7420           	moveq #32,%d2
    250e:	b487           	cmpl %d7,%d2
    2510:	6700 feec      	beqw 23fe <_ntoa_long+0x1b6>
    2514:	41f5 7800      	lea %a5@(0000000000000000,%d7:l),%a0
    2518:	222f 0078      	movel %sp@(120),%d1
    251c:	6000 fed0      	braw 23ee <_ntoa_long+0x1a6>
  if (!(flags & FLAGS_LEFT)) {
    2520:	2a00           	movel %d0,%d5
  size_t len = 0U;
    2522:	7e00           	moveq #0,%d7
    2524:	4bef 0038      	lea %sp@(56),%a5
    2528:	6000 fe04      	braw 232e <_ntoa_long+0xe6>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    252c:	beaf 0078      	cmpl %sp@(120),%d7
    2530:	6400 fdd0      	bccw 2302 <_ntoa_long+0xba>
    2534:	7420           	moveq #32,%d2
    2536:	b487           	cmpl %d7,%d2
    2538:	6600 feac      	bnew 23e6 <_ntoa_long+0x19e>
  if (flags & FLAGS_HASH) {
    253c:	4aaf 0032      	tstl %sp@(50)
    2540:	6600 fdc8      	bnew 230a <_ntoa_long+0xc2>
      buf[len++] = ' ';
    2544:	7e20           	moveq #32,%d7
    2546:	6000 ff3a      	braw 2482 <_ntoa_long+0x23a>
      buf[len++] = '+';  // ignore the space if the '+' exists
    254a:	1fbc 002b 7838 	moveb #43,%sp@(0000000000000038,%d7:l)
    2550:	5287           	addql #1,%d7
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
    2552:	2f05           	movel %d5,%sp@-
    2554:	2f2f 0080      	movel %sp@(128),%sp@-
    2558:	2f07           	movel %d7,%sp@-
    255a:	2f0d           	movel %a5,%sp@-
    255c:	2f2f 0078      	movel %sp@(120),%sp@-
    2560:	2f2f 0078      	movel %sp@(120),%sp@-
    2564:	2f2f 0078      	movel %sp@(120),%sp@-
    2568:	2f2f 0078      	movel %sp@(120),%sp@-
    256c:	4eb9 0000 219c 	jsr 219c <_out_rev>
  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    2572:	4fef 0020      	lea %sp@(32),%sp
}
    2576:	4cdf 7cfc      	moveml %sp@+,%d2-%d7/%a2-%fp
    257a:	4fef 002c      	lea %sp@(44),%sp
    257e:	4e75           	rts
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2580:	7220           	moveq #32,%d1
    2582:	b287           	cmpl %d7,%d1
    2584:	6700 fdb8      	beqw 233e <_ntoa_long+0xf6>
      buf[len++] = 'b';
    2588:	41f5 7800      	lea %a5@(0000000000000000,%d7:l),%a0
    258c:	5287           	addql #1,%d7
    258e:	10bc 0062      	moveb #98,%a0@
    2592:	6000 fed0      	braw 2464 <_ntoa_long+0x21c>
      len--;
    2596:	2007           	movel %d7,%d0
    2598:	5380           	subql #1,%d0
      if (len && (base == 16U)) {
    259a:	7201           	moveq #1,%d1
    259c:	b287           	cmpl %d7,%d1
    259e:	665c           	bnes 25fc <_ntoa_long+0x3b4>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    25a0:	7410           	moveq #16,%d2
    25a2:	b483           	cmpl %d3,%d2
    25a4:	6600 fd7a      	bnew 2320 <_ntoa_long+0xd8>
    25a8:	0805 0005      	btst #5,%d5
    25ac:	6666           	bnes 2614 <_ntoa_long+0x3cc>
      buf[len++] = 'x';
    25ae:	1f7c 0078 0038 	moveb #120,%sp@(56)
    25b4:	7001           	moveq #1,%d0
      buf[len++] = '0';
    25b6:	2e00           	movel %d0,%d7
    25b8:	5287           	addql #1,%d7
    25ba:	1fbc 0030 0838 	moveb #48,%sp@(0000000000000038,%d0:l)
    25c0:	6000 feb6      	braw 2478 <_ntoa_long+0x230>
      width--;
    25c4:	53af 007c      	subql #1,%sp@(124)
    25c8:	6000 fe0e      	braw 23d8 <_ntoa_long+0x190>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    25cc:	0805 0005      	btst #5,%d5
    25d0:	6616           	bnes 25e8 <_ntoa_long+0x3a0>
    25d2:	7020           	moveq #32,%d0
    25d4:	b087           	cmpl %d7,%d0
    25d6:	6700 fd66      	beqw 233e <_ntoa_long+0xf6>
      buf[len++] = 'b';
    25da:	41f5 7800      	lea %a5@(0000000000000000,%d7:l),%a0
    25de:	5287           	addql #1,%d7
      buf[len++] = 'x';
    25e0:	10bc 0078      	moveb #120,%a0@
    25e4:	6000 fe7e      	braw 2464 <_ntoa_long+0x21c>
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    25e8:	7420           	moveq #32,%d2
    25ea:	b487           	cmpl %d7,%d2
    25ec:	6700 fd50      	beqw 233e <_ntoa_long+0xf6>
      buf[len++] = 'X';
    25f0:	1fbc 0058 7838 	moveb #88,%sp@(0000000000000038,%d7:l)
    25f6:	5287           	addql #1,%d7
    25f8:	6000 fe6a      	braw 2464 <_ntoa_long+0x21c>
      if (len && (base == 16U)) {
    25fc:	7210           	moveq #16,%d1
    25fe:	b283           	cmpl %d3,%d1
    2600:	674e           	beqs 2650 <_ntoa_long+0x408>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2602:	5583           	subql #2,%d3
    2604:	6600 fe68      	bnew 246e <_ntoa_long+0x226>
      buf[len++] = 'b';
    2608:	41f5 0800      	lea %a5@(0000000000000000,%d0:l),%a0
    260c:	10bc 0062      	moveb #98,%a0@
    2610:	6000 fe52      	braw 2464 <_ntoa_long+0x21c>
      buf[len++] = 'X';
    2614:	1f7c 0058 0038 	moveb #88,%sp@(56)
    261a:	7001           	moveq #1,%d0
      buf[len++] = '0';
    261c:	2e00           	movel %d0,%d7
    261e:	5287           	addql #1,%d7
    2620:	1fbc 0030 0838 	moveb #48,%sp@(0000000000000038,%d0:l)
    2626:	6000 fe50      	braw 2478 <_ntoa_long+0x230>
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    262a:	7420           	moveq #32,%d2
    262c:	b4af 007c      	cmpl %sp@(124),%d2
    2630:	6400 fcd0      	bccw 2302 <_ntoa_long+0xba>
      buf[len++] = ' ';
    2634:	7e20           	moveq #32,%d7
    2636:	6000 fe00      	braw 2438 <_ntoa_long+0x1f0>
      buf[len++] = 'b';
    263a:	1f7c 0062 0038 	moveb #98,%sp@(56)
    2640:	7001           	moveq #1,%d0
      buf[len++] = '0';
    2642:	2e00           	movel %d0,%d7
    2644:	5287           	addql #1,%d7
    2646:	1fbc 0030 0838 	moveb #48,%sp@(0000000000000038,%d0:l)
    264c:	6000 fe2a      	braw 2478 <_ntoa_long+0x230>
        len--;
    2650:	5587           	subql #2,%d7
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2652:	0805 0005      	btst #5,%d5
    2656:	6698           	bnes 25f0 <_ntoa_long+0x3a8>
      buf[len++] = 'x';
    2658:	41f5 7800      	lea %a5@(0000000000000000,%d7:l),%a0
    265c:	2e00           	movel %d0,%d7
    265e:	10bc 0078      	moveb #120,%a0@
    2662:	6000 fe00      	braw 2464 <_ntoa_long+0x21c>

00002666 <_out_char>:
{
    2666:	202f 0004      	movel %sp@(4),%d0
  if (character) {
    266a:	4a00           	tstb %d0
    266c:	6602           	bnes 2670 <_out_char+0xa>
}
    266e:	4e75           	rts
    _putchar(character);
    2670:	4880           	extw %d0
    2672:	3040           	moveaw %d0,%a0
    2674:	2f48 0004      	movel %a0,%sp@(4)
    2678:	4ef9 0000 345e 	jmp 345e <_putchar>

0000267e <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
    267e:	4fef ffb4      	lea %sp@(-76),%sp
    2682:	48e7 3f3e      	moveml %d2-%d7/%a2-%fp,%sp@-
    2686:	2c6f 007c      	moveal %sp@(124),%fp
    268a:	2e2f 0080      	movel %sp@(128),%d7
    268e:	2c2f 0084      	movel %sp@(132),%d6
    2692:	266f 0088      	moveal %sp@(136),%a3
  unsigned int flags, width, precision, n;
  size_t idx = 0U;

  if (!buffer) {
    2696:	4a87           	tstl %d7
    2698:	6700 02de      	beqw 2978 <_vsnprintf+0x2fa>
    // use null output function
    out = _out_null;
  }

  while (*format)
    269c:	1013           	moveb %a3@,%d0
    269e:	9bcd           	subal %a5,%a5
    26a0:	4a00           	tstb %d0
    26a2:	6700 02e4      	beqw 2988 <_vsnprintf+0x30a>
    26a6:	7421           	moveq #33,%d2
    26a8:	7878           	moveq #120,%d4
    26aa:	d88f           	addl %sp,%d4
    26ac:	9484           	subl %d4,%d2
    26ae:	2f42 003e      	movel %d2,%sp@(62)
    26b2:	262f 008c      	movel %sp@(140),%d3
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
      // no
      out(*format, buffer, idx++, maxlen);
      format++;
    26b6:	528b           	addql #1,%a3
    if (*format != '%') {
    26b8:	0c00 0025      	cmpib #37,%d0
    26bc:	6740           	beqs 26fe <_vsnprintf+0x80>
      out(*format, buffer, idx++, maxlen);
    26be:	240d           	movel %a5,%d2
    26c0:	5282           	addql #1,%d2
    26c2:	2f06           	movel %d6,%sp@-
    26c4:	2f0d           	movel %a5,%sp@-
    26c6:	2f07           	movel %d7,%sp@-
    26c8:	4880           	extw %d0
    26ca:	3040           	moveaw %d0,%a0
    26cc:	2f08           	movel %a0,%sp@-
    26ce:	4e96           	jsr %fp@
      continue;
    26d0:	4fef 0010      	lea %sp@(16),%sp
      out(*format, buffer, idx++, maxlen);
    26d4:	2a42           	moveal %d2,%a5
  while (*format)
    26d6:	1013           	moveb %a3@,%d0
    26d8:	66dc           	bnes 26b6 <_vsnprintf+0x38>

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);

  // return written chars without terminating \0
  return (int)idx;
    26da:	240d           	movel %a5,%d2
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    26dc:	bbc6           	cmpal %d6,%a5
    26de:	6504           	bcss 26e4 <_vsnprintf+0x66>
    26e0:	2a46           	moveal %d6,%a5
    26e2:	538d           	subql #1,%a5
    26e4:	2f06           	movel %d6,%sp@-
    26e6:	2f0d           	movel %a5,%sp@-
    26e8:	2f07           	movel %d7,%sp@-
    26ea:	42a7           	clrl %sp@-
    26ec:	4e96           	jsr %fp@
  return (int)idx;
    26ee:	4fef 0010      	lea %sp@(16),%sp
}
    26f2:	2002           	movel %d2,%d0
    26f4:	4cdf 7cfc      	moveml %sp@+,%d2-%d7/%a2-%fp
    26f8:	4fef 004c      	lea %sp@(76),%sp
    26fc:	4e75           	rts
    flags = 0U;
    26fe:	7a00           	moveq #0,%d5
      switch (*format) {
    2700:	247c 0000 2726 	moveal #10022,%a2
    2706:	224b           	moveal %a3,%a1
    2708:	1019           	moveb %a1@+,%d0
    270a:	1200           	moveb %d0,%d1
    270c:	0601 ffe0      	addib #-32,%d1
    2710:	0c01 0010      	cmpib #16,%d1
    2714:	6232           	bhis 2748 <_vsnprintf+0xca>
    2716:	0281 0000 00ff 	andil #255,%d1
    271c:	d281           	addl %d1,%d1
    271e:	3232 1800      	movew %a2@(0000000000000000,%d1:l),%d1
    2722:	4efb 1002      	jmp %pc@(2726 <_vsnprintf+0xa8>,%d1:w)
    2726:	00d0           	.short 0x00d0
    2728:	0022 0022      	orib #34,%a2@-
    272c:	00c6           	.short 0x00c6
    272e:	0022 0022      	orib #34,%a2@-
    2732:	0022 0022      	orib #34,%a2@-
    2736:	0022 0022      	orib #34,%a2@-
    273a:	0022 00bc      	orib #-68,%a2@-
    273e:	0022 00b2      	orib #-78,%a2@-
    2742:	0022 0022      	orib #34,%a2@-
    2746:	00a8 1200 0601 	oril #301991425,%a0@(-48)
    274c:	ffd0 
    if (_is_digit(*format)) {
    274e:	0c01 0009      	cmpib #9,%d1
    2752:	6300 01be      	blsw 2912 <_vsnprintf+0x294>
    else if (*format == '*') {
    2756:	0c00 002a      	cmpib #42,%d0
    275a:	6700 0204      	beqw 2960 <_vsnprintf+0x2e2>
    width = 0U;
    275e:	95ca           	subal %a2,%a2
    if (*format == '.') {
    2760:	0c00 002e      	cmpib #46,%d0
    2764:	6700 0162      	beqw 28c8 <_vsnprintf+0x24a>
    precision = 0U;
    2768:	99cc           	subal %a4,%a4
        format++;
    276a:	2209           	movel %a1,%d1
    switch (*format) {
    276c:	0c00 006c      	cmpib #108,%d0
    2770:	6700 0186      	beqw 28f8 <_vsnprintf+0x27a>
    2774:	0c00 006c      	cmpib #108,%d0
    2778:	6e00 0086      	bgtw 2800 <_vsnprintf+0x182>
    277c:	0c00 0068      	cmpib #104,%d0
    2780:	6700 0666      	beqw 2de8 <_vsnprintf+0x76a>
    2784:	0c00 006a      	cmpib #106,%d0
    2788:	6600 0c54      	bnew 33de <_vsnprintf+0xd60>
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    278c:	0045 0200      	oriw #512,%d5
        if (*format == 'l') {
    2790:	102b 0001      	moveb %a3@(1),%d0
        format++;
    2794:	2641           	moveal %d1,%a3
    2796:	528b           	addql #1,%a3
    switch (*format) {
    2798:	0c00 0066      	cmpib #102,%d0
    279c:	6e7c           	bgts 281a <_vsnprintf+0x19c>
    279e:	0c00 0045      	cmpib #69,%d0
    27a2:	6e00 00c6      	bgtw 286a <_vsnprintf+0x1ec>
    27a6:	0c00 0025      	cmpib #37,%d0
    27aa:	6600 009c      	bnew 2848 <_vsnprintf+0x1ca>
        out('%', buffer, idx++, maxlen);
    27ae:	240d           	movel %a5,%d2
    27b0:	5282           	addql #1,%d2
    27b2:	2f06           	movel %d6,%sp@-
    27b4:	2f0d           	movel %a5,%sp@-
    27b6:	2f07           	movel %d7,%sp@-
    27b8:	4878 0025      	pea 25 <R_STOPCNTCMD+0x7>
    27bc:	4e96           	jsr %fp@
        break;
    27be:	4fef 0010      	lea %sp@(16),%sp
        out('%', buffer, idx++, maxlen);
    27c2:	2a42           	moveal %d2,%a5
  while (*format)
    27c4:	1013           	moveb %a3@,%d0
    27c6:	6600 feee      	bnew 26b6 <_vsnprintf+0x38>
    27ca:	6000 ff0e      	braw 26da <_vsnprintf+0x5c>
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
    27ce:	7001           	moveq #1,%d0
    27d0:	8a80           	orl %d0,%d5
      format++;
    27d2:	2649           	moveal %a1,%a3
    27d4:	6000 ff30      	braw 2706 <_vsnprintf+0x88>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
    27d8:	7202           	moveq #2,%d1
    27da:	8a81           	orl %d1,%d5
      format++;
    27dc:	2649           	moveal %a1,%a3
    27de:	6000 ff26      	braw 2706 <_vsnprintf+0x88>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
    27e2:	7404           	moveq #4,%d2
    27e4:	8a82           	orl %d2,%d5
      format++;
    27e6:	2649           	moveal %a1,%a3
    27e8:	6000 ff1c      	braw 2706 <_vsnprintf+0x88>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
    27ec:	7010           	moveq #16,%d0
    27ee:	8a80           	orl %d0,%d5
      format++;
    27f0:	2649           	moveal %a1,%a3
    27f2:	6000 ff12      	braw 2706 <_vsnprintf+0x88>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
    27f6:	7808           	moveq #8,%d4
    27f8:	8a84           	orl %d4,%d5
      format++;
    27fa:	2649           	moveal %a1,%a3
    27fc:	6000 ff08      	braw 2706 <_vsnprintf+0x88>
    switch (*format) {
    2800:	0c00 007a      	cmpib #122,%d0
    2804:	6600 0106      	bnew 290c <_vsnprintf+0x28e>
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    2808:	0045 0100      	oriw #256,%d5
        if (*format == 'l') {
    280c:	102b 0001      	moveb %a3@(1),%d0
        format++;
    2810:	2641           	moveal %d1,%a3
    2812:	528b           	addql #1,%a3
    switch (*format) {
    2814:	0c00 0066      	cmpib #102,%d0
    2818:	6f84           	bles 279e <_vsnprintf+0x120>
    281a:	1200           	moveb %d0,%d1
    281c:	0601 ff97      	addib #-105,%d1
    2820:	0c01 000f      	cmpib #15,%d1
    2824:	6222           	bhis 2848 <_vsnprintf+0x1ca>
    2826:	7800           	moveq #0,%d4
    2828:	1801           	moveb %d1,%d4
    282a:	7401           	moveq #1,%d2
    282c:	e9aa           	lsll %d4,%d2
    282e:	0282 0000 9041 	andil #36929,%d2
    2834:	6600 0804      	bnew 303a <_vsnprintf+0x9bc>
    2838:	0c01 000a      	cmpib #10,%d1
    283c:	6700 05c0      	beqw 2dfe <_vsnprintf+0x780>
    2840:	0c01 0007      	cmpib #7,%d1
    2844:	6700 01f8      	beqw 2a3e <_vsnprintf+0x3c0>
        out(*format, buffer, idx++, maxlen);
    2848:	240d           	movel %a5,%d2
    284a:	5282           	addql #1,%d2
    284c:	2f06           	movel %d6,%sp@-
    284e:	2f0d           	movel %a5,%sp@-
    2850:	2f07           	movel %d7,%sp@-
    switch (*format) {
    2852:	4880           	extw %d0
        out(*format, buffer, idx++, maxlen);
    2854:	3240           	moveaw %d0,%a1
    2856:	2f09           	movel %a1,%sp@-
    2858:	4e96           	jsr %fp@
        break;
    285a:	4fef 0010      	lea %sp@(16),%sp
        out(*format, buffer, idx++, maxlen);
    285e:	2a42           	moveal %d2,%a5
  while (*format)
    2860:	1013           	moveb %a3@,%d0
    2862:	6600 fe52      	bnew 26b6 <_vsnprintf+0x38>
    2866:	6000 fe72      	braw 26da <_vsnprintf+0x5c>
    switch (*format) {
    286a:	1200           	moveb %d0,%d1
    286c:	0601 ffba      	addib #-70,%d1
    2870:	0c01 0020      	cmpib #32,%d1
    2874:	62d2           	bhis 2848 <_vsnprintf+0x1ca>
    2876:	0281 0000 00ff 	andil #255,%d1
    287c:	d281           	addl %d1,%d1
    287e:	323b 1806      	movew %pc@(2886 <_vsnprintf+0x208>,%d1:l),%d1
    2882:	4efb 1002      	jmp %pc@(2886 <_vsnprintf+0x208>,%d1:w)
    2886:	01ee ffc2      	bset %d0,%fp@(-62)
    288a:	ffc2           	.short 0xffc2
    288c:	ffc2           	.short 0xffc2
    288e:	ffc2           	.short 0xffc2
    2890:	ffc2           	.short 0xffc2
    2892:	ffc2           	.short 0xffc2
    2894:	ffc2           	.short 0xffc2
    2896:	ffc2           	.short 0xffc2
    2898:	ffc2           	.short 0xffc2
    289a:	ffc2           	.short 0xffc2
    289c:	ffc2           	.short 0xffc2
    289e:	ffc2           	.short 0xffc2
    28a0:	ffc2           	.short 0xffc2
    28a2:	ffc2           	.short 0xffc2
    28a4:	ffc2           	.short 0xffc2
    28a6:	ffc2           	.short 0xffc2
    28a8:	ffc2           	.short 0xffc2
    28aa:	0124           	btst %d0,%a4@-
    28ac:	ffc2           	.short 0xffc2
    28ae:	ffc2           	.short 0xffc2
    28b0:	ffc2           	.short 0xffc2
    28b2:	ffc2           	.short 0xffc2
    28b4:	ffc2           	.short 0xffc2
    28b6:	ffc2           	.short 0xffc2
    28b8:	ffc2           	.short 0xffc2
    28ba:	ffc2           	.short 0xffc2
    28bc:	ffc2           	.short 0xffc2
    28be:	0124           	btst %d0,%a4@-
    28c0:	050e 0124      	movepw %fp@(292),%d2
    28c4:	ffc2           	.short 0xffc2
    28c6:	01ee 2049      	bset %d0,%fp@(8265)
      flags |= FLAGS_PRECISION;
    28ca:	0045 0400      	oriw #1024,%d5
      if (_is_digit(*format)) {
    28ce:	102b 0001      	moveb %a3@(1),%d0
  return (ch >= '0') && (ch <= '9');
    28d2:	1200           	moveb %d0,%d1
    28d4:	0601 ffd0      	addib #-48,%d1
      if (_is_digit(*format)) {
    28d8:	0c01 0009      	cmpib #9,%d1
    28dc:	6300 05c2      	blsw 2ea0 <_vsnprintf+0x822>
      else if (*format == '*') {
    28e0:	0c00 002a      	cmpib #42,%d0
    28e4:	6700 05ea      	beqw 2ed0 <_vsnprintf+0x852>
      format++;
    28e8:	2649           	moveal %a1,%a3
    precision = 0U;
    28ea:	99cc           	subal %a4,%a4
    28ec:	5289           	addql #1,%a1
        format++;
    28ee:	2209           	movel %a1,%d1
    switch (*format) {
    28f0:	0c00 006c      	cmpib #108,%d0
    28f4:	6600 fe7e      	bnew 2774 <_vsnprintf+0xf6>
        if (*format == 'l') {
    28f8:	102b 0001      	moveb %a3@(1),%d0
    28fc:	0c00 006c      	cmpib #108,%d0
    2900:	6700 070e      	beqw 3010 <_vsnprintf+0x992>
        flags |= FLAGS_LONG;
    2904:	0045 0100      	oriw #256,%d5
    2908:	6000 fe8a      	braw 2794 <_vsnprintf+0x116>
        format++;
    290c:	2649           	moveal %a1,%a3
    290e:	6000 ff0a      	braw 281a <_vsnprintf+0x19c>
  unsigned int i = 0U;
    2912:	95ca           	subal %a2,%a2
    2914:	204a           	moveal %a2,%a0
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    2916:	2649           	moveal %a1,%a3
    2918:	45f0 8800      	lea %a0@(0000000000000000,%a0:l),%a2
    291c:	d5ca           	addal %a2,%a2
    291e:	d5c8           	addal %a0,%a2
    2920:	d5ca           	addal %a2,%a2
    2922:	4880           	extw %d0
    2924:	41f2 00d0      	lea %a2@(ffffffffffffffd0,%d0:w),%a0
  while (_is_digit(**str)) {
    2928:	1011           	moveb %a1@,%d0
  return (ch >= '0') && (ch <= '9');
    292a:	1200           	moveb %d0,%d1
    292c:	0601 ffd0      	addib #-48,%d1
  while (_is_digit(**str)) {
    2930:	0c01 0009      	cmpib #9,%d1
    2934:	6222           	bhis 2958 <_vsnprintf+0x2da>
    2936:	5289           	addql #1,%a1
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    2938:	2649           	moveal %a1,%a3
    293a:	45f0 8800      	lea %a0@(0000000000000000,%a0:l),%a2
    293e:	d5ca           	addal %a2,%a2
    2940:	d5c8           	addal %a0,%a2
    2942:	d5ca           	addal %a2,%a2
    2944:	4880           	extw %d0
    2946:	41f2 00d0      	lea %a2@(ffffffffffffffd0,%d0:w),%a0
  while (_is_digit(**str)) {
    294a:	1011           	moveb %a1@,%d0
  return (ch >= '0') && (ch <= '9');
    294c:	1200           	moveb %d0,%d1
    294e:	0601 ffd0      	addib #-48,%d1
  while (_is_digit(**str)) {
    2952:	0c01 0009      	cmpib #9,%d1
    2956:	63de           	blss 2936 <_vsnprintf+0x2b8>
    2958:	2448           	moveal %a0,%a2
    295a:	5289           	addql #1,%a1
    295c:	6000 fe02      	braw 2760 <_vsnprintf+0xe2>
      const int w = va_arg(va, int);
    2960:	2043           	moveal %d3,%a0
    2962:	2458           	moveal %a0@+,%a2
    2964:	2608           	movel %a0,%d3
      if (w < 0) {
    2966:	b4fc 0000      	cmpaw #0,%a2
    296a:	6d28           	blts 2994 <_vsnprintf+0x316>
    if (*format == '.') {
    296c:	102b 0001      	moveb %a3@(1),%d0
      format++;
    2970:	2649           	moveal %a1,%a3
    2972:	5289           	addql #1,%a1
    2974:	6000 fdea      	braw 2760 <_vsnprintf+0xe2>
    out = _out_null;
    2978:	4df9 0000 219a 	lea 219a <_out_null>,%fp
  while (*format)
    297e:	1013           	moveb %a3@,%d0
    2980:	9bcd           	subal %a5,%a5
    2982:	4a00           	tstb %d0
    2984:	6600 fd20      	bnew 26a6 <_vsnprintf+0x28>
    2988:	7400           	moveq #0,%d2
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    298a:	bbc6           	cmpal %d6,%a5
    298c:	6500 fd56      	bcsw 26e4 <_vsnprintf+0x66>
    2990:	6000 fd4e      	braw 26e0 <_vsnprintf+0x62>
        flags |= FLAGS_LEFT;    // reverse padding
    2994:	7002           	moveq #2,%d0
    2996:	8a80           	orl %d0,%d5
        width = (unsigned int)-w;
    2998:	220a           	movel %a2,%d1
    299a:	4481           	negl %d1
    299c:	2441           	moveal %d1,%a2
    if (*format == '.') {
    299e:	102b 0001      	moveb %a3@(1),%d0
      format++;
    29a2:	2649           	moveal %a1,%a3
    29a4:	5289           	addql #1,%a1
    29a6:	6000 fdb8      	braw 2760 <_vsnprintf+0xe2>
        if (*format == 'x' || *format == 'X') {
    29aa:	0c00 0062      	cmpib #98,%d0
    29ae:	6700 060e      	beqw 2fbe <_vsnprintf+0x940>
    29b2:	0c00 006f      	cmpib #111,%d0
    29b6:	6700 05be      	beqw 2f76 <_vsnprintf+0x8f8>
    29ba:	0c00 0058      	cmpib #88,%d0
    29be:	6700 0554      	beqw 2f14 <_vsnprintf+0x896>
          flags &= ~FLAGS_HASH;   // no hash for dec format
    29c2:	72ef           	moveq #-17,%d1
    29c4:	ca81           	andl %d1,%d5
          base = 10U;
    29c6:	327c 000a      	moveaw #10,%a1
        if (flags & FLAGS_PRECISION) {
    29ca:	2405           	movel %d5,%d2
    29cc:	0282 0000 0400 	andil #1024,%d2
        if ((*format != 'i') && (*format != 'd')) {
    29d2:	0c00 0069      	cmpib #105,%d0
    29d6:	6600 071c      	bnew 30f4 <_vsnprintf+0xa76>
        if (flags & FLAGS_PRECISION) {
    29da:	4a82           	tstl %d2
    29dc:	6600 0592      	bnew 2f70 <_vsnprintf+0x8f2>
          if (flags & FLAGS_LONG_LONG) {
    29e0:	0805 0009      	btst #9,%d5
    29e4:	6600 fcf0      	bnew 26d6 <_vsnprintf+0x58>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    29e8:	2403           	movel %d3,%d2
    29ea:	5882           	addql #4,%d2
            const long value = va_arg(va, long);
    29ec:	2043           	moveal %d3,%a0
    29ee:	2010           	movel %a0@,%d0
          else if (flags & FLAGS_LONG) {
    29f0:	0805 0008      	btst #8,%d5
    29f4:	660e           	bnes 2a04 <_vsnprintf+0x386>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    29f6:	0805 0006      	btst #6,%d5
    29fa:	6600 0772      	bnew 316e <_vsnprintf+0xaf0>
    29fe:	4a05           	tstb %d5
    2a00:	6a02           	bpls 2a04 <_vsnprintf+0x386>
    2a02:	48c0           	extl %d0
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    2a04:	2f05           	movel %d5,%sp@-
    2a06:	2f0a           	movel %a2,%sp@-
    2a08:	2f0c           	movel %a4,%sp@-
    2a0a:	2f09           	movel %a1,%sp@-
    2a0c:	2200           	movel %d0,%d1
    2a0e:	d281           	addl %d1,%d1
    2a10:	9381           	subxl %d1,%d1
    2a12:	4481           	negl %d1
    2a14:	2f01           	movel %d1,%sp@-
    2a16:	4a80           	tstl %d0
    2a18:	6d00 0738      	bltw 3152 <_vsnprintf+0xad4>
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    2a1c:	2f00           	movel %d0,%sp@-
    2a1e:	2f06           	movel %d6,%sp@-
    2a20:	2f0d           	movel %a5,%sp@-
    2a22:	2f07           	movel %d7,%sp@-
    2a24:	2f0e           	movel %fp,%sp@-
    2a26:	4eb9 0000 2248 	jsr 2248 <_ntoa_long>
    2a2c:	2a40           	moveal %d0,%a5
    2a2e:	4fef 0028      	lea %sp@(40),%sp
    2a32:	2602           	movel %d2,%d3
  while (*format)
    2a34:	1013           	moveb %a3@,%d0
    2a36:	6600 fc7e      	bnew 26b6 <_vsnprintf+0x38>
    2a3a:	6000 fc9e      	braw 26da <_vsnprintf+0x5c>
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
    2a3e:	7021           	moveq #33,%d0
    2a40:	8085           	orl %d5,%d0
    2a42:	2f00           	movel %d0,%sp@-
    2a44:	4878 0008      	pea 8 <DIVIDE_BY_ZERO>
    2a48:	2f0c           	movel %a4,%sp@-
    2a4a:	4878 0010      	pea 10 <DUART_MR1B>
    2a4e:	42a7           	clrl %sp@-
    2a50:	2043           	moveal %d3,%a0
    2a52:	2f18           	movel %a0@+,%sp@-
    2a54:	2608           	movel %a0,%d3
    2a56:	2f06           	movel %d6,%sp@-
    2a58:	2f0d           	movel %a5,%sp@-
    2a5a:	2f07           	movel %d7,%sp@-
    2a5c:	2f0e           	movel %fp,%sp@-
    2a5e:	4eb9 0000 2248 	jsr 2248 <_ntoa_long>
    2a64:	2a40           	moveal %d0,%a5
        break;
    2a66:	4fef 0028      	lea %sp@(40),%sp
  while (*format)
    2a6a:	1013           	moveb %a3@,%d0
    2a6c:	6600 fc48      	bnew 26b6 <_vsnprintf+0x38>
    2a70:	6000 fc68      	braw 26da <_vsnprintf+0x5c>
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
    2a74:	0c00 0046      	cmpib #70,%d0
    2a78:	6700 0482      	beqw 2efc <_vsnprintf+0x87e>
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
    2a7c:	2f43 003a      	movel %d3,%sp@(58)
    2a80:	2043           	moveal %d3,%a0
    2a82:	50af 003a      	addql #8,%sp@(58)
    2a86:	2f58 0032      	movel %a0@+,%sp@(50)
    2a8a:	2f58 0036      	movel %a0@+,%sp@(54)
  if (value != value)
    2a8e:	2f2f 0036      	movel %sp@(54),%sp@-
    2a92:	2f2f 0036      	movel %sp@(54),%sp@-
    2a96:	2f2f 003e      	movel %sp@(62),%sp@-
    2a9a:	2f2f 003e      	movel %sp@(62),%sp@-
    2a9e:	4eb9 0000 3fd8 	jsr 3fd8 <__nedf2>
    2aa4:	4fef 0010      	lea %sp@(16),%sp
    2aa8:	4a80           	tstl %d0
    2aaa:	6600 065a      	bnew 3106 <_vsnprintf+0xa88>
  if (value < -DBL_MAX)
    2aae:	4878 ffff      	pea ffffffff <LESS+0x0>
    2ab2:	2f3c ffef ffff 	movel #-1048577,%sp@-
    2ab8:	2f2f 003e      	movel %sp@(62),%sp@-
    2abc:	2f2f 003e      	movel %sp@(62),%sp@-
    2ac0:	4eb9 0000 4020 	jsr 4020 <__ltdf2>
    2ac6:	4fef 0010      	lea %sp@(16),%sp
    2aca:	4a80           	tstl %d0
    2acc:	6d00 065e      	bltw 312c <_vsnprintf+0xaae>
  if (value > DBL_MAX)
    2ad0:	4878 ffff      	pea ffffffff <LESS+0x0>
    2ad4:	2f3c 7fef ffff 	movel #2146435071,%sp@-
    2ada:	2f2f 003e      	movel %sp@(62),%sp@-
    2ade:	2f2f 003e      	movel %sp@(62),%sp@-
    2ae2:	4eb9 0000 3ffc 	jsr 3ffc <__gtdf2>
    2ae8:	4fef 0010      	lea %sp@(16),%sp
    2aec:	4a80           	tstl %d0
    2aee:	6e00 049e      	bgtw 2f8e <_vsnprintf+0x910>
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
    2af2:	42a7           	clrl %sp@-
    2af4:	2f3c 41cd cd65 	movel #1104006501,%sp@-
    2afa:	2f2f 003e      	movel %sp@(62),%sp@-
    2afe:	2f2f 003e      	movel %sp@(62),%sp@-
    2b02:	4eb9 0000 3ffc 	jsr 3ffc <__gtdf2>
    2b08:	4fef 0010      	lea %sp@(16),%sp
    2b0c:	4a80           	tstl %d0
    2b0e:	6e00 05da      	bgtw 30ea <_vsnprintf+0xa6c>
    2b12:	42a7           	clrl %sp@-
    2b14:	2f3c c1cd cd65 	movel #-1043477147,%sp@-
    2b1a:	2f2f 003e      	movel %sp@(62),%sp@-
    2b1e:	2f2f 003e      	movel %sp@(62),%sp@-
    2b22:	4eb9 0000 4020 	jsr 4020 <__ltdf2>
    2b28:	4fef 0010      	lea %sp@(16),%sp
    2b2c:	4a80           	tstl %d0
    2b2e:	6d00 05ba      	bltw 30ea <_vsnprintf+0xa6c>
  if (value < 0) {
    2b32:	4282           	clrl %d2
    2b34:	4283           	clrl %d3
    2b36:	2f03           	movel %d3,%sp@-
    2b38:	2f02           	movel %d2,%sp@-
    2b3a:	2f2f 003e      	movel %sp@(62),%sp@-
    2b3e:	2f2f 003e      	movel %sp@(62),%sp@-
    2b42:	4eb9 0000 4020 	jsr 4020 <__ltdf2>
    2b48:	4fef 0010      	lea %sp@(16),%sp
    2b4c:	4a80           	tstl %d0
    2b4e:	6d00 063c      	bltw 318c <_vsnprintf+0xb0e>
  bool negative = false;
    2b52:	422f 0057      	clrb %sp@(87)
    2b56:	2f7c 0000 35fa 	movel #13818,%sp@(74)
    2b5c:	004a 
  if (!(flags & FLAGS_PRECISION)) {
    2b5e:	0805 000a      	btst #10,%d5
    2b62:	6604           	bnes 2b68 <_vsnprintf+0x4ea>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
    2b64:	387c 0006      	moveaw #6,%a4
    2b68:	70e0           	moveq #-32,%d0
    2b6a:	d08c           	addl %a4,%d0
    2b6c:	43ef 0058      	lea %sp@(88),%a1
    2b70:	280c           	movel %a4,%d4
    2b72:	204c           	moveal %a4,%a0
    2b74:	91c4           	subal %d4,%a0
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    2b76:	7209           	moveq #9,%d1
    2b78:	b284           	cmpl %d4,%d1
    2b7a:	640e           	bccs 2b8a <_vsnprintf+0x50c>
    buf[len++] = '0';
    2b7c:	12fc 0030      	moveb #48,%a1@+
    prec--;
    2b80:	5384           	subql #1,%d4
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    2b82:	b880           	cmpl %d0,%d4
    2b84:	66ec           	bnes 2b72 <_vsnprintf+0x4f4>
    2b86:	307c 0020      	moveaw #32,%a0
  int whole = (int)value;
    2b8a:	2f2f 0036      	movel %sp@(54),%sp@-
    2b8e:	2f2f 0036      	movel %sp@(54),%sp@-
    2b92:	2f48 0036      	movel %a0,%sp@(54)
    2b96:	4eb9 0000 44e2 	jsr 44e2 <__fixdfsi>
    2b9c:	508f           	addql #8,%sp
    2b9e:	2400           	movel %d0,%d2
  double tmp = (value - whole) * pow10[prec];
    2ba0:	43f9 0000 4670 	lea 4670 <pow10.0>,%a1
    2ba6:	2004           	movel %d4,%d0
    2ba8:	e788           	lsll #3,%d0
    2baa:	2f71 0800 004e 	movel %a1@(0000000000000000,%d0:l),%sp@(78)
    2bb0:	2f71 0804 0052 	movel %a1@(0000000000000004,%d0:l),%sp@(82)
    2bb6:	2f02           	movel %d2,%sp@-
    2bb8:	4eb9 0000 42ba 	jsr 42ba <__floatsidf>
    2bbe:	2e81           	movel %d1,%sp@
    2bc0:	2f00           	movel %d0,%sp@-
    2bc2:	2f2f 003e      	movel %sp@(62),%sp@-
    2bc6:	2f2f 003e      	movel %sp@(62),%sp@-
    2bca:	226f 005a      	moveal %sp@(90),%a1
    2bce:	4e91           	jsr %a1@
    2bd0:	4fef 0010      	lea %sp@(16),%sp
    2bd4:	2f2f 0052      	movel %sp@(82),%sp@-
    2bd8:	2f2f 0052      	movel %sp@(82),%sp@-
    2bdc:	2f01           	movel %d1,%sp@-
    2bde:	2f00           	movel %d0,%sp@-
    2be0:	4eb9 0000 3996 	jsr 3996 <__muldf3>
    2be6:	4fef 0010      	lea %sp@(16),%sp
    2bea:	2240           	moveal %d0,%a1
    2bec:	2009           	movel %a1,%d0
    2bee:	2f40 0042      	movel %d0,%sp@(66)
    2bf2:	2f41 0046      	movel %d1,%sp@(70)
  unsigned long frac = (unsigned long)tmp;
    2bf6:	2f01           	movel %d1,%sp@-
    2bf8:	2f09           	movel %a1,%sp@-
    2bfa:	4eb9 0000 4068 	jsr 4068 <__fixunsdfsi>
    2c00:	508f           	addql #8,%sp
    2c02:	2600           	movel %d0,%d3
  diff = tmp - frac;
    2c04:	49f9 0000 4244 	lea 4244 <__floatunsidf>,%a4
    2c0a:	2f00           	movel %d0,%sp@-
    2c0c:	4e94           	jsr %a4@
    2c0e:	2e81           	movel %d1,%sp@
    2c10:	2f00           	movel %d0,%sp@-
    2c12:	2f2f 004e      	movel %sp@(78),%sp@-
    2c16:	2f2f 004e      	movel %sp@(78),%sp@-
    2c1a:	226f 005a      	moveal %sp@(90),%a1
    2c1e:	4e91           	jsr %a1@
    2c20:	4fef 0010      	lea %sp@(16),%sp
    2c24:	2f40 0042      	movel %d0,%sp@(66)
    2c28:	2f41 0046      	movel %d1,%sp@(70)
  if (diff > 0.5) {
    2c2c:	42a7           	clrl %sp@-
    2c2e:	2f3c 3fe0 0000 	movel #1071644672,%sp@-
    2c34:	2f2f 004e      	movel %sp@(78),%sp@-
    2c38:	2f2f 004e      	movel %sp@(78),%sp@-
    2c3c:	4eb9 0000 3ffc 	jsr 3ffc <__gtdf2>
    2c42:	4fef 0010      	lea %sp@(16),%sp
    2c46:	206f 002e      	moveal %sp@(46),%a0
    2c4a:	4a80           	tstl %d0
    2c4c:	6f00 0600      	blew 324e <_vsnprintf+0xbd0>
    ++frac;
    2c50:	5283           	addql #1,%d3
    if (frac >= pow10[prec]) {
    2c52:	2f03           	movel %d3,%sp@-
    2c54:	4e94           	jsr %a4@
    2c56:	2e81           	movel %d1,%sp@
    2c58:	2f00           	movel %d0,%sp@-
    2c5a:	2f2f 005a      	movel %sp@(90),%sp@-
    2c5e:	2f2f 005a      	movel %sp@(90),%sp@-
    2c62:	4eb9 0000 4044 	jsr 4044 <__ledf2>
    2c68:	4fef 0010      	lea %sp@(16),%sp
    2c6c:	206f 002e      	moveal %sp@(46),%a0
    2c70:	4a80           	tstl %d0
    2c72:	6e04           	bgts 2c78 <_vsnprintf+0x5fa>
      ++whole;
    2c74:	5282           	addql #1,%d2
      frac = 0;
    2c76:	7600           	moveq #0,%d3
  if (prec == 0U) {
    2c78:	4a84           	tstl %d4
    2c7a:	6600 0574      	bnew 31f0 <_vsnprintf+0xb72>
    diff = value - (double)whole;
    2c7e:	2f02           	movel %d2,%sp@-
    2c80:	2f48 0032      	movel %a0,%sp@(50)
    2c84:	4eb9 0000 42ba 	jsr 42ba <__floatsidf>
    2c8a:	2e81           	movel %d1,%sp@
    2c8c:	2f00           	movel %d0,%sp@-
    2c8e:	2f2f 003e      	movel %sp@(62),%sp@-
    2c92:	2f2f 003e      	movel %sp@(62),%sp@-
    2c96:	226f 005a      	moveal %sp@(90),%a1
    2c9a:	4e91           	jsr %a1@
    2c9c:	4fef 0010      	lea %sp@(16),%sp
    2ca0:	2600           	movel %d0,%d3
    2ca2:	2801           	movel %d1,%d4
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
    2ca4:	42a7           	clrl %sp@-
    2ca6:	2f3c 3fe0 0000 	movel #1071644672,%sp@-
    2cac:	2f01           	movel %d1,%sp@-
    2cae:	2f03           	movel %d3,%sp@-
    2cb0:	4eb9 0000 4020 	jsr 4020 <__ltdf2>
    2cb6:	4fef 0010      	lea %sp@(16),%sp
    2cba:	206f 002e      	moveal %sp@(46),%a0
    2cbe:	4a80           	tstl %d0
    2cc0:	6c22           	bges 2ce4 <_vsnprintf+0x666>
    2cc2:	42a7           	clrl %sp@-
    2cc4:	2f3c 3fe0 0000 	movel #1071644672,%sp@-
    2cca:	2f04           	movel %d4,%sp@-
    2ccc:	2f03           	movel %d3,%sp@-
    2cce:	2f48 003e      	movel %a0,%sp@(62)
    2cd2:	4eb9 0000 3ffc 	jsr 3ffc <__gtdf2>
    2cd8:	4fef 0010      	lea %sp@(16),%sp
    2cdc:	206f 002e      	moveal %sp@(46),%a0
    2ce0:	4a80           	tstl %d0
    2ce2:	6f08           	bles 2cec <_vsnprintf+0x66e>
    2ce4:	0802 0000      	btst #0,%d2
    2ce8:	6702           	beqs 2cec <_vsnprintf+0x66e>
      ++whole;
    2cea:	5282           	addql #1,%d2
    2cec:	49ef 0058      	lea %sp@(88),%a4
    2cf0:	d9c8           	addal %a0,%a4
    2cf2:	7658           	moveq #88,%d3
    2cf4:	d68f           	addl %sp,%d3
    2cf6:	7020           	moveq #32,%d0
    2cf8:	d680           	addl %d0,%d3
    if (!(whole /= 10)) {
    2cfa:	283c 0000 3510 	movel #13584,%d4
    2d00:	2f45 0032      	movel %d5,%sp@(50)
    2d04:	2f46 0042      	movel %d6,%sp@(66)
    2d08:	2c02           	movel %d2,%d6
    2d0a:	2a2f 003e      	movel %sp@(62),%d5
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    2d0e:	b9c3           	cmpal %d3,%a4
    2d10:	6700 05f4      	beqw 3306 <_vsnprintf+0xc88>
    buf[len++] = (char)(48 + (whole % 10));
    2d14:	2405           	movel %d5,%d2
    2d16:	d48c           	addl %a4,%d2
    2d18:	4878 000a      	pea a <DUART_IMR>
    2d1c:	2f06           	movel %d6,%sp@-
    2d1e:	4eb9 0000 3570 	jsr 3570 <__modsi3>
    2d24:	508f           	addql #8,%sp
    2d26:	0600 0030      	addib #48,%d0
    2d2a:	18c0           	moveb %d0,%a4@+
    if (!(whole /= 10)) {
    2d2c:	4878 000a      	pea a <DUART_IMR>
    2d30:	2f06           	movel %d6,%sp@-
    2d32:	2044           	moveal %d4,%a0
    2d34:	4e90           	jsr %a0@
    2d36:	508f           	addql #8,%sp
    2d38:	2c00           	movel %d0,%d6
    2d3a:	66d2           	bnes 2d0e <_vsnprintf+0x690>
    2d3c:	2a2f 0032      	movel %sp@(50),%d5
    2d40:	2c2f 0042      	movel %sp@(66),%d6
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
    2d44:	7003           	moveq #3,%d0
    2d46:	c085           	andl %d5,%d0
    2d48:	5380           	subql #1,%d0
    2d4a:	6700 0698      	beqw 33e4 <_vsnprintf+0xd66>
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
    2d4e:	7820           	moveq #32,%d4
    2d50:	b882           	cmpl %d2,%d4
    2d52:	6700 0584      	beqw 32d8 <_vsnprintf+0xc5a>
      buf[len++] = '-';
    2d56:	2002           	movel %d2,%d0
    if (negative) {
    2d58:	4a2f 0057      	tstb %sp@(87)
    2d5c:	6700 058a      	beqw 32e8 <_vsnprintf+0xc6a>
      buf[len++] = '-';
    2d60:	5280           	addql #1,%d0
    2d62:	1fbc 002d 2858 	moveb #45,%sp@(0000000000000058,%d2:l)
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
    2d68:	2f05           	movel %d5,%sp@-
    2d6a:	2f0a           	movel %a2,%sp@-
    2d6c:	2f00           	movel %d0,%sp@-
    2d6e:	486f 0064      	pea %sp@(100)
    2d72:	2f06           	movel %d6,%sp@-
    2d74:	2f0d           	movel %a5,%sp@-
    2d76:	2f07           	movel %d7,%sp@-
    2d78:	2f0e           	movel %fp,%sp@-
    2d7a:	4eb9 0000 219c 	jsr 219c <_out_rev>
    2d80:	2a40           	moveal %d0,%a5
    2d82:	4fef 0020      	lea %sp@(32),%sp
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
    2d86:	262f 003a      	movel %sp@(58),%d3
  while (*format)
    2d8a:	1013           	moveb %a3@,%d0
    2d8c:	6600 f928      	bnew 26b6 <_vsnprintf+0x38>
    2d90:	6000 f948      	braw 26da <_vsnprintf+0x5c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    2d94:	2803           	movel %d3,%d4
    2d96:	5884           	addql #4,%d4
        if (!(flags & FLAGS_LEFT)) {
    2d98:	0805 0001      	btst #1,%d5
    2d9c:	6700 0308      	beqw 30a6 <_vsnprintf+0xa28>
      out(*format, buffer, idx++, maxlen);
    2da0:	240d           	movel %a5,%d2
    2da2:	5282           	addql #1,%d2
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    2da4:	2f06           	movel %d6,%sp@-
    2da6:	2f0d           	movel %a5,%sp@-
    2da8:	2f07           	movel %d7,%sp@-
    2daa:	2043           	moveal %d3,%a0
    2dac:	2010           	movel %a0@,%d0
    2dae:	4880           	extw %d0
    2db0:	3240           	moveaw %d0,%a1
    2db2:	2f09           	movel %a1,%sp@-
    2db4:	4e96           	jsr %fp@
          while (l++ < width) {
    2db6:	4fef 0010      	lea %sp@(16),%sp
    2dba:	dbca           	addal %a2,%a5
    2dbc:	7001           	moveq #1,%d0
    2dbe:	b08a           	cmpl %a2,%d0
    2dc0:	6400 0426      	bccw 31e8 <_vsnprintf+0xb6a>
            out(' ', buffer, idx++, maxlen);
    2dc4:	2002           	movel %d2,%d0
    2dc6:	5282           	addql #1,%d2
    2dc8:	2f06           	movel %d6,%sp@-
    2dca:	2f00           	movel %d0,%sp@-
    2dcc:	2f07           	movel %d7,%sp@-
    2dce:	4878 0020      	pea 20 <R_STOPCNTCMD+0x2>
    2dd2:	4e96           	jsr %fp@
          while (l++ < width) {
    2dd4:	4fef 0010      	lea %sp@(16),%sp
    2dd8:	b48d           	cmpl %a5,%d2
    2dda:	66e8           	bnes 2dc4 <_vsnprintf+0x746>
        break;
    2ddc:	2604           	movel %d4,%d3
  while (*format)
    2dde:	1013           	moveb %a3@,%d0
    2de0:	6600 f8d4      	bnew 26b6 <_vsnprintf+0x38>
    2de4:	6000 f8f4      	braw 26da <_vsnprintf+0x5c>
        if (*format == 'h') {
    2de8:	102b 0001      	moveb %a3@(1),%d0
    2dec:	0c00 0068      	cmpib #104,%d0
    2df0:	6700 022e      	beqw 3020 <_vsnprintf+0x9a2>
        flags |= FLAGS_SHORT;
    2df4:	747f           	moveq #127,%d2
    2df6:	4602           	notb %d2
    2df8:	8a82           	orl %d2,%d5
    2dfa:	6000 f998      	braw 2794 <_vsnprintf+0x116>
        const char* p = va_arg(va, char*);
    2dfe:	2f43 0032      	movel %d3,%sp@(50)
    2e02:	2043           	moveal %d3,%a0
    2e04:	58af 0032      	addql #4,%sp@(50)
    2e08:	2618           	movel %a0@+,%d3
  for (s = str; *s && maxsize--; ++s);
    2e0a:	2243           	moveal %d3,%a1
    2e0c:	1211           	moveb %a1@,%d1
    2e0e:	1001           	moveb %d1,%d0
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
    2e10:	b8fc 0000      	cmpaw #0,%a4
    2e14:	6700 00d4      	beqw 2eea <_vsnprintf+0x86c>
  for (s = str; *s && maxsize--; ++s);
    2e18:	4a01           	tstb %d1
    2e1a:	671a           	beqs 2e36 <_vsnprintf+0x7b8>
    2e1c:	280c           	movel %a4,%d4
    2e1e:	5384           	subql #1,%d4
    2e20:	2243           	moveal %d3,%a1
    2e22:	41f1 4801      	lea %a1@(0000000000000001,%d4:l),%a0
    2e26:	5289           	addql #1,%a1
    2e28:	4a11           	tstb %a1@
    2e2a:	6700 0206      	beqw 3032 <_vsnprintf+0x9b4>
    2e2e:	b3c8           	cmpal %a0,%a1
    2e30:	66f4           	bnes 2e26 <_vsnprintf+0x7a8>
  return (unsigned int)(s - str);
    2e32:	2408           	movel %a0,%d2
    2e34:	9483           	subl %d3,%d2
        if (flags & FLAGS_PRECISION) {
    2e36:	2805           	movel %d5,%d4
    2e38:	0284 0000 0400 	andil #1024,%d4
    2e3e:	2244           	moveal %d4,%a1
    2e40:	0805 000a      	btst #10,%d5
    2e44:	6706           	beqs 2e4c <_vsnprintf+0x7ce>
          l = (l < precision ? l : precision);
    2e46:	b9c2           	cmpal %d2,%a4
    2e48:	6402           	bccs 2e4c <_vsnprintf+0x7ce>
    2e4a:	240c           	movel %a4,%d2
        if (!(flags & FLAGS_LEFT)) {
    2e4c:	7802           	moveq #2,%d4
    2e4e:	c885           	andl %d5,%d4
    2e50:	2f44 003a      	movel %d4,%sp@(58)
    2e54:	0805 0001      	btst #1,%d5
    2e58:	6700 0202      	beqw 305c <_vsnprintf+0x9de>
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    2e5c:	4a01           	tstb %d1
    2e5e:	6700 017e      	beqw 2fde <_vsnprintf+0x960>
          out(*(p++), buffer, idx++, maxlen);
    2e62:	220d           	movel %a5,%d1
    2e64:	2809           	movel %a1,%d4
    2e66:	204a           	moveal %a2,%a0
    2e68:	244c           	moveal %a4,%a2
    2e6a:	2843           	moveal %d3,%a4
    2e6c:	2608           	movel %a0,%d3
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    2e6e:	4a84           	tstl %d4
    2e70:	670e           	beqs 2e80 <_vsnprintf+0x802>
    2e72:	41ea ffff      	lea %a2@(-1),%a0
    2e76:	b4fc 0000      	cmpaw #0,%a2
    2e7a:	6700 015a      	beqw 2fd6 <_vsnprintf+0x958>
    2e7e:	2448           	moveal %a0,%a2
          out(*(p++), buffer, idx++, maxlen);
    2e80:	528d           	addql #1,%a5
    2e82:	528c           	addql #1,%a4
    2e84:	2f06           	movel %d6,%sp@-
    2e86:	2f01           	movel %d1,%sp@-
    2e88:	2f07           	movel %d7,%sp@-
    2e8a:	4880           	extw %d0
    2e8c:	3040           	moveaw %d0,%a0
    2e8e:	2f08           	movel %a0,%sp@-
    2e90:	4e96           	jsr %fp@
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    2e92:	1014           	moveb %a4@,%d0
    2e94:	4fef 0010      	lea %sp@(16),%sp
    2e98:	6700 013c      	beqw 2fd6 <_vsnprintf+0x958>
          out(*(p++), buffer, idx++, maxlen);
    2e9c:	220d           	movel %a5,%d1
    2e9e:	60ce           	bras 2e6e <_vsnprintf+0x7f0>
  unsigned int i = 0U;
    2ea0:	99cc           	subal %a4,%a4
    2ea2:	224c           	moveal %a4,%a1
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    2ea4:	5288           	addql #1,%a0
    2ea6:	49f1 9800      	lea %a1@(0000000000000000,%a1:l),%a4
    2eaa:	d9cc           	addal %a4,%a4
    2eac:	d9c9           	addal %a1,%a4
    2eae:	d9cc           	addal %a4,%a4
    2eb0:	4880           	extw %d0
    2eb2:	43f4 00d0      	lea %a4@(ffffffffffffffd0,%d0:w),%a1
  while (_is_digit(**str)) {
    2eb6:	1010           	moveb %a0@,%d0
  return (ch >= '0') && (ch <= '9');
    2eb8:	1200           	moveb %d0,%d1
    2eba:	0601 ffd0      	addib #-48,%d1
  while (_is_digit(**str)) {
    2ebe:	0c01 0009      	cmpib #9,%d1
    2ec2:	63e0           	blss 2ea4 <_vsnprintf+0x826>
    2ec4:	2849           	moveal %a1,%a4
    2ec6:	2648           	moveal %a0,%a3
    2ec8:	43e8 0001      	lea %a0@(1),%a1
    2ecc:	6000 f89c      	braw 276a <_vsnprintf+0xec>
        precision = prec > 0 ? (unsigned int)prec : 0U;
    2ed0:	2043           	moveal %d3,%a0
    2ed2:	2858           	moveal %a0@+,%a4
    2ed4:	2608           	movel %a0,%d3
    2ed6:	b8fc 0000      	cmpaw #0,%a4
    2eda:	6d28           	blts 2f04 <_vsnprintf+0x886>
    switch (*format) {
    2edc:	102b 0002      	moveb %a3@(2),%d0
        format++;
    2ee0:	548b           	addql #2,%a3
    2ee2:	43eb 0001      	lea %a3@(1),%a1
    2ee6:	6000 f882      	braw 276a <_vsnprintf+0xec>
  for (s = str; *s && maxsize--; ++s);
    2eea:	78fe           	moveq #-2,%d4
    2eec:	4a01           	tstb %d1
    2eee:	6700 ff46      	beqw 2e36 <_vsnprintf+0x7b8>
    2ef2:	2243           	moveal %d3,%a1
    2ef4:	41f1 4801      	lea %a1@(0000000000000001,%d4:l),%a0
    2ef8:	6000 ff2c      	braw 2e26 <_vsnprintf+0x7a8>
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
    2efc:	7020           	moveq #32,%d0
    2efe:	8a80           	orl %d0,%d5
    2f00:	6000 fb7a      	braw 2a7c <_vsnprintf+0x3fe>
        precision = prec > 0 ? (unsigned int)prec : 0U;
    2f04:	99cc           	subal %a4,%a4
    switch (*format) {
    2f06:	102b 0002      	moveb %a3@(2),%d0
        format++;
    2f0a:	548b           	addql #2,%a3
    2f0c:	43eb 0001      	lea %a3@(1),%a1
    2f10:	6000 f858      	braw 276a <_vsnprintf+0xec>
          flags |= FLAGS_UPPERCASE;
    2f14:	7420           	moveq #32,%d2
    2f16:	8a82           	orl %d2,%d5
    2f18:	327c 0010      	moveaw #16,%a1
    2f1c:	2405           	movel %d5,%d2
    2f1e:	0282 0000 0400 	andil #1024,%d2
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    2f24:	78f3           	moveq #-13,%d4
    2f26:	ca84           	andl %d4,%d5
        if (flags & FLAGS_PRECISION) {
    2f28:	4a82           	tstl %d2
    2f2a:	6644           	bnes 2f70 <_vsnprintf+0x8f2>
        if ((*format == 'i') || (*format == 'd')) {
    2f2c:	0c00 0069      	cmpib #105,%d0
    2f30:	6700 faae      	beqw 29e0 <_vsnprintf+0x362>
    2f34:	0c00 0064      	cmpib #100,%d0
    2f38:	6700 faa6      	beqw 29e0 <_vsnprintf+0x362>
          if (flags & FLAGS_LONG_LONG) {
    2f3c:	0805 0009      	btst #9,%d5
    2f40:	6600 f794      	bnew 26d6 <_vsnprintf+0x58>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    2f44:	2403           	movel %d3,%d2
    2f46:	5882           	addql #4,%d2
          else if (flags & FLAGS_LONG) {
    2f48:	0805 0008      	btst #8,%d5
    2f4c:	6600 0272      	bnew 31c0 <_vsnprintf+0xb42>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
    2f50:	0805 0006      	btst #6,%d5
    2f54:	6700 0332      	beqw 3288 <_vsnprintf+0xc0a>
    2f58:	7000           	moveq #0,%d0
    2f5a:	4600           	notb %d0
    2f5c:	2043           	moveal %d3,%a0
    2f5e:	c090           	andl %a0@,%d0
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    2f60:	2f05           	movel %d5,%sp@-
    2f62:	2f0a           	movel %a2,%sp@-
    2f64:	2f0c           	movel %a4,%sp@-
    2f66:	2f09           	movel %a1,%sp@-
    2f68:	42a7           	clrl %sp@-
    2f6a:	2f00           	movel %d0,%sp@-
    2f6c:	6000 fab0      	braw 2a1e <_vsnprintf+0x3a0>
          flags &= ~FLAGS_ZEROPAD;
    2f70:	72fe           	moveq #-2,%d1
    2f72:	ca81           	andl %d1,%d5
    2f74:	60b6           	bras 2f2c <_vsnprintf+0x8ae>
          while (l++ < width) {
    2f76:	327c 0008      	moveaw #8,%a1
        if (flags & FLAGS_PRECISION) {
    2f7a:	2405           	movel %d5,%d2
    2f7c:	0282 0000 0400 	andil #1024,%d2
        if ((*format != 'i') && (*format != 'd')) {
    2f82:	0c00 0069      	cmpib #105,%d0
    2f86:	6700 fa52      	beqw 29da <_vsnprintf+0x35c>
    2f8a:	6000 0168      	braw 30f4 <_vsnprintf+0xa76>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
    2f8e:	0805 0002      	btst #2,%d5
    2f92:	6700 01c6      	beqw 315a <_vsnprintf+0xadc>
    2f96:	7204           	moveq #4,%d1
    2f98:	203c 0000 465d 	movel #18013,%d0
    2f9e:	2f05           	movel %d5,%sp@-
    2fa0:	2f0a           	movel %a2,%sp@-
    2fa2:	2f01           	movel %d1,%sp@-
    2fa4:	2f00           	movel %d0,%sp@-
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
    2fa6:	2f06           	movel %d6,%sp@-
    2fa8:	2f0d           	movel %a5,%sp@-
    2faa:	2f07           	movel %d7,%sp@-
    2fac:	2f0e           	movel %fp,%sp@-
    2fae:	4eb9 0000 219c 	jsr 219c <_out_rev>
    2fb4:	2a40           	moveal %d0,%a5
    2fb6:	4fef 0020      	lea %sp@(32),%sp
    2fba:	6000 fdca      	braw 2d86 <_vsnprintf+0x708>
    switch (*format) {
    2fbe:	327c 0002      	moveaw #2,%a1
    2fc2:	2405           	movel %d5,%d2
    2fc4:	0282 0000 0400 	andil #1024,%d2
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    2fca:	78f3           	moveq #-13,%d4
    2fcc:	ca84           	andl %d4,%d5
        if (flags & FLAGS_PRECISION) {
    2fce:	4a82           	tstl %d2
    2fd0:	6700 ff5a      	beqw 2f2c <_vsnprintf+0x8ae>
    2fd4:	609a           	bras 2f70 <_vsnprintf+0x8f2>
    2fd6:	2443           	moveal %d3,%a2
        if (flags & FLAGS_LEFT) {
    2fd8:	4aaf 003a      	tstl %sp@(58)
    2fdc:	6724           	beqs 3002 <_vsnprintf+0x984>
    2fde:	280d           	movel %a5,%d4
          while (l++ < width) {
    2fe0:	b48a           	cmpl %a2,%d2
    2fe2:	641e           	bccs 3002 <_vsnprintf+0x984>
    2fe4:	4bf2 d800      	lea %a2@(0000000000000000,%a5:l),%a5
    2fe8:	9bc2           	subal %d2,%a5
            out(' ', buffer, idx++, maxlen);
    2fea:	2004           	movel %d4,%d0
    2fec:	5284           	addql #1,%d4
    2fee:	2f06           	movel %d6,%sp@-
    2ff0:	2f00           	movel %d0,%sp@-
    2ff2:	2f07           	movel %d7,%sp@-
    2ff4:	4878 0020      	pea 20 <R_STOPCNTCMD+0x2>
    2ff8:	4e96           	jsr %fp@
          while (l++ < width) {
    2ffa:	4fef 0010      	lea %sp@(16),%sp
    2ffe:	b88d           	cmpl %a5,%d4
    3000:	66e8           	bnes 2fea <_vsnprintf+0x96c>
        const char* p = va_arg(va, char*);
    3002:	262f 0032      	movel %sp@(50),%d3
  while (*format)
    3006:	1013           	moveb %a3@,%d0
    3008:	6600 f6ac      	bnew 26b6 <_vsnprintf+0x38>
    300c:	6000 f6cc      	braw 26da <_vsnprintf+0x5c>
          flags |= FLAGS_LONG_LONG;
    3010:	0045 0300      	oriw #768,%d5
          format++;
    3014:	220b           	movel %a3,%d1
    3016:	5481           	addql #2,%d1
    switch (*format) {
    3018:	102b 0002      	moveb %a3@(2),%d0
    301c:	6000 f776      	braw 2794 <_vsnprintf+0x116>
          flags |= FLAGS_CHAR;
    3020:	783f           	moveq #63,%d4
    3022:	4604           	notb %d4
    3024:	8a84           	orl %d4,%d5
          format++;
    3026:	220b           	movel %a3,%d1
    3028:	5481           	addql #2,%d1
    switch (*format) {
    302a:	102b 0002      	moveb %a3@(2),%d0
    302e:	6000 f764      	braw 2794 <_vsnprintf+0x116>
  return (unsigned int)(s - str);
    3032:	2409           	movel %a1,%d2
    3034:	9483           	subl %d3,%d2
    3036:	6000 fdfe      	braw 2e36 <_vsnprintf+0x7b8>
        if (*format == 'x' || *format == 'X') {
    303a:	0c00 0078      	cmpib #120,%d0
    303e:	6600 f972      	bnew 29b2 <_vsnprintf+0x334>
          base = 16U;
    3042:	327c 0010      	moveaw #16,%a1
    3046:	2405           	movel %d5,%d2
    3048:	0282 0000 0400 	andil #1024,%d2
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    304e:	78f3           	moveq #-13,%d4
    3050:	ca84           	andl %d4,%d5
        if (flags & FLAGS_PRECISION) {
    3052:	4a82           	tstl %d2
    3054:	6700 fed6      	beqw 2f2c <_vsnprintf+0x8ae>
    3058:	6000 ff16      	braw 2f70 <_vsnprintf+0x8f2>
          while (l++ < width) {
    305c:	2002           	movel %d2,%d0
    305e:	5280           	addql #1,%d0
    3060:	b48a           	cmpl %a2,%d2
    3062:	6400 033e      	bccw 33a2 <_vsnprintf+0xd24>
    3066:	2a0a           	movel %a2,%d5
    3068:	da8d           	addl %a5,%d5
    306a:	9a82           	subl %d2,%d5
    306c:	2809           	movel %a1,%d4
            out(' ', buffer, idx++, maxlen);
    306e:	200d           	movel %a5,%d0
    3070:	528d           	addql #1,%a5
    3072:	2f06           	movel %d6,%sp@-
    3074:	2f00           	movel %d0,%sp@-
    3076:	2f07           	movel %d7,%sp@-
    3078:	4878 0020      	pea 20 <R_STOPCNTCMD+0x2>
    307c:	4e96           	jsr %fp@
          while (l++ < width) {
    307e:	4fef 0010      	lea %sp@(16),%sp
    3082:	bbc5           	cmpal %d5,%a5
    3084:	66e8           	bnes 306e <_vsnprintf+0x9f0>
    3086:	2244           	moveal %d4,%a1
    3088:	240a           	movel %a2,%d2
    308a:	5282           	addql #1,%d2
    308c:	2043           	moveal %d3,%a0
    308e:	1210           	moveb %a0@,%d1
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    3090:	1001           	moveb %d1,%d0
    3092:	6700 ff6e      	beqw 3002 <_vsnprintf+0x984>
          out(*(p++), buffer, idx++, maxlen);
    3096:	220d           	movel %a5,%d1
    3098:	2809           	movel %a1,%d4
    309a:	204a           	moveal %a2,%a0
    309c:	244c           	moveal %a4,%a2
    309e:	2843           	moveal %d3,%a4
    30a0:	2608           	movel %a0,%d3
    30a2:	6000 fdca      	braw 2e6e <_vsnprintf+0x7f0>
          while (l++ < width) {
    30a6:	7001           	moveq #1,%d0
    30a8:	b08a           	cmpl %a2,%d0
    30aa:	6400 02d6      	bccw 3382 <_vsnprintf+0xd04>
    30ae:	45f2 d8ff      	lea %a2@(ffffffffffffffff,%a5:l),%a2
            out(' ', buffer, idx++, maxlen);
    30b2:	200d           	movel %a5,%d0
    30b4:	528d           	addql #1,%a5
    30b6:	2f06           	movel %d6,%sp@-
    30b8:	2f00           	movel %d0,%sp@-
    30ba:	2f07           	movel %d7,%sp@-
    30bc:	4878 0020      	pea 20 <R_STOPCNTCMD+0x2>
    30c0:	4e96           	jsr %fp@
          while (l++ < width) {
    30c2:	4fef 0010      	lea %sp@(16),%sp
    30c6:	bbca           	cmpal %a2,%a5
    30c8:	66e8           	bnes 30b2 <_vsnprintf+0xa34>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    30ca:	4bea 0001      	lea %a2@(1),%a5
    30ce:	2f06           	movel %d6,%sp@-
    30d0:	2f0a           	movel %a2,%sp@-
    30d2:	2f07           	movel %d7,%sp@-
    30d4:	2043           	moveal %d3,%a0
    30d6:	2010           	movel %a0@,%d0
    30d8:	4880           	extw %d0
    30da:	3240           	moveaw %d0,%a1
    30dc:	2f09           	movel %a1,%sp@-
    30de:	4e96           	jsr %fp@
    30e0:	4fef 0010      	lea %sp@(16),%sp
        break;
    30e4:	2604           	movel %d4,%d3
    30e6:	6000 fcf6      	braw 2dde <_vsnprintf+0x760>
    return 0U;
    30ea:	9bcd           	subal %a5,%a5
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
    30ec:	262f 003a      	movel %sp@(58),%d3
    30f0:	6000 fc98      	braw 2d8a <_vsnprintf+0x70c>
        if ((*format != 'i') && (*format != 'd')) {
    30f4:	0c00 0064      	cmpib #100,%d0
    30f8:	6600 fe2a      	bnew 2f24 <_vsnprintf+0x8a6>
        if (flags & FLAGS_PRECISION) {
    30fc:	4a82           	tstl %d2
    30fe:	6700 f8e0      	beqw 29e0 <_vsnprintf+0x362>
    3102:	6000 fe6c      	braw 2f70 <_vsnprintf+0x8f2>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
    3106:	2f05           	movel %d5,%sp@-
    3108:	2f0a           	movel %a2,%sp@-
    310a:	4878 0003      	pea 3 <DIVIDE>
    310e:	4879 0000 4666 	pea 4666 <__gedf2+0x3a>
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
    3114:	2f06           	movel %d6,%sp@-
    3116:	2f0d           	movel %a5,%sp@-
    3118:	2f07           	movel %d7,%sp@-
    311a:	2f0e           	movel %fp,%sp@-
    311c:	4eb9 0000 219c 	jsr 219c <_out_rev>
    3122:	2a40           	moveal %d0,%a5
    3124:	4fef 0020      	lea %sp@(32),%sp
    3128:	6000 fc5c      	braw 2d86 <_vsnprintf+0x708>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
    312c:	2f05           	movel %d5,%sp@-
    312e:	2f0a           	movel %a2,%sp@-
    3130:	4878 0004      	pea 4 <DUART_CRA>
    3134:	4879 0000 466a 	pea 466a <__gedf2+0x3e>
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
    313a:	2f06           	movel %d6,%sp@-
    313c:	2f0d           	movel %a5,%sp@-
    313e:	2f07           	movel %d7,%sp@-
    3140:	2f0e           	movel %fp,%sp@-
    3142:	4eb9 0000 219c 	jsr 219c <_out_rev>
    3148:	2a40           	moveal %d0,%a5
    314a:	4fef 0020      	lea %sp@(32),%sp
    314e:	6000 fc36      	braw 2d86 <_vsnprintf+0x708>
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    3152:	4480           	negl %d0
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    3154:	2f00           	movel %d0,%sp@-
    3156:	6000 f8c6      	braw 2a1e <_vsnprintf+0x3a0>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
    315a:	7203           	moveq #3,%d1
    315c:	203c 0000 4662 	movel #18018,%d0
    3162:	2f05           	movel %d5,%sp@-
    3164:	2f0a           	movel %a2,%sp@-
    3166:	2f01           	movel %d1,%sp@-
    3168:	2f00           	movel %d0,%sp@-
    316a:	6000 fe3a      	braw 2fa6 <_vsnprintf+0x928>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    316e:	4880           	extw %d0
    3170:	48c0           	extl %d0
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    3172:	2f05           	movel %d5,%sp@-
    3174:	2f0a           	movel %a2,%sp@-
    3176:	2f0c           	movel %a4,%sp@-
    3178:	2f09           	movel %a1,%sp@-
    317a:	2200           	movel %d0,%d1
    317c:	d281           	addl %d1,%d1
    317e:	9381           	subxl %d1,%d1
    3180:	4481           	negl %d1
    3182:	2f01           	movel %d1,%sp@-
    3184:	4a80           	tstl %d0
    3186:	6c00 f894      	bgew 2a1c <_vsnprintf+0x39e>
    318a:	60c6           	bras 3152 <_vsnprintf+0xad4>
    value = 0 - value;
    318c:	2f7c 0000 35fa 	movel #13818,%sp@(74)
    3192:	004a 
    3194:	2f2f 0036      	movel %sp@(54),%sp@-
    3198:	2f2f 0036      	movel %sp@(54),%sp@-
    319c:	2f03           	movel %d3,%sp@-
    319e:	2f02           	movel %d2,%sp@-
    31a0:	226f 005a      	moveal %sp@(90),%a1
    31a4:	4e91           	jsr %a1@
    31a6:	4fef 0010      	lea %sp@(16),%sp
    31aa:	2400           	movel %d0,%d2
    31ac:	2601           	movel %d1,%d3
    31ae:	2f42 0032      	movel %d2,%sp@(50)
    31b2:	2f43 0036      	movel %d3,%sp@(54)
    negative = true;
    31b6:	1f7c 0001 0057 	moveb #1,%sp@(87)
    31bc:	6000 f9a0      	braw 2b5e <_vsnprintf+0x4e0>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    31c0:	2f05           	movel %d5,%sp@-
    31c2:	2f0a           	movel %a2,%sp@-
    31c4:	2f0c           	movel %a4,%sp@-
    31c6:	2f09           	movel %a1,%sp@-
    31c8:	42a7           	clrl %sp@-
    31ca:	2243           	moveal %d3,%a1
    31cc:	2f11           	movel %a1@,%sp@-
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    31ce:	2f06           	movel %d6,%sp@-
    31d0:	2f0d           	movel %a5,%sp@-
    31d2:	2f07           	movel %d7,%sp@-
    31d4:	2f0e           	movel %fp,%sp@-
    31d6:	4eb9 0000 2248 	jsr 2248 <_ntoa_long>
    31dc:	2a40           	moveal %d0,%a5
    31de:	4fef 0028      	lea %sp@(40),%sp
    31e2:	2602           	movel %d2,%d3
        break;
    31e4:	6000 f84e      	braw 2a34 <_vsnprintf+0x3b6>
          while (l++ < width) {
    31e8:	2a42           	moveal %d2,%a5
        break;
    31ea:	2604           	movel %d4,%d3
    31ec:	6000 fbf0      	braw 2dde <_vsnprintf+0x760>
    31f0:	49ef 0058      	lea %sp@(88),%a4
    31f4:	d9c8           	addal %a0,%a4
    31f6:	d1c4           	addal %d4,%a0
    31f8:	43e8 ffe0      	lea %a0@(-32),%a1
    31fc:	2f45 0032      	movel %d5,%sp@(50)
    3200:	2f4a 0042      	movel %a2,%sp@(66)
    3204:	2448           	moveal %a0,%a2
    3206:	2f42 004e      	movel %d2,%sp@(78)
    320a:	2409           	movel %a1,%d2
    320c:	2f4b 004a      	movel %a3,%sp@(74)
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
    3210:	b882           	cmpl %d2,%d4
    3212:	6700 0092      	beqw 32a6 <_vsnprintf+0xc28>
      --count;
    3216:	2a04           	movel %d4,%d5
    3218:	5385           	subql #1,%d5
      buf[len++] = (char)(48U + (frac % 10U));
    321a:	264a           	moveal %a2,%a3
    321c:	97c5           	subal %d5,%a3
    321e:	4878 000a      	pea a <DUART_IMR>
    3222:	2f03           	movel %d3,%sp@-
    3224:	4eb9 0000 3540 	jsr 3540 <__umodsi3>
    322a:	508f           	addql #8,%sp
    322c:	0600 0030      	addib #48,%d0
    3230:	18c0           	moveb %d0,%a4@+
      if (!(frac /= 10U)) {
    3232:	4878 000a      	pea a <DUART_IMR>
    3236:	2f03           	movel %d3,%sp@-
    3238:	4eb9 0000 34b4 	jsr 34b4 <__udivsi3>
    323e:	508f           	addql #8,%sp
    3240:	7209           	moveq #9,%d1
    3242:	b283           	cmpl %d3,%d1
    3244:	6400 00ca      	bccw 3310 <_vsnprintf+0xc92>
      --count;
    3248:	2805           	movel %d5,%d4
      if (!(frac /= 10U)) {
    324a:	2600           	movel %d0,%d3
    324c:	60c2           	bras 3210 <_vsnprintf+0xb92>
  else if (diff < 0.5) {
    324e:	42a7           	clrl %sp@-
    3250:	2f3c 3fe0 0000 	movel #1071644672,%sp@-
    3256:	2f2f 004e      	movel %sp@(78),%sp@-
    325a:	2f2f 004e      	movel %sp@(78),%sp@-
    325e:	2f48 003e      	movel %a0,%sp@(62)
    3262:	4eb9 0000 4020 	jsr 4020 <__ltdf2>
    3268:	4fef 0010      	lea %sp@(16),%sp
    326c:	206f 002e      	moveal %sp@(46),%a0
    3270:	4a80           	tstl %d0
    3272:	6d00 fa04      	bltw 2c78 <_vsnprintf+0x5fa>
  else if ((frac == 0U) || (frac & 1U)) {
    3276:	4a83           	tstl %d3
    3278:	6708           	beqs 3282 <_vsnprintf+0xc04>
    327a:	0803 0000      	btst #0,%d3
    327e:	6700 f9f8      	beqw 2c78 <_vsnprintf+0x5fa>
    ++frac;
    3282:	5283           	addql #1,%d3
    3284:	6000 f9f2      	braw 2c78 <_vsnprintf+0x5fa>
    3288:	2043           	moveal %d3,%a0
    328a:	2010           	movel %a0@,%d0
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
    328c:	4a05           	tstb %d5
    328e:	6a00 fcd0      	bplw 2f60 <_vsnprintf+0x8e2>
    3292:	0280 0000 ffff 	andil #65535,%d0
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    3298:	2f05           	movel %d5,%sp@-
    329a:	2f0a           	movel %a2,%sp@-
    329c:	2f0c           	movel %a4,%sp@-
    329e:	2f09           	movel %a1,%sp@-
    32a0:	42a7           	clrl %sp@-
    32a2:	6000 fcc6      	braw 2f6a <_vsnprintf+0x8ec>
    32a6:	2a2f 0032      	movel %sp@(50),%d5
    32aa:	246f 0042      	moveal %sp@(66),%a2
    32ae:	266f 004a      	moveal %sp@(74),%a3
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
    32b2:	7003           	moveq #3,%d0
    32b4:	c085           	andl %d5,%d0
    32b6:	5380           	subql #1,%d0
    32b8:	661e           	bnes 32d8 <_vsnprintf+0xc5a>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
    32ba:	b4fc 0000      	cmpaw #0,%a2
    32be:	6718           	beqs 32d8 <_vsnprintf+0xc5a>
    32c0:	4a2f 0057      	tstb %sp@(87)
    32c4:	6600 0106      	bnew 33cc <_vsnprintf+0xd4e>
    32c8:	700c           	moveq #12,%d0
    32ca:	c085           	andl %d5,%d0
    32cc:	670a           	beqs 32d8 <_vsnprintf+0xc5a>
      width--;
    32ce:	538a           	subql #1,%a2
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    32d0:	7020           	moveq #32,%d0
    32d2:	b08a           	cmpl %a2,%d0
    32d4:	6500 fa92      	bcsw 2d68 <_vsnprintf+0x6ea>
    32d8:	7020           	moveq #32,%d0
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
    32da:	2f05           	movel %d5,%sp@-
    32dc:	2f0a           	movel %a2,%sp@-
    32de:	2f00           	movel %d0,%sp@-
    32e0:	486f 0064      	pea %sp@(100)
    32e4:	6000 fa8c      	braw 2d72 <_vsnprintf+0x6f4>
    else if (flags & FLAGS_PLUS) {
    32e8:	0805 0002      	btst #2,%d5
    32ec:	6700 00c0      	beqw 33ae <_vsnprintf+0xd30>
      buf[len++] = '+';  // ignore the space if the '+' exists
    32f0:	5280           	addql #1,%d0
    32f2:	1fbc 002b 2858 	moveb #43,%sp@(0000000000000058,%d2:l)
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
    32f8:	2f05           	movel %d5,%sp@-
    32fa:	2f0a           	movel %a2,%sp@-
    32fc:	2f00           	movel %d0,%sp@-
    32fe:	486f 0064      	pea %sp@(100)
    3302:	6000 fa6e      	braw 2d72 <_vsnprintf+0x6f4>
    3306:	2a2f 0032      	movel %sp@(50),%d5
    330a:	2c2f 0042      	movel %sp@(66),%d6
    330e:	60a2           	bras 32b2 <_vsnprintf+0xc34>
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    3310:	224b           	moveal %a3,%a1
    3312:	246f 0042      	moveal %sp@(66),%a2
    3316:	242f 004e      	movel %sp@(78),%d2
    331a:	2205           	movel %d5,%d1
    331c:	2a2f 0032      	movel %sp@(50),%d5
    3320:	266f 004a      	moveal %sp@(74),%a3
    3324:	7020           	moveq #32,%d0
    3326:	b089           	cmpl %a1,%d0
    3328:	6788           	beqs 32b2 <_vsnprintf+0xc34>
    332a:	2009           	movel %a1,%d0
    332c:	4a81           	tstl %d1
    332e:	6722           	beqs 3352 <_vsnprintf+0xcd4>
    3330:	49ef 0058      	lea %sp@(88),%a4
    3334:	d9c9           	addal %a1,%a4
      buf[len++] = '0';
    3336:	5280           	addql #1,%d0
    3338:	18fc 0030      	moveb #48,%a4@+
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    333c:	7220           	moveq #32,%d1
    333e:	b280           	cmpl %d0,%d1
    3340:	6700 ff70      	beqw 32b2 <_vsnprintf+0xc34>
    3344:	2204           	movel %d4,%d1
    3346:	9280           	subl %d0,%d1
    3348:	41f1 18ff      	lea %a1@(ffffffffffffffff,%d1:l),%a0
    334c:	b0fc 0000      	cmpaw #0,%a0
    3350:	66e4           	bnes 3336 <_vsnprintf+0xcb8>
      buf[len++] = '.';
    3352:	2040           	moveal %d0,%a0
    3354:	5288           	addql #1,%a0
    3356:	1fbc 002e 0858 	moveb #46,%sp@(0000000000000058,%d0:l)
    335c:	49ef 0058      	lea %sp@(88),%a4
    3360:	d9c8           	addal %a0,%a4
    3362:	7658           	moveq #88,%d3
    3364:	d68f           	addl %sp,%d3
    3366:	7020           	moveq #32,%d0
    3368:	d680           	addl %d0,%d3
    if (!(whole /= 10)) {
    336a:	283c 0000 3510 	movel #13584,%d4
    3370:	2f45 0032      	movel %d5,%sp@(50)
    3374:	2f46 0042      	movel %d6,%sp@(66)
    3378:	2c02           	movel %d2,%d6
    337a:	2a2f 003e      	movel %sp@(62),%d5
    337e:	6000 f98e      	braw 2d0e <_vsnprintf+0x690>
          while (l++ < width) {
    3382:	244d           	moveal %a5,%a2
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    3384:	4bea 0001      	lea %a2@(1),%a5
    3388:	2f06           	movel %d6,%sp@-
    338a:	2f0a           	movel %a2,%sp@-
    338c:	2f07           	movel %d7,%sp@-
    338e:	2043           	moveal %d3,%a0
    3390:	2010           	movel %a0@,%d0
    3392:	4880           	extw %d0
    3394:	3240           	moveaw %d0,%a1
    3396:	2f09           	movel %a1,%sp@-
    3398:	4e96           	jsr %fp@
    339a:	4fef 0010      	lea %sp@(16),%sp
    339e:	6000 fd44      	braw 30e4 <_vsnprintf+0xa66>
          while (l++ < width) {
    33a2:	2400           	movel %d0,%d2
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    33a4:	1001           	moveb %d1,%d0
    33a6:	6600 fcee      	bnew 3096 <_vsnprintf+0xa18>
    33aa:	6000 fc56      	braw 3002 <_vsnprintf+0x984>
    else if (flags & FLAGS_SPACE) {
    33ae:	0805 0003      	btst #3,%d5
    33b2:	6700 f9b4      	beqw 2d68 <_vsnprintf+0x6ea>
      buf[len++] = ' ';
    33b6:	5280           	addql #1,%d0
    33b8:	1fbc 0020 2858 	moveb #32,%sp@(0000000000000058,%d2:l)
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
    33be:	2f05           	movel %d5,%sp@-
    33c0:	2f0a           	movel %a2,%sp@-
    33c2:	2f00           	movel %d0,%sp@-
    33c4:	486f 0064      	pea %sp@(100)
    33c8:	6000 f9a8      	braw 2d72 <_vsnprintf+0x6f4>
      width--;
    33cc:	538a           	subql #1,%a2
    33ce:	7020           	moveq #32,%d0
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
    33d0:	2f05           	movel %d5,%sp@-
    33d2:	2f0a           	movel %a2,%sp@-
    33d4:	2f00           	movel %d0,%sp@-
    33d6:	486f 0064      	pea %sp@(100)
    33da:	6000 f996      	braw 2d72 <_vsnprintf+0x6f4>
    switch (*format) {
    33de:	220b           	movel %a3,%d1
    33e0:	6000 f3b2      	braw 2794 <_vsnprintf+0x116>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
    33e4:	b4fc 0000      	cmpaw #0,%a2
    33e8:	6700 f964      	beqw 2d4e <_vsnprintf+0x6d0>
    33ec:	4a2f 0057      	tstb %sp@(87)
    33f0:	663a           	bnes 342c <_vsnprintf+0xdae>
    33f2:	700c           	moveq #12,%d0
    33f4:	c085           	andl %d5,%d0
    33f6:	6634           	bnes 342c <_vsnprintf+0xdae>
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    33f8:	b5c2           	cmpal %d2,%a2
    33fa:	6300 f952      	blsw 2d4e <_vsnprintf+0x6d0>
    33fe:	7820           	moveq #32,%d4
    3400:	b882           	cmpl %d2,%d4
    3402:	6700 fed4      	beqw 32d8 <_vsnprintf+0xc5a>
    3406:	43ef 0058      	lea %sp@(88),%a1
    340a:	d3c2           	addal %d2,%a1
    340c:	2002           	movel %d2,%d0
      buf[len++] = '0';
    340e:	5280           	addql #1,%d0
    3410:	12fc 0030      	moveb #48,%a1@+
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    3414:	b5c0           	cmpal %d0,%a2
    3416:	6718           	beqs 3430 <_vsnprintf+0xdb2>
    3418:	7220           	moveq #32,%d1
    341a:	b280           	cmpl %d0,%d1
    341c:	66f0           	bnes 340e <_vsnprintf+0xd90>
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
    341e:	2f05           	movel %d5,%sp@-
    3420:	2f0a           	movel %a2,%sp@-
    3422:	2f00           	movel %d0,%sp@-
    3424:	486f 0064      	pea %sp@(100)
    3428:	6000 f948      	braw 2d72 <_vsnprintf+0x6f4>
      width--;
    342c:	538a           	subql #1,%a2
    342e:	60c8           	bras 33f8 <_vsnprintf+0xd7a>
    3430:	240a           	movel %a2,%d2
    3432:	6000 f91a      	braw 2d4e <_vsnprintf+0x6d0>

00003436 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
    3436:	4e56 fffc      	linkw %fp,#-4
  va_list va;
  va_start(va, format);
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    343a:	486e 000c      	pea %fp@(12)
    343e:	2f2e 0008      	movel %fp@(8),%sp@-
    3442:	4878 ffff      	pea ffffffff <LESS+0x0>
    3446:	486e ffff      	pea %fp@(-1)
    344a:	4879 0000 2666 	pea 2666 <_out_char>
    3450:	4eb9 0000 267e 	jsr 267e <_vsnprintf>
  va_end(va);
  return ret;
    3456:	4fef 0014      	lea %sp@(20),%sp
}
    345a:	4e5e           	unlk %fp
    345c:	4e75           	rts

0000345e <_putchar>:
static char crbuf[2] = { '\r', 0 };

/*
 * This is used by printf.
 */
void _putchar(char chr) {
    345e:	2f02           	movel %d2,%sp@-
    3460:	242f 0008      	movel %sp@(8),%d2
  if (chr == '\n') {
    3464:	0c02 000a      	cmpib #10,%d2
    3468:	6714           	beqs 347e <_putchar+0x20>
    // is LF, print CR too
    mcPrint(crbuf);
  }

  buf[0] = chr;
    346a:	41f9 0000 7ee6 	lea 7ee6 <buf>,%a0
    3470:	1082           	moveb %d2,%a0@
  mcPrint(buf);
    3472:	2f48 0008      	movel %a0,%sp@(8)
}
    3476:	241f           	movel %sp@+,%d2
  mcPrint(buf);
    3478:	4ef9 0000 34a0 	jmp 34a0 <mcPrint>
    mcPrint(crbuf);
    347e:	4879 0000 46c4 	pea 46c4 <crbuf>
    3484:	4eb9 0000 34a0 	jsr 34a0 <mcPrint>
    348a:	588f           	addql #4,%sp
  buf[0] = chr;
    348c:	41f9 0000 7ee6 	lea 7ee6 <buf>,%a0
    3492:	1082           	moveb %d2,%a0@
  mcPrint(buf);
    3494:	2f48 0008      	movel %a0,%sp@(8)
}
    3498:	241f           	movel %sp@+,%d2
  mcPrint(buf);
    349a:	4ef9 0000 34a0 	jmp 34a0 <mcPrint>

000034a0 <mcPrint>:
    34a0:	48e7 c080      	moveml %d0-%d1/%a0,%sp@-
    34a4:	206f 0010      	moveal %sp@(16),%a0
    34a8:	7200           	moveq #0,%d1
    34aa:	4e4e           	trap #14
    34ac:	4cdf 0103      	moveml %sp@+,%d0-%d1/%a0
    34b0:	4e75           	rts
	...

000034b4 <__udivsi3>:
    34b4:	2f02           	movel %d2,%sp@-
    34b6:	222f 000c      	movel %sp@(12),%d1
    34ba:	202f 0008      	movel %sp@(8),%d0
    34be:	0c81 0001 0000 	cmpil #65536,%d1
    34c4:	6416           	bccs 34dc <L3>
    34c6:	2400           	movel %d0,%d2
    34c8:	4242           	clrw %d2
    34ca:	4842           	swap %d2
    34cc:	84c1           	divuw %d1,%d2
    34ce:	3002           	movew %d2,%d0
    34d0:	4840           	swap %d0
    34d2:	342f 000a      	movew %sp@(10),%d2
    34d6:	84c1           	divuw %d1,%d2
    34d8:	3002           	movew %d2,%d0
    34da:	6030           	bras 350c <L6>

000034dc <L3>:
    34dc:	2401           	movel %d1,%d2

000034de <L4>:
    34de:	e289           	lsrl #1,%d1
    34e0:	e288           	lsrl #1,%d0
    34e2:	0c81 0001 0000 	cmpil #65536,%d1
    34e8:	64f4           	bccs 34de <L4>
    34ea:	80c1           	divuw %d1,%d0
    34ec:	0280 0000 ffff 	andil #65535,%d0
    34f2:	2202           	movel %d2,%d1
    34f4:	c2c0           	muluw %d0,%d1
    34f6:	4842           	swap %d2
    34f8:	c4c0           	muluw %d0,%d2
    34fa:	4842           	swap %d2
    34fc:	4a42           	tstw %d2
    34fe:	660a           	bnes 350a <L5>
    3500:	d282           	addl %d2,%d1
    3502:	6506           	bcss 350a <L5>
    3504:	b2af 0008      	cmpl %sp@(8),%d1
    3508:	6302           	blss 350c <L6>

0000350a <L5>:
    350a:	5380           	subql #1,%d0

0000350c <L6>:
    350c:	241f           	movel %sp@+,%d2
    350e:	4e75           	rts

00003510 <__divsi3>:
    3510:	2f02           	movel %d2,%sp@-
    3512:	7401           	moveq #1,%d2
    3514:	222f 000c      	movel %sp@(12),%d1
    3518:	6a04           	bpls 351e <L1>
    351a:	4481           	negl %d1
    351c:	4402           	negb %d2

0000351e <L1>:
    351e:	202f 0008      	movel %sp@(8),%d0
    3522:	6a04           	bpls 3528 <L2>
    3524:	4480           	negl %d0
    3526:	4402           	negb %d2

00003528 <L2>:
    3528:	2f01           	movel %d1,%sp@-
    352a:	2f00           	movel %d0,%sp@-
    352c:	4eb9 0000 34b4 	jsr 34b4 <__udivsi3>
    3532:	508f           	addql #8,%sp
    3534:	4a02           	tstb %d2
    3536:	6a02           	bpls 353a <L3>
    3538:	4480           	negl %d0

0000353a <L3>:
    353a:	241f           	movel %sp@+,%d2
    353c:	4e75           	rts
	...

00003540 <__umodsi3>:
    3540:	222f 0008      	movel %sp@(8),%d1
    3544:	202f 0004      	movel %sp@(4),%d0
    3548:	2f01           	movel %d1,%sp@-
    354a:	2f00           	movel %d0,%sp@-
    354c:	4eb9 0000 34b4 	jsr 34b4 <__udivsi3>
    3552:	508f           	addql #8,%sp
    3554:	222f 0008      	movel %sp@(8),%d1
    3558:	2f01           	movel %d1,%sp@-
    355a:	2f00           	movel %d0,%sp@-
    355c:	4eb9 0000 4608 	jsr 4608 <__mulsi3>
    3562:	508f           	addql #8,%sp
    3564:	222f 0004      	movel %sp@(4),%d1
    3568:	9280           	subl %d0,%d1
    356a:	2001           	movel %d1,%d0
    356c:	4e75           	rts
	...

00003570 <__modsi3>:
    3570:	222f 0008      	movel %sp@(8),%d1
    3574:	202f 0004      	movel %sp@(4),%d0
    3578:	2f01           	movel %d1,%sp@-
    357a:	2f00           	movel %d0,%sp@-
    357c:	4eb9 0000 3510 	jsr 3510 <__divsi3>
    3582:	508f           	addql #8,%sp
    3584:	222f 0008      	movel %sp@(8),%d1
    3588:	2f01           	movel %d1,%sp@-
    358a:	2f00           	movel %d0,%sp@-
    358c:	4eb9 0000 4608 	jsr 4608 <__mulsi3>
    3592:	508f           	addql #8,%sp
    3594:	222f 0004      	movel %sp@(4),%d1
    3598:	9280           	subl %d0,%d1
    359a:	2001           	movel %d1,%d0
    359c:	4e75           	rts
	...

000035a0 <Ld$den>:
    35a0:	8087           	orl %d7,%d0
    35a2:	3e3c 0003      	movew #3,%d7
    35a6:	7c02           	moveq #2,%d6
    35a8:	4ef9 0000 3f7a 	jmp 3f7a <$_exception_handler>

000035ae <Ld$infty>:
    35ae:	203c 7ff0 0000 	movel #2146435072,%d0
    35b4:	7200           	moveq #0,%d1
    35b6:	8087           	orl %d7,%d0
    35b8:	3e3c 0005      	movew #5,%d7
    35bc:	7c02           	moveq #2,%d6
    35be:	4ef9 0000 3f7a 	jmp 3f7a <$_exception_handler>

000035c4 <Ld$underflow>:
    35c4:	7000           	moveq #0,%d0
    35c6:	2200           	movel %d0,%d1
    35c8:	3e3c 0003      	movew #3,%d7
    35cc:	7c02           	moveq #2,%d6
    35ce:	4ef9 0000 3f7a 	jmp 3f7a <$_exception_handler>

000035d4 <Ld$inop>:
    35d4:	70ff           	moveq #-1,%d0
    35d6:	2200           	movel %d0,%d1
    35d8:	3e3c 0011      	movew #17,%d7
    35dc:	7c02           	moveq #2,%d6
    35de:	4ef9 0000 3f7a 	jmp 3f7a <$_exception_handler>

000035e4 <Ld$div$0>:
    35e4:	203c 7ff0 0000 	movel #2146435072,%d0
    35ea:	7200           	moveq #0,%d1
    35ec:	8087           	orl %d7,%d0
    35ee:	3e3c 0009      	movew #9,%d7
    35f2:	7c02           	moveq #2,%d6
    35f4:	4ef9 0000 3f7a 	jmp 3f7a <$_exception_handler>

000035fa <__subdf3>:
    35fa:	086f 001f 000c 	bchg #31,%sp@(12)

00003600 <__adddf3>:
    3600:	4e56 0000      	linkw %fp,#0
    3604:	48e7 3f00      	moveml %d2-%d7,%sp@-
    3608:	202e 0008      	movel %fp@(8),%d0
    360c:	222e 000c      	movel %fp@(12),%d1
    3610:	242e 0010      	movel %fp@(16),%d2
    3614:	262e 0014      	movel %fp@(20),%d3
    3618:	2e00           	movel %d0,%d7
    361a:	d281           	addl %d1,%d1
    361c:	d180           	addxl %d0,%d0
    361e:	6700 0286      	beqw 38a6 <Ladddf$b>
    3622:	2c02           	movel %d2,%d6
    3624:	d683           	addl %d3,%d3
    3626:	d582           	addxl %d2,%d2
    3628:	6700 029a      	beqw 38c4 <Ladddf$a>
    362c:	0287 8000 0000 	andil #-2147483648,%d7
    3632:	4846           	swap %d6
    3634:	0246 8000      	andiw #-32768,%d6
    3638:	8e46           	orw %d6,%d7
    363a:	2047           	moveal %d7,%a0
    363c:	2c3c 001f ffff 	movel #2097151,%d6
    3642:	2e3c 0020 0000 	movel #2097152,%d7
    3648:	2800           	movel %d0,%d4
    364a:	c086           	andl %d6,%d0
    364c:	4686           	notl %d6
    364e:	c886           	andl %d6,%d4
    3650:	6700 0246      	beqw 3898 <Ladddf$a$den>
    3654:	b886           	cmpl %d6,%d4
    3656:	6700 02ca      	beqw 3922 <Ladddf$nf>
    365a:	8087           	orl %d7,%d0

0000365c <Ladddf$1>:
    365c:	4844           	swap %d4
    365e:	ea4c           	lsrw #5,%d4
    3660:	2a02           	movel %d2,%d5
    3662:	ca86           	andl %d6,%d5
    3664:	6700 0238      	beqw 389e <Ladddf$b$den>
    3668:	ba86           	cmpl %d6,%d5
    366a:	6700 02b6      	beqw 3922 <Ladddf$nf>
    366e:	4686           	notl %d6
    3670:	c486           	andl %d6,%d2
    3672:	8487           	orl %d7,%d2

00003674 <Ladddf$2>:
    3674:	4845           	swap %d5
    3676:	ea4d           	lsrw #5,%d5
    3678:	48e7 0030      	moveml %a2-%a3,%sp@-
    367c:	2444           	moveal %d4,%a2
    367e:	2645           	moveal %d5,%a3
    3680:	7e00           	moveq #0,%d7
    3682:	2c07           	movel %d7,%d6
    3684:	2a03           	movel %d3,%d5
    3686:	2802           	movel %d2,%d4
    3688:	2607           	movel %d7,%d3
    368a:	2407           	movel %d7,%d2
    368c:	c98a           	exg %d4,%a2
    368e:	cb8b           	exg %d5,%a3
    3690:	ba44           	cmpw %d4,%d5
    3692:	6700 00cc      	beqw 3760 <Ladddf$3>
    3696:	6200 0064      	bhiw 36fc <Ladddf$2+0x88>
    369a:	3404           	movew %d4,%d2
    369c:	9445           	subw %d5,%d2
    369e:	c98a           	exg %d4,%a2
    36a0:	cb8b           	exg %d5,%a3
    36a2:	0c42 0037      	cmpiw #55,%d2
    36a6:	6c00 01d2      	bgew 387a <Ladddf$b$small>
    36aa:	0c42 0020      	cmpiw #32,%d2
    36ae:	6c00 0022      	bgew 36d2 <Ladddf$2+0x5e>
    36b2:	0c42 0010      	cmpiw #16,%d2
    36b6:	6c00 002a      	bgew 36e2 <Ladddf$2+0x6e>
    36ba:	6000 000a      	braw 36c6 <Ladddf$2+0x52>
    36be:	e28c           	lsrl #1,%d4
    36c0:	e295           	roxrl #1,%d5
    36c2:	e296           	roxrl #1,%d6
    36c4:	e297           	roxrl #1,%d7
    36c6:	51ca fff6      	dbf %d2,36be <Ladddf$2+0x4a>
    36ca:	7400           	moveq #0,%d2
    36cc:	2602           	movel %d2,%d3
    36ce:	6000 0094      	braw 3764 <Ladddf$4>
    36d2:	2e06           	movel %d6,%d7
    36d4:	2c05           	movel %d5,%d6
    36d6:	2a04           	movel %d4,%d5
    36d8:	7800           	moveq #0,%d4
    36da:	0442 0020      	subiw #32,%d2
    36de:	6000 ffd2      	braw 36b2 <Ladddf$2+0x3e>
    36e2:	3e06           	movew %d6,%d7
    36e4:	4847           	swap %d7
    36e6:	3c05           	movew %d5,%d6
    36e8:	4846           	swap %d6
    36ea:	3a04           	movew %d4,%d5
    36ec:	4845           	swap %d5
    36ee:	383c 0000      	movew #0,%d4
    36f2:	4844           	swap %d4
    36f4:	0442 0010      	subiw #16,%d2
    36f8:	6000 ffcc      	braw 36c6 <Ladddf$2+0x52>
    36fc:	c945           	exg %d4,%d5
    36fe:	3c04           	movew %d4,%d6
    3700:	9c45           	subw %d5,%d6
    3702:	c98a           	exg %d4,%a2
    3704:	cb8b           	exg %d5,%a3
    3706:	0c46 0037      	cmpiw #55,%d6
    370a:	6c00 0150      	bgew 385c <Ladddf$a$small>
    370e:	0c46 0020      	cmpiw #32,%d6
    3712:	6c00 0022      	bgew 3736 <Ladddf$2+0xc2>
    3716:	0c46 0010      	cmpiw #16,%d6
    371a:	6c00 002a      	bgew 3746 <Ladddf$2+0xd2>
    371e:	6000 000a      	braw 372a <Ladddf$2+0xb6>
    3722:	e288           	lsrl #1,%d0
    3724:	e291           	roxrl #1,%d1
    3726:	e292           	roxrl #1,%d2
    3728:	e293           	roxrl #1,%d3
    372a:	51ce fff6      	dbf %d6,3722 <Ladddf$2+0xae>
    372e:	7e00           	moveq #0,%d7
    3730:	2c07           	movel %d7,%d6
    3732:	6000 0030      	braw 3764 <Ladddf$4>
    3736:	2602           	movel %d2,%d3
    3738:	2401           	movel %d1,%d2
    373a:	2200           	movel %d0,%d1
    373c:	7000           	moveq #0,%d0
    373e:	0446 0020      	subiw #32,%d6
    3742:	6000 ffd2      	braw 3716 <Ladddf$2+0xa2>
    3746:	3602           	movew %d2,%d3
    3748:	4843           	swap %d3
    374a:	3401           	movew %d1,%d2
    374c:	4842           	swap %d2
    374e:	3200           	movew %d0,%d1
    3750:	4841           	swap %d1
    3752:	303c 0000      	movew #0,%d0
    3756:	4840           	swap %d0
    3758:	0446 0010      	subiw #16,%d6
    375c:	6000 ffcc      	braw 372a <Ladddf$2+0xb6>

00003760 <Ladddf$3>:
    3760:	c98a           	exg %d4,%a2
    3762:	cb8b           	exg %d5,%a3

00003764 <Ladddf$4>:
    3764:	cf88           	exg %d7,%a0
    3766:	cd8b           	exg %d6,%a3
    3768:	2c07           	movel %d7,%d6
    376a:	3e3c 0000      	movew #0,%d7
    376e:	4846           	swap %d6
    3770:	3c3c 0000      	movew #0,%d6
    3774:	bf86           	eorl %d7,%d6
    3776:	6b00 006e      	bmiw 37e6 <Lsubdf$0>
    377a:	cf88           	exg %d7,%a0
    377c:	cd8b           	exg %d6,%a3
    377e:	d687           	addl %d7,%d3
    3780:	d586           	addxl %d6,%d2
    3782:	d385           	addxl %d5,%d1
    3784:	d184           	addxl %d4,%d0
    3786:	280a           	movel %a2,%d4
    3788:	2e08           	movel %a0,%d7
    378a:	0287 8000 0000 	andil #-2147483648,%d7
    3790:	4cdf 0c00      	moveml %sp@+,%a2-%a3
    3794:	0800 0036      	btst #54,%d0
    3798:	6700 000c      	beqw 37a6 <Ladddf$4+0x42>
    379c:	e288           	lsrl #1,%d0
    379e:	e291           	roxrl #1,%d1
    37a0:	e292           	roxrl #1,%d2
    37a2:	e293           	roxrl #1,%d3
    37a4:	5244           	addqw #1,%d4
    37a6:	41fa 0020      	lea %pc@(37c8 <Ladddf$5>),%a0
    37aa:	43f9 0000 46c8 	lea 46c8 <_fpCCR>,%a1
    37b0:	3c29 0006      	movew %a1@(6),%d6
    37b4:	6700 0750      	beqw 3f06 <Lround$to$nearest>
    37b8:	0c46 0002      	cmpiw #2,%d6
    37bc:	6200 07ac      	bhiw 3f6a <Lround$to$minus>
    37c0:	6d00 07a8      	bltw 3f6a <Lround$to$minus>
    37c4:	6000 07a4      	braw 3f6a <Lround$to$minus>

000037c8 <Ladddf$5>:
    37c8:	0c44 07ff      	cmpiw #2047,%d4
    37cc:	6c00 0012      	bgew 37e0 <Ladddf$5+0x18>
    37d0:	0880 0034      	bclr #52,%d0
    37d4:	e94c           	lslw #4,%d4
    37d6:	4840           	swap %d0
    37d8:	8044           	orw %d4,%d0
    37da:	4840           	swap %d0
    37dc:	6000 0128      	braw 3906 <Ladddf$ret>
    37e0:	7a01           	moveq #1,%d5
    37e2:	6000 fdca      	braw 35ae <Ld$infty>

000037e6 <Lsubdf$0>:
    37e6:	cf88           	exg %d7,%a0
    37e8:	cd8b           	exg %d6,%a3
    37ea:	9687           	subl %d7,%d3
    37ec:	9586           	subxl %d6,%d2
    37ee:	9385           	subxl %d5,%d1
    37f0:	9184           	subxl %d4,%d0
    37f2:	6700 010e      	beqw 3902 <Ladddf$ret$1>
    37f6:	6a00 0012      	bplw 380a <Lsubdf$0+0x24>
    37fa:	2e08           	movel %a0,%d7
    37fc:	0847 001f      	bchg #31,%d7
    3800:	2047           	moveal %d7,%a0
    3802:	4483           	negl %d3
    3804:	4082           	negxl %d2
    3806:	4081           	negxl %d1
    3808:	4080           	negxl %d0
    380a:	280a           	movel %a2,%d4
    380c:	2e08           	movel %a0,%d7
    380e:	0287 8000 0000 	andil #-2147483648,%d7
    3814:	4cdf 0c00      	moveml %sp@+,%a2-%a3
    3818:	0800 0036      	btst #54,%d0
    381c:	6700 000c      	beqw 382a <Lsubdf$0+0x44>
    3820:	e288           	lsrl #1,%d0
    3822:	e291           	roxrl #1,%d1
    3824:	e292           	roxrl #1,%d2
    3826:	e293           	roxrl #1,%d3
    3828:	5244           	addqw #1,%d4
    382a:	41fa 0020      	lea %pc@(384c <Lsubdf$1>),%a0
    382e:	43f9 0000 46c8 	lea 46c8 <_fpCCR>,%a1
    3834:	3c29 0006      	movew %a1@(6),%d6
    3838:	6700 06cc      	beqw 3f06 <Lround$to$nearest>
    383c:	0c46 0002      	cmpiw #2,%d6
    3840:	6200 0728      	bhiw 3f6a <Lround$to$minus>
    3844:	6d00 0724      	bltw 3f6a <Lround$to$minus>
    3848:	6000 0720      	braw 3f6a <Lround$to$minus>

0000384c <Lsubdf$1>:
    384c:	0880 0034      	bclr #52,%d0
    3850:	e94c           	lslw #4,%d4
    3852:	4840           	swap %d0
    3854:	8044           	orw %d4,%d0
    3856:	4840           	swap %d0
    3858:	6000 00ac      	braw 3906 <Ladddf$ret>

0000385c <Ladddf$a$small>:
    385c:	4cdf 0c00      	moveml %sp@+,%a2-%a3
    3860:	202e 0010      	movel %fp@(16),%d0
    3864:	222e 0014      	movel %fp@(20),%d1
    3868:	41f9 0000 46c8 	lea 46c8 <_fpCCR>,%a0
    386e:	30bc 0000      	movew #0,%a0@
    3872:	4cdf 00fc      	moveml %sp@+,%d2-%d7
    3876:	4e5e           	unlk %fp
    3878:	4e75           	rts

0000387a <Ladddf$b$small>:
    387a:	4cdf 0c00      	moveml %sp@+,%a2-%a3
    387e:	202e 0008      	movel %fp@(8),%d0
    3882:	222e 000c      	movel %fp@(12),%d1
    3886:	41f9 0000 46c8 	lea 46c8 <_fpCCR>,%a0
    388c:	30bc 0000      	movew #0,%a0@
    3890:	4cdf 00fc      	moveml %sp@+,%d2-%d7
    3894:	4e5e           	unlk %fp
    3896:	4e75           	rts

00003898 <Ladddf$a$den>:
    3898:	2807           	movel %d7,%d4
    389a:	6000 fdc0      	braw 365c <Ladddf$1>

0000389e <Ladddf$b$den>:
    389e:	2a07           	movel %d7,%d5
    38a0:	4686           	notl %d6
    38a2:	6000 fdd0      	braw 3674 <Ladddf$2>

000038a6 <Ladddf$b>:
    38a6:	2002           	movel %d2,%d0
    38a8:	2203           	movel %d3,%d1
    38aa:	6600 0020      	bnew 38cc <Ladddf$a+0x8>
    38ae:	0c80 8000 0000 	cmpil #-2147483648,%d0
    38b4:	6600 0016      	bnew 38cc <Ladddf$a+0x8>
    38b8:	0287 8000 0000 	andil #-2147483648,%d7
    38be:	4280           	clrl %d0
    38c0:	6000 0044      	braw 3906 <Ladddf$ret>

000038c4 <Ladddf$a>:
    38c4:	202e 0008      	movel %fp@(8),%d0
    38c8:	222e 000c      	movel %fp@(12),%d1
    38cc:	7a01           	moveq #1,%d5
    38ce:	2e00           	movel %d0,%d7
    38d0:	0287 8000 0000 	andil #-2147483648,%d7
    38d6:	0880 001f      	bclr #31,%d0
    38da:	0c80 7ff0 0000 	cmpil #2146435072,%d0
    38e0:	6c00 0010      	bgew 38f2 <Ladddf$a+0x2e>
    38e4:	2000           	movel %d0,%d0
    38e6:	6600 001e      	bnew 3906 <Ladddf$ret>
    38ea:	0887 001f      	bclr #31,%d7
    38ee:	6000 0016      	braw 3906 <Ladddf$ret>
    38f2:	0280 000f ffff 	andil #1048575,%d0
    38f8:	8081           	orl %d1,%d0
    38fa:	6600 fcd8      	bnew 35d4 <Ld$inop>
    38fe:	6000 fcae      	braw 35ae <Ld$infty>

00003902 <Ladddf$ret$1>:
    3902:	4cdf 0c00      	moveml %sp@+,%a2-%a3

00003906 <Ladddf$ret>:
    3906:	41f9 0000 46c8 	lea 46c8 <_fpCCR>,%a0
    390c:	30bc 0000      	movew #0,%a0@
    3910:	8087           	orl %d7,%d0
    3912:	4cdf 00fc      	moveml %sp@+,%d2-%d7
    3916:	4e5e           	unlk %fp
    3918:	4e75           	rts

0000391a <Ladddf$ret$den>:
    391a:	e288           	lsrl #1,%d0
    391c:	e291           	roxrl #1,%d1
    391e:	6000 ffe6      	braw 3906 <Ladddf$ret>

00003922 <Ladddf$nf>:
    3922:	7a01           	moveq #1,%d5
    3924:	202e 0008      	movel %fp@(8),%d0
    3928:	222e 000c      	movel %fp@(12),%d1
    392c:	242e 0010      	movel %fp@(16),%d2
    3930:	262e 0014      	movel %fp@(20),%d3
    3934:	283c 7ff0 0000 	movel #2146435072,%d4
    393a:	2e00           	movel %d0,%d7
    393c:	2c02           	movel %d2,%d6
    393e:	0880 001f      	bclr #31,%d0
    3942:	0882 001f      	bclr #31,%d2
    3946:	b084           	cmpl %d4,%d0
    3948:	6200 fc8a      	bhiw 35d4 <Ld$inop>
    394c:	6600 0008      	bnew 3956 <Ladddf$nf+0x34>
    3950:	4a81           	tstl %d1
    3952:	6600 fc80      	bnew 35d4 <Ld$inop>
    3956:	b484           	cmpl %d4,%d2
    3958:	6200 fc7a      	bhiw 35d4 <Ld$inop>
    395c:	6600 0008      	bnew 3966 <Ladddf$nf+0x44>
    3960:	4a83           	tstl %d3
    3962:	6600 fc70      	bnew 35d4 <Ld$inop>
    3966:	bf86           	eorl %d7,%d6
    3968:	6b00 000c      	bmiw 3976 <Ladddf$nf+0x54>
    396c:	0287 8000 0000 	andil #-2147483648,%d7
    3972:	6000 fc3a      	braw 35ae <Ld$infty>
    3976:	b082           	cmpl %d2,%d0
    3978:	6600 0008      	bnew 3982 <Ladddf$nf+0x60>
    397c:	b283           	cmpl %d3,%d1
    397e:	6700 fc54      	beqw 35d4 <Ld$inop>
    3982:	0287 8000 0000 	andil #-2147483648,%d7
    3988:	b084           	cmpl %d4,%d0
    398a:	6700 fc22      	beqw 35ae <Ld$infty>
    398e:	0847 001f      	bchg #31,%d7
    3992:	6000 fc1a      	braw 35ae <Ld$infty>

00003996 <__muldf3>:
    3996:	4e56 0000      	linkw %fp,#0
    399a:	48e7 3f00      	moveml %d2-%d7,%sp@-
    399e:	202e 0008      	movel %fp@(8),%d0
    39a2:	222e 000c      	movel %fp@(12),%d1
    39a6:	242e 0010      	movel %fp@(16),%d2
    39aa:	262e 0014      	movel %fp@(20),%d3
    39ae:	2e00           	movel %d0,%d7
    39b0:	b587           	eorl %d2,%d7
    39b2:	0287 8000 0000 	andil #-2147483648,%d7
    39b8:	2047           	moveal %d7,%a0
    39ba:	2e3c 7ff0 0000 	movel #2146435072,%d7
    39c0:	2c07           	movel %d7,%d6
    39c2:	4686           	notl %d6
    39c4:	0880 001f      	bclr #31,%d0
    39c8:	2800           	movel %d0,%d4
    39ca:	8881           	orl %d1,%d4
    39cc:	6700 0120      	beqw 3aee <Lmuldf$a$0>
    39d0:	2800           	movel %d0,%d4
    39d2:	0882 001f      	bclr #31,%d2
    39d6:	2a02           	movel %d2,%d5
    39d8:	8a83           	orl %d3,%d5
    39da:	6700 0106      	beqw 3ae2 <Lmuldf$b$0>
    39de:	2a02           	movel %d2,%d5
    39e0:	b087           	cmpl %d7,%d0
    39e2:	6200 00dc      	bhiw 3ac0 <Lmuldf$inop>
    39e6:	6700 00ec      	beqw 3ad4 <Lmuldf$a$nf>
    39ea:	b487           	cmpl %d7,%d2
    39ec:	6200 00d2      	bhiw 3ac0 <Lmuldf$inop>
    39f0:	6700 00d4      	beqw 3ac6 <Lmuldf$b$nf>
    39f4:	c887           	andl %d7,%d4
    39f6:	6700 0120      	beqw 3b18 <Lmuldf$a$den>
    39fa:	c086           	andl %d6,%d0
    39fc:	0080 0010 0000 	oril #1048576,%d0
    3a02:	4844           	swap %d4
    3a04:	e84c           	lsrw #4,%d4

00003a06 <Lmuldf$1>:
    3a06:	ca87           	andl %d7,%d5
    3a08:	6700 0124      	beqw 3b2e <Lmuldf$b$den>
    3a0c:	c486           	andl %d6,%d2
    3a0e:	0082 0010 0000 	oril #1048576,%d2
    3a14:	4845           	swap %d5
    3a16:	e84d           	lsrw #4,%d5

00003a18 <Lmuldf$2>:
    3a18:	d845           	addw %d5,%d4
    3a1a:	0444 03ff      	subiw #1023,%d4
    3a1e:	48e7 0030      	moveml %a2-%a3,%sp@-
    3a22:	247c 0000 0000 	moveal #0,%a2
    3a28:	2644           	moveal %d4,%a3
    3a2a:	ea9a           	rorl #5,%d2
    3a2c:	4842           	swap %d2
    3a2e:	ea9b           	rorl #5,%d3
    3a30:	4843           	swap %d3
    3a32:	3c03           	movew %d3,%d6
    3a34:	0246 07ff      	andiw #2047,%d6
    3a38:	8446           	orw %d6,%d2
    3a3a:	0243 f800      	andiw #-2048,%d3
    3a3e:	2c02           	movel %d2,%d6
    3a40:	2e03           	movel %d3,%d7
    3a42:	2800           	movel %d0,%d4
    3a44:	2a01           	movel %d1,%d5
    3a46:	7600           	moveq #0,%d3
    3a48:	2403           	movel %d3,%d2
    3a4a:	2203           	movel %d3,%d1
    3a4c:	2003           	movel %d3,%d0
    3a4e:	227c 0000 0034 	moveal #52,%a1
    3a54:	cf89           	exg %d7,%a1
    3a56:	cf89           	exg %d7,%a1
    3a58:	d683           	addl %d3,%d3
    3a5a:	d582           	addxl %d2,%d2
    3a5c:	d381           	addxl %d1,%d1
    3a5e:	d180           	addxl %d0,%d0
    3a60:	de87           	addl %d7,%d7
    3a62:	dd86           	addxl %d6,%d6
    3a64:	6400 000e      	bccw 3a74 <Lmuldf$2+0x5c>
    3a68:	cf8a           	exg %d7,%a2
    3a6a:	d685           	addl %d5,%d3
    3a6c:	d584           	addxl %d4,%d2
    3a6e:	d387           	addxl %d7,%d1
    3a70:	d187           	addxl %d7,%d0
    3a72:	cf8a           	exg %d7,%a2
    3a74:	cf89           	exg %d7,%a1
    3a76:	51cf ffde      	dbf %d7,3a56 <Lmuldf$2+0x3e>
    3a7a:	280b           	movel %a3,%d4
    3a7c:	4cdf 0c00      	moveml %sp@+,%a2-%a3
    3a80:	4840           	swap %d0
    3a82:	4841           	swap %d1
    3a84:	3001           	movew %d1,%d0
    3a86:	4842           	swap %d2
    3a88:	3202           	movew %d2,%d1
    3a8a:	4843           	swap %d3
    3a8c:	3403           	movew %d3,%d2
    3a8e:	363c 0000      	movew #0,%d3
    3a92:	e288           	lsrl #1,%d0
    3a94:	e291           	roxrl #1,%d1
    3a96:	e292           	roxrl #1,%d2
    3a98:	e293           	roxrl #1,%d3
    3a9a:	e288           	lsrl #1,%d0
    3a9c:	e291           	roxrl #1,%d1
    3a9e:	e292           	roxrl #1,%d2
    3aa0:	e293           	roxrl #1,%d3
    3aa2:	e288           	lsrl #1,%d0
    3aa4:	e291           	roxrl #1,%d1
    3aa6:	e292           	roxrl #1,%d2
    3aa8:	e293           	roxrl #1,%d3
    3aaa:	2e08           	movel %a0,%d7
    3aac:	7a02           	moveq #2,%d5
    3aae:	0800 0016      	btst #22,%d0
    3ab2:	6700 027a      	beqw 3d2e <Lround$exit>
    3ab6:	e288           	lsrl #1,%d0
    3ab8:	e291           	roxrl #1,%d1
    3aba:	5244           	addqw #1,%d4
    3abc:	6000 0270      	braw 3d2e <Lround$exit>

00003ac0 <Lmuldf$inop>:
    3ac0:	7a02           	moveq #2,%d5
    3ac2:	6000 fb10      	braw 35d4 <Ld$inop>

00003ac6 <Lmuldf$b$nf>:
    3ac6:	7a02           	moveq #2,%d5
    3ac8:	2e08           	movel %a0,%d7
    3aca:	4a83           	tstl %d3
    3acc:	6600 fb06      	bnew 35d4 <Ld$inop>
    3ad0:	6000 fadc      	braw 35ae <Ld$infty>

00003ad4 <Lmuldf$a$nf>:
    3ad4:	7a02           	moveq #2,%d5
    3ad6:	2e08           	movel %a0,%d7
    3ad8:	4a81           	tstl %d1
    3ada:	6600 faf8      	bnew 35d4 <Ld$inop>
    3ade:	6000 face      	braw 35ae <Ld$infty>

00003ae2 <Lmuldf$b$0>:
    3ae2:	7a02           	moveq #2,%d5
    3ae4:	c540           	exg %d2,%d0
    3ae6:	c741           	exg %d3,%d1
    3ae8:	2008           	movel %a0,%d0
    3aea:	6000 0010      	braw 3afc <Lmuldf$a$0+0xe>

00003aee <Lmuldf$a$0>:
    3aee:	2008           	movel %a0,%d0
    3af0:	242e 0010      	movel %fp@(16),%d2
    3af4:	262e 0014      	movel %fp@(20),%d3
    3af8:	0882 001f      	bclr #31,%d2
    3afc:	0c82 7ff0 0000 	cmpil #2146435072,%d2
    3b02:	6c00 fad0      	bgew 35d4 <Ld$inop>
    3b06:	41f9 0000 46c8 	lea 46c8 <_fpCCR>,%a0
    3b0c:	30bc 0000      	movew #0,%a0@
    3b10:	4cdf 00fc      	moveml %sp@+,%d2-%d7
    3b14:	4e5e           	unlk %fp
    3b16:	4e75           	rts

00003b18 <Lmuldf$a$den>:
    3b18:	7801           	moveq #1,%d4
    3b1a:	c086           	andl %d6,%d0
    3b1c:	d281           	addl %d1,%d1
    3b1e:	d180           	addxl %d0,%d0
    3b20:	5344           	subqw #1,%d4
    3b22:	0800 0014      	btst #20,%d0
    3b26:	6600 fede      	bnew 3a06 <Lmuldf$1>
    3b2a:	6000 fff0      	braw 3b1c <Lmuldf$a$den+0x4>

00003b2e <Lmuldf$b$den>:
    3b2e:	7a01           	moveq #1,%d5
    3b30:	c486           	andl %d6,%d2
    3b32:	d683           	addl %d3,%d3
    3b34:	d582           	addxl %d2,%d2
    3b36:	5345           	subqw #1,%d5
    3b38:	0802 0014      	btst #20,%d2
    3b3c:	6600 feda      	bnew 3a18 <Lmuldf$2>
    3b40:	6000 fff0      	braw 3b32 <Lmuldf$b$den+0x4>

00003b44 <__divdf3>:
    3b44:	4e56 0000      	linkw %fp,#0
    3b48:	48e7 3f00      	moveml %d2-%d7,%sp@-
    3b4c:	202e 0008      	movel %fp@(8),%d0
    3b50:	222e 000c      	movel %fp@(12),%d1
    3b54:	242e 0010      	movel %fp@(16),%d2
    3b58:	262e 0014      	movel %fp@(20),%d3
    3b5c:	2e00           	movel %d0,%d7
    3b5e:	b587           	eorl %d2,%d7
    3b60:	0287 8000 0000 	andil #-2147483648,%d7
    3b66:	2047           	moveal %d7,%a0
    3b68:	2e3c 7ff0 0000 	movel #2146435072,%d7
    3b6e:	2c07           	movel %d7,%d6
    3b70:	4686           	notl %d6
    3b72:	0880 001f      	bclr #31,%d0
    3b76:	2800           	movel %d0,%d4
    3b78:	8881           	orl %d1,%d4
    3b7a:	6700 0112      	beqw 3c8e <Ldivdf$a$0>
    3b7e:	2800           	movel %d0,%d4
    3b80:	0882 001f      	bclr #31,%d2
    3b84:	2a02           	movel %d2,%d5
    3b86:	8a83           	orl %d3,%d5
    3b88:	6700 013c      	beqw 3cc6 <Ldivdf$b$0>
    3b8c:	2a02           	movel %d2,%d5
    3b8e:	b087           	cmpl %d7,%d0
    3b90:	6200 00f6      	bhiw 3c88 <Ldivdf$inop>
    3b94:	6700 0154      	beqw 3cea <Ldivdf$a$nf>
    3b98:	b487           	cmpl %d7,%d2
    3b9a:	6200 00ec      	bhiw 3c88 <Ldivdf$inop>
    3b9e:	6700 013e      	beqw 3cde <Ldivdf$b$nf>
    3ba2:	c887           	andl %d7,%d4
    3ba4:	6700 015c      	beqw 3d02 <Ldivdf$a$den>
    3ba8:	c086           	andl %d6,%d0
    3baa:	0080 0010 0000 	oril #1048576,%d0
    3bb0:	4844           	swap %d4
    3bb2:	e84c           	lsrw #4,%d4

00003bb4 <Ldivdf$1>:
    3bb4:	ca87           	andl %d7,%d5
    3bb6:	6700 0160      	beqw 3d18 <Ldivdf$b$den>
    3bba:	c486           	andl %d6,%d2
    3bbc:	0082 0010 0000 	oril #1048576,%d2
    3bc2:	4845           	swap %d5
    3bc4:	e84d           	lsrw #4,%d5

00003bc6 <Ldivdf$2>:
    3bc6:	9845           	subw %d5,%d4
    3bc8:	0644 03fe      	addiw #1022,%d4
    3bcc:	7c00           	moveq #0,%d6
    3bce:	2e06           	movel %d6,%d7
    3bd0:	227c 0000 0000 	moveal #0,%a1
    3bd6:	7a16           	moveq #22,%d5
    3bd8:	b480           	cmpl %d0,%d2
    3bda:	6200 000c      	bhiw 3be8 <Ldivdf$2+0x22>
    3bde:	6700 0014      	beqw 3bf4 <Ldivdf$2+0x2e>
    3be2:	9283           	subl %d3,%d1
    3be4:	9182           	subxl %d2,%d0
    3be6:	0bc6           	bset %d5,%d6
    3be8:	d281           	addl %d1,%d1
    3bea:	d180           	addxl %d0,%d0
    3bec:	51cd ffea      	dbf %d5,3bd8 <Ldivdf$2+0x12>
    3bf0:	6000 000c      	braw 3bfe <Ldivdf$2+0x38>
    3bf4:	b681           	cmpl %d1,%d3
    3bf6:	6200 fff0      	bhiw 3be8 <Ldivdf$2+0x22>
    3bfa:	6000 ffe6      	braw 3be2 <Ldivdf$2+0x1c>
    3bfe:	7a1f           	moveq #31,%d5
    3c00:	b480           	cmpl %d0,%d2
    3c02:	6200 000c      	bhiw 3c10 <Ldivdf$2+0x4a>
    3c06:	6700 0014      	beqw 3c1c <Ldivdf$2+0x56>
    3c0a:	9283           	subl %d3,%d1
    3c0c:	9182           	subxl %d2,%d0
    3c0e:	0bc7           	bset %d5,%d7
    3c10:	d281           	addl %d1,%d1
    3c12:	d180           	addxl %d0,%d0
    3c14:	51cd ffea      	dbf %d5,3c00 <Ldivdf$2+0x3a>
    3c18:	6000 000c      	braw 3c26 <Ldivdf$2+0x60>
    3c1c:	b681           	cmpl %d1,%d3
    3c1e:	6200 fff0      	bhiw 3c10 <Ldivdf$2+0x4a>
    3c22:	6000 ffe6      	braw 3c0a <Ldivdf$2+0x44>
    3c26:	7a35           	moveq #53,%d5
    3c28:	b082           	cmpl %d2,%d0
    3c2a:	6200 001c      	bhiw 3c48 <Ldivdf$2+0x82>
    3c2e:	6700 0012      	beqw 3c42 <Ldivdf$2+0x7c>
    3c32:	d281           	addl %d1,%d1
    3c34:	d180           	addxl %d0,%d0
    3c36:	51cd fff0      	dbf %d5,3c28 <Ldivdf$2+0x62>
    3c3a:	7400           	moveq #0,%d2
    3c3c:	2602           	movel %d2,%d3
    3c3e:	6000 0028      	braw 3c68 <Ldivdf$2+0xa2>
    3c42:	b681           	cmpl %d1,%d3
    3c44:	6200 ffec      	bhiw 3c32 <Ldivdf$2+0x6c>
    3c48:	7400           	moveq #0,%d2
    3c4a:	2602           	movel %d2,%d3
    3c4c:	0445 0035      	subiw #53,%d5
    3c50:	0645 003f      	addiw #63,%d5
    3c54:	0c45 001f      	cmpiw #31,%d5
    3c58:	6200 000c      	bhiw 3c66 <Ldivdf$2+0xa0>
    3c5c:	0bc3           	bset %d5,%d3
    3c5e:	6000 0008      	braw 3c68 <Ldivdf$2+0xa2>
    3c62:	0445 0020      	subiw #32,%d5
    3c66:	0bc2           	bset %d5,%d2
    3c68:	2006           	movel %d6,%d0
    3c6a:	2207           	movel %d7,%d1
    3c6c:	7600           	moveq #0,%d3
    3c6e:	0800 0016      	btst #22,%d0
    3c72:	6700 000c      	beqw 3c80 <Ldivdf$2+0xba>
    3c76:	e288           	lsrl #1,%d0
    3c78:	e291           	roxrl #1,%d1
    3c7a:	e292           	roxrl #1,%d2
    3c7c:	e293           	roxrl #1,%d3
    3c7e:	5244           	addqw #1,%d4
    3c80:	2e08           	movel %a0,%d7
    3c82:	7a03           	moveq #3,%d5
    3c84:	6000 00a8      	braw 3d2e <Lround$exit>

00003c88 <Ldivdf$inop>:
    3c88:	7a03           	moveq #3,%d5
    3c8a:	6000 f948      	braw 35d4 <Ld$inop>

00003c8e <Ldivdf$a$0>:
    3c8e:	7a03           	moveq #3,%d5
    3c90:	0882 001f      	bclr #31,%d2
    3c94:	2802           	movel %d2,%d4
    3c96:	8883           	orl %d3,%d4
    3c98:	6700 f93a      	beqw 35d4 <Ld$inop>
    3c9c:	0c82 7ff0 0000 	cmpil #2146435072,%d2
    3ca2:	6200 f930      	bhiw 35d4 <Ld$inop>
    3ca6:	6d00 0008      	bltw 3cb0 <Ldivdf$a$0+0x22>
    3caa:	4a83           	tstl %d3
    3cac:	6600 f926      	bnew 35d4 <Ld$inop>
    3cb0:	2008           	movel %a0,%d0
    3cb2:	7200           	moveq #0,%d1
    3cb4:	41f9 0000 46c8 	lea 46c8 <_fpCCR>,%a0
    3cba:	30bc 0000      	movew #0,%a0@
    3cbe:	4cdf 00fc      	moveml %sp@+,%d2-%d7
    3cc2:	4e5e           	unlk %fp
    3cc4:	4e75           	rts

00003cc6 <Ldivdf$b$0>:
    3cc6:	7a03           	moveq #3,%d5
    3cc8:	2e08           	movel %a0,%d7
    3cca:	0c80 7ff0 0000 	cmpil #2146435072,%d0
    3cd0:	6200 f902      	bhiw 35d4 <Ld$inop>
    3cd4:	4a81           	tstl %d1
    3cd6:	6600 f8fc      	bnew 35d4 <Ld$inop>
    3cda:	6000 f908      	braw 35e4 <Ld$div$0>

00003cde <Ldivdf$b$nf>:
    3cde:	7a03           	moveq #3,%d5
    3ce0:	4a83           	tstl %d3
    3ce2:	6600 f8f0      	bnew 35d4 <Ld$inop>
    3ce6:	6000 f8dc      	braw 35c4 <Ld$underflow>

00003cea <Ldivdf$a$nf>:
    3cea:	7a03           	moveq #3,%d5
    3cec:	4a81           	tstl %d1
    3cee:	6600 f8e4      	bnew 35d4 <Ld$inop>
    3cf2:	b487           	cmpl %d7,%d2
    3cf4:	6c00 f8de      	bgew 35d4 <Ld$inop>
    3cf8:	4a83           	tstl %d3
    3cfa:	6600 f8d8      	bnew 35d4 <Ld$inop>
    3cfe:	6000 f8ae      	braw 35ae <Ld$infty>

00003d02 <Ldivdf$a$den>:
    3d02:	7801           	moveq #1,%d4
    3d04:	c086           	andl %d6,%d0
    3d06:	d281           	addl %d1,%d1
    3d08:	d180           	addxl %d0,%d0
    3d0a:	5344           	subqw #1,%d4
    3d0c:	0800 0014      	btst #20,%d0
    3d10:	6600 fea2      	bnew 3bb4 <Ldivdf$1>
    3d14:	6000 fff0      	braw 3d06 <Ldivdf$a$den+0x4>

00003d18 <Ldivdf$b$den>:
    3d18:	7a01           	moveq #1,%d5
    3d1a:	c486           	andl %d6,%d2
    3d1c:	d683           	addl %d3,%d3
    3d1e:	d582           	addxl %d2,%d2
    3d20:	5345           	subqw #1,%d5
    3d22:	0802 0014      	btst #20,%d2
    3d26:	6600 fe9e      	bnew 3bc6 <Ldivdf$2>
    3d2a:	6000 fff0      	braw 3d1c <Ldivdf$b$den+0x4>

00003d2e <Lround$exit>:
    3d2e:	0c44 ffca      	cmpiw #-54,%d4
    3d32:	6d00 f890      	bltw 35c4 <Ld$underflow>
    3d36:	2047           	moveal %d7,%a0
    3d38:	7c00           	moveq #0,%d6
    3d3a:	2e06           	movel %d6,%d7
    3d3c:	0c44 0001      	cmpiw #1,%d4
    3d40:	6c00 0020      	bgew 3d62 <Lround$exit+0x34>
    3d44:	5244           	addqw #1,%d4
    3d46:	e288           	lsrl #1,%d0
    3d48:	e291           	roxrl #1,%d1
    3d4a:	e292           	roxrl #1,%d2
    3d4c:	e293           	roxrl #1,%d3
    3d4e:	e296           	roxrl #1,%d6
    3d50:	e297           	roxrl #1,%d7
    3d52:	0c44 0001      	cmpiw #1,%d4
    3d56:	6700 000a      	beqw 3d62 <Lround$exit+0x34>
    3d5a:	6000 ffe8      	braw 3d44 <Lround$exit+0x16>
    3d5e:	6000 f864      	braw 35c4 <Ld$underflow>
    3d62:	8486           	orl %d6,%d2
    3d64:	8687           	orl %d7,%d3
    3d66:	2e08           	movel %a0,%d7
    3d68:	41fa 0020      	lea %pc@(3d8a <Lround$0>),%a0
    3d6c:	43f9 0000 46c8 	lea 46c8 <_fpCCR>,%a1
    3d72:	3c29 0006      	movew %a1@(6),%d6
    3d76:	6700 018e      	beqw 3f06 <Lround$to$nearest>
    3d7a:	0c46 0002      	cmpiw #2,%d6
    3d7e:	6200 01ea      	bhiw 3f6a <Lround$to$minus>
    3d82:	6d00 01e6      	bltw 3f6a <Lround$to$minus>
    3d86:	6000 01e2      	braw 3f6a <Lround$to$minus>

00003d8a <Lround$0>:
    3d8a:	0c44 07ff      	cmpiw #2047,%d4
    3d8e:	6c00 f81e      	bgew 35ae <Ld$infty>
    3d92:	3804           	movew %d4,%d4
    3d94:	6700 f80a      	beqw 35a0 <Ld$den>
    3d98:	e94c           	lslw #4,%d4
    3d9a:	0880 0014      	bclr #20,%d0
    3d9e:	4840           	swap %d0
    3da0:	8044           	orw %d4,%d0
    3da2:	4840           	swap %d0
    3da4:	8087           	orl %d7,%d0
    3da6:	41f9 0000 46c8 	lea 46c8 <_fpCCR>,%a0
    3dac:	30bc 0000      	movew #0,%a0@
    3db0:	4cdf 00fc      	moveml %sp@+,%d2-%d7
    3db4:	4e5e           	unlk %fp
    3db6:	4e75           	rts

00003db8 <__negdf2>:
    3db8:	4e56 0000      	linkw %fp,#0
    3dbc:	48e7 3f00      	moveml %d2-%d7,%sp@-
    3dc0:	7a04           	moveq #4,%d5
    3dc2:	202e 0008      	movel %fp@(8),%d0
    3dc6:	222e 000c      	movel %fp@(12),%d1
    3dca:	0840 001f      	bchg #31,%d0
    3dce:	2400           	movel %d0,%d2
    3dd0:	0882 001f      	bclr #31,%d2
    3dd4:	2802           	movel %d2,%d4
    3dd6:	8881           	orl %d1,%d4
    3dd8:	6700 0034      	beqw 3e0e <__negdf2+0x56>
    3ddc:	0c82 7ff0 0000 	cmpil #2146435072,%d2
    3de2:	6d00 0018      	bltw 3dfc <__negdf2+0x44>
    3de6:	6200 f7ec      	bhiw 35d4 <Ld$inop>
    3dea:	4a81           	tstl %d1
    3dec:	6600 f7e6      	bnew 35d4 <Ld$inop>
    3df0:	2e00           	movel %d0,%d7
    3df2:	0287 8000 0000 	andil #-2147483648,%d7
    3df8:	6000 f7b4      	braw 35ae <Ld$infty>
    3dfc:	41f9 0000 46c8 	lea 46c8 <_fpCCR>,%a0
    3e02:	30bc 0000      	movew #0,%a0@
    3e06:	4cdf 00fc      	moveml %sp@+,%d2-%d7
    3e0a:	4e5e           	unlk %fp
    3e0c:	4e75           	rts
    3e0e:	0880 001f      	bclr #31,%d0
    3e12:	6000 ffe8      	braw 3dfc <__negdf2+0x44>

00003e16 <__cmpdf2_internal>:
    3e16:	4e56 0000      	linkw %fp,#0
    3e1a:	48e7 3f00      	moveml %d2-%d7,%sp@-
    3e1e:	7a05           	moveq #5,%d5
    3e20:	202e 0008      	movel %fp@(8),%d0
    3e24:	222e 000c      	movel %fp@(12),%d1
    3e28:	242e 0010      	movel %fp@(16),%d2
    3e2c:	262e 0014      	movel %fp@(20),%d3
    3e30:	2c00           	movel %d0,%d6
    3e32:	0880 001f      	bclr #31,%d0
    3e36:	2e02           	movel %d2,%d7
    3e38:	0882 001f      	bclr #31,%d2
    3e3c:	0c80 7ff0 0000 	cmpil #2146435072,%d0
    3e42:	6200 0094      	bhiw 3ed8 <Lcmpd$inop>
    3e46:	6700 007c      	beqw 3ec4 <Lcmpdf$a$nf>
    3e4a:	2800           	movel %d0,%d4
    3e4c:	8881           	orl %d1,%d4
    3e4e:	6700 0064      	beqw 3eb4 <Lcmpdf$a$0>

00003e52 <Lcmpdf$0>:
    3e52:	0c82 7ff0 0000 	cmpil #2146435072,%d2
    3e58:	6200 007e      	bhiw 3ed8 <Lcmpd$inop>
    3e5c:	6700 0070      	beqw 3ece <Lcmpdf$b$nf>
    3e60:	2802           	movel %d2,%d4
    3e62:	8883           	orl %d3,%d4
    3e64:	6700 0056      	beqw 3ebc <Lcmpdf$b$0>

00003e68 <Lcmpdf$1>:
    3e68:	bd87           	eorl %d6,%d7
    3e6a:	6a00 000c      	bplw 3e78 <Lcmpdf$1+0x10>
    3e6e:	4a86           	tstl %d6
    3e70:	6a00 002e      	bplw 3ea0 <Lcmpdf$a$gt$b>
    3e74:	6b00 0034      	bmiw 3eaa <Lcmpdf$b$gt$a>
    3e78:	4a86           	tstl %d6
    3e7a:	6a00 0006      	bplw 3e82 <Lcmpdf$1+0x1a>
    3e7e:	c142           	exg %d0,%d2
    3e80:	c343           	exg %d1,%d3
    3e82:	b480           	cmpl %d0,%d2
    3e84:	6200 0024      	bhiw 3eaa <Lcmpdf$b$gt$a>
    3e88:	6600 0016      	bnew 3ea0 <Lcmpdf$a$gt$b>
    3e8c:	b681           	cmpl %d1,%d3
    3e8e:	6200 001a      	bhiw 3eaa <Lcmpdf$b$gt$a>
    3e92:	6600 000c      	bnew 3ea0 <Lcmpdf$a$gt$b>
    3e96:	7000           	moveq #0,%d0
    3e98:	4cdf 00fc      	moveml %sp@+,%d2-%d7
    3e9c:	4e5e           	unlk %fp
    3e9e:	4e75           	rts

00003ea0 <Lcmpdf$a$gt$b>:
    3ea0:	7001           	moveq #1,%d0
    3ea2:	4cdf 00fc      	moveml %sp@+,%d2-%d7
    3ea6:	4e5e           	unlk %fp
    3ea8:	4e75           	rts

00003eaa <Lcmpdf$b$gt$a>:
    3eaa:	70ff           	moveq #-1,%d0
    3eac:	4cdf 00fc      	moveml %sp@+,%d2-%d7
    3eb0:	4e5e           	unlk %fp
    3eb2:	4e75           	rts

00003eb4 <Lcmpdf$a$0>:
    3eb4:	0886 001f      	bclr #31,%d6
    3eb8:	6000 ff98      	braw 3e52 <Lcmpdf$0>

00003ebc <Lcmpdf$b$0>:
    3ebc:	0887 001f      	bclr #31,%d7
    3ec0:	6000 ffa6      	braw 3e68 <Lcmpdf$1>

00003ec4 <Lcmpdf$a$nf>:
    3ec4:	4a81           	tstl %d1
    3ec6:	6600 f70c      	bnew 35d4 <Ld$inop>
    3eca:	6000 ff86      	braw 3e52 <Lcmpdf$0>

00003ece <Lcmpdf$b$nf>:
    3ece:	4a83           	tstl %d3
    3ed0:	6600 f702      	bnew 35d4 <Ld$inop>
    3ed4:	6000 ff92      	braw 3e68 <Lcmpdf$1>

00003ed8 <Lcmpd$inop>:
    3ed8:	202e 0018      	movel %fp@(24),%d0
    3edc:	7e11           	moveq #17,%d7
    3ede:	7c02           	moveq #2,%d6
    3ee0:	4ef9 0000 3f7a 	jmp 3f7a <$_exception_handler>

00003ee6 <__cmpdf2>:
    3ee6:	4e56 0000      	linkw %fp,#0
    3eea:	4878 0001      	pea 1 <ADD>
    3eee:	2f2e 0014      	movel %fp@(20),%sp@-
    3ef2:	2f2e 0010      	movel %fp@(16),%sp@-
    3ef6:	2f2e 000c      	movel %fp@(12),%sp@-
    3efa:	2f2e 0008      	movel %fp@(8),%sp@-
    3efe:	6100 ff16      	bsrw 3e16 <__cmpdf2_internal>
    3f02:	4e5e           	unlk %fp
    3f04:	4e75           	rts

00003f06 <Lround$to$nearest>:
    3f06:	0800 0015      	btst #21,%d0
    3f0a:	6600 0016      	bnew 3f22 <Lround$to$nearest+0x1c>
    3f0e:	0c44 0001      	cmpiw #1,%d4
    3f12:	6700 000e      	beqw 3f22 <Lround$to$nearest+0x1c>
    3f16:	d683           	addl %d3,%d3
    3f18:	d582           	addxl %d2,%d2
    3f1a:	d381           	addxl %d1,%d1
    3f1c:	d180           	addxl %d0,%d0
    3f1e:	51cc ffe6      	dbf %d4,3f06 <Lround$to$nearest>
    3f22:	0801 0000      	btst #0,%d1
    3f26:	6700 0022      	beqw 3f4a <Lround$to$nearest+0x44>
    3f2a:	8682           	orl %d2,%d3
    3f2c:	6600 0014      	bnew 3f42 <Lround$to$nearest+0x3c>
    3f30:	2601           	movel %d1,%d3
    3f32:	0283 0000 0002 	andil #2,%d3
    3f38:	7400           	moveq #0,%d2
    3f3a:	d283           	addl %d3,%d1
    3f3c:	d182           	addxl %d2,%d0
    3f3e:	6000 000a      	braw 3f4a <Lround$to$nearest+0x44>
    3f42:	7601           	moveq #1,%d3
    3f44:	7400           	moveq #0,%d2
    3f46:	d283           	addl %d3,%d1
    3f48:	d182           	addxl %d2,%d0
    3f4a:	e288           	lsrl #1,%d0
    3f4c:	e291           	roxrl #1,%d1
    3f4e:	0800 0015      	btst #21,%d0
    3f52:	6700 0008      	beqw 3f5c <Lround$to$nearest+0x56>
    3f56:	e288           	lsrl #1,%d0
    3f58:	e291           	roxrl #1,%d1
    3f5a:	5244           	addqw #1,%d4
    3f5c:	0800 0014      	btst #20,%d0
    3f60:	6700 0004      	beqw 3f66 <Lround$to$nearest+0x60>
    3f64:	4ed0           	jmp %a0@
    3f66:	7800           	moveq #0,%d4
    3f68:	4ed0           	jmp %a0@

00003f6a <Lround$to$minus>:
    3f6a:	4ed0           	jmp %a0@

00003f6c <__clear_sticky_bit>:
    3f6c:	41f9 0000 46c8 	lea 46c8 <_fpCCR>,%a0
    3f72:	317c 0000 0004 	movew #0,%a0@(4)
    3f78:	4e75           	rts

00003f7a <$_exception_handler>:
    3f7a:	41f9 0000 46c8 	lea 46c8 <_fpCCR>,%a0
    3f80:	3087           	movew %d7,%a0@
    3f82:	8f68 0004      	orw %d7,%a0@(4)
    3f86:	3146 0008      	movew %d6,%a0@(8)
    3f8a:	3145 000a      	movew %d5,%a0@(10)
    3f8e:	0c46 0001      	cmpiw #1,%d6
    3f92:	6700 001e      	beqw 3fb2 <$_exception_handler+0x38>
    3f96:	216e 0008 000c 	movel %fp@(8),%a0@(12)
    3f9c:	216e 000c 0010 	movel %fp@(12),%a0@(16)
    3fa2:	216e 0010 0014 	movel %fp@(16),%a0@(20)
    3fa8:	216e 0014 0018 	movel %fp@(20),%a0@(24)
    3fae:	6000 000e      	braw 3fbe <$_exception_handler+0x44>
    3fb2:	216e 0008 000c 	movel %fp@(8),%a0@(12)
    3fb8:	216e 000c 0014 	movel %fp@(12),%a0@(20)
    3fbe:	ce68 0002      	andw %a0@(2),%d7
    3fc2:	6700 000a      	beqw 3fce <$_exception_handler+0x54>
    3fc6:	4879 0000 46c8 	pea 46c8 <_fpCCR>
    3fcc:	4e4f           	trap #15
    3fce:	4cdf 00fc      	moveml %sp@+,%d2-%d7
    3fd2:	4e5e           	unlk %fp
    3fd4:	4e75           	rts
	...

00003fd8 <__nedf2>:
    3fd8:	4e56 0000      	linkw %fp,#0
    3fdc:	4878 0001      	pea 1 <ADD>
    3fe0:	2f2e 0014      	movel %fp@(20),%sp@-
    3fe4:	2f2e 0010      	movel %fp@(16),%sp@-
    3fe8:	2f2e 000c      	movel %fp@(12),%sp@-
    3fec:	2f2e 0008      	movel %fp@(8),%sp@-
    3ff0:	4eb9 0000 3e16 	jsr 3e16 <__cmpdf2_internal>
    3ff6:	4e5e           	unlk %fp
    3ff8:	4e75           	rts
	...

00003ffc <__gtdf2>:
    3ffc:	4e56 0000      	linkw %fp,#0
    4000:	4878 ffff      	pea ffffffff <LESS+0x0>
    4004:	2f2e 0014      	movel %fp@(20),%sp@-
    4008:	2f2e 0010      	movel %fp@(16),%sp@-
    400c:	2f2e 000c      	movel %fp@(12),%sp@-
    4010:	2f2e 0008      	movel %fp@(8),%sp@-
    4014:	4eb9 0000 3e16 	jsr 3e16 <__cmpdf2_internal>
    401a:	4e5e           	unlk %fp
    401c:	4e75           	rts
	...

00004020 <__ltdf2>:
    4020:	4e56 0000      	linkw %fp,#0
    4024:	4878 0001      	pea 1 <ADD>
    4028:	2f2e 0014      	movel %fp@(20),%sp@-
    402c:	2f2e 0010      	movel %fp@(16),%sp@-
    4030:	2f2e 000c      	movel %fp@(12),%sp@-
    4034:	2f2e 0008      	movel %fp@(8),%sp@-
    4038:	4eb9 0000 3e16 	jsr 3e16 <__cmpdf2_internal>
    403e:	4e5e           	unlk %fp
    4040:	4e75           	rts
	...

00004044 <__ledf2>:
    4044:	4e56 0000      	linkw %fp,#0
    4048:	4878 0001      	pea 1 <ADD>
    404c:	2f2e 0014      	movel %fp@(20),%sp@-
    4050:	2f2e 0010      	movel %fp@(16),%sp@-
    4054:	2f2e 000c      	movel %fp@(12),%sp@-
    4058:	2f2e 0008      	movel %fp@(8),%sp@-
    405c:	4eb9 0000 3e16 	jsr 3e16 <__cmpdf2_internal>
    4062:	4e5e           	unlk %fp
    4064:	4e75           	rts
	...

00004068 <__fixunsdfsi>:
    4068:	48e7 3c00      	moveml %d2-%d5,%sp@-
    406c:	242f 0014      	movel %sp@(20),%d2
    4070:	262f 0018      	movel %sp@(24),%d3
    4074:	283c 41e0 0000 	movel #1105199104,%d4
    407a:	4285           	clrl %d5
    407c:	2f05           	movel %d5,%sp@-
    407e:	2f04           	movel %d4,%sp@-
    4080:	2f03           	movel %d3,%sp@-
    4082:	2f02           	movel %d2,%sp@-
    4084:	4eb9 0000 462c 	jsr 462c <__gedf2>
    408a:	4fef 0010      	lea %sp@(16),%sp
    408e:	4a80           	tstl %d0
    4090:	6c12           	bges 40a4 <__fixunsdfsi+0x3c>
    4092:	2f03           	movel %d3,%sp@-
    4094:	2f02           	movel %d2,%sp@-
    4096:	4eb9 0000 44e2 	jsr 44e2 <__fixdfsi>
    409c:	508f           	addql #8,%sp
    409e:	4cdf 003c      	moveml %sp@+,%d2-%d5
    40a2:	4e75           	rts
    40a4:	2f05           	movel %d5,%sp@-
    40a6:	2f04           	movel %d4,%sp@-
    40a8:	2f03           	movel %d3,%sp@-
    40aa:	2f02           	movel %d2,%sp@-
    40ac:	4eb9 0000 35fa 	jsr 35fa <__subdf3>
    40b2:	4fef 000c      	lea %sp@(12),%sp
    40b6:	2e81           	movel %d1,%sp@
    40b8:	2f00           	movel %d0,%sp@-
    40ba:	4eb9 0000 44e2 	jsr 44e2 <__fixdfsi>
    40c0:	508f           	addql #8,%sp
    40c2:	0680 8000 0000 	addil #-2147483648,%d0
    40c8:	4cdf 003c      	moveml %sp@+,%d2-%d5
    40cc:	4e75           	rts
	...

000040d0 <__floatsidf.part.0>:
    40d0:	48e7 3800      	moveml %d2-%d4,%sp@-
    40d4:	202f 0010      	movel %sp@(16),%d0
    40d8:	6b52           	bmis 412c <__floatsidf.part.0+0x5c>
    40da:	7400           	moveq #0,%d2
    40dc:	223c 0000 041d 	movel #1053,%d1
    40e2:	0c80 00ff ffff 	cmpil #16777215,%d0
    40e8:	6e5a           	bgts 4144 <__floatsidf.part.0+0x74>
    40ea:	e988           	lsll #4,%d0
    40ec:	5981           	subql #4,%d1
    40ee:	0c80 00ff ffff 	cmpil #16777215,%d0
    40f4:	6ff4           	bles 40ea <__floatsidf.part.0+0x1a>
    40f6:	d080           	addl %d0,%d0
    40f8:	5381           	subql #1,%d1
    40fa:	0c80 3fff ffff 	cmpil #1073741823,%d0
    4100:	6ff4           	bles 40f6 <__floatsidf.part.0+0x26>
    4102:	2601           	movel %d1,%d3
    4104:	e94b           	lslw #4,%d3
    4106:	4843           	swap %d3
    4108:	4243           	clrw %d3
    410a:	2200           	movel %d0,%d1
    410c:	780a           	moveq #10,%d4
    410e:	e8a1           	asrl %d4,%d1
    4110:	0881 0014      	bclr #20,%d1
    4114:	8483           	orl %d3,%d2
    4116:	2801           	movel %d1,%d4
    4118:	8882           	orl %d2,%d4
    411a:	2600           	movel %d0,%d3
    411c:	ed4b           	lslw #6,%d3
    411e:	4843           	swap %d3
    4120:	4243           	clrw %d3
    4122:	2004           	movel %d4,%d0
    4124:	2203           	movel %d3,%d1
    4126:	4cdf 001c      	moveml %sp@+,%d2-%d4
    412a:	4e75           	rts
    412c:	4480           	negl %d0
    412e:	6b40           	bmis 4170 <__floatsidf.part.0+0xa0>
    4130:	243c 8000 0000 	movel #-2147483648,%d2
    4136:	223c 0000 041d 	movel #1053,%d1
    413c:	0c80 00ff ffff 	cmpil #16777215,%d0
    4142:	6fa6           	bles 40ea <__floatsidf.part.0+0x1a>
    4144:	263c 41d0 0000 	movel #1104150528,%d3
    414a:	0c80 3fff ffff 	cmpil #1073741823,%d0
    4150:	6fa4           	bles 40f6 <__floatsidf.part.0+0x26>
    4152:	2200           	movel %d0,%d1
    4154:	780a           	moveq #10,%d4
    4156:	e8a1           	asrl %d4,%d1
    4158:	0881 0014      	bclr #20,%d1
    415c:	8483           	orl %d3,%d2
    415e:	2801           	movel %d1,%d4
    4160:	8882           	orl %d2,%d4
    4162:	2600           	movel %d0,%d3
    4164:	ed4b           	lslw #6,%d3
    4166:	4843           	swap %d3
    4168:	4243           	clrw %d3
    416a:	2004           	movel %d4,%d0
    416c:	2203           	movel %d3,%d1
    416e:	60b6           	bras 4126 <__floatsidf.part.0+0x56>
    4170:	203c c1e0 0000 	movel #-1042284544,%d0
    4176:	4281           	clrl %d1
    4178:	4cdf 001c      	moveml %sp@+,%d2-%d4
    417c:	4e75           	rts

0000417e <__unordsf2>:
    417e:	2f02           	movel %d2,%sp@-
    4180:	222f 0008      	movel %sp@(8),%d1
    4184:	2001           	movel %d1,%d0
    4186:	4840           	swap %d0
    4188:	ee40           	asrw #7,%d0
    418a:	48c0           	extl %d0
    418c:	7400           	moveq #0,%d2
    418e:	4602           	notb %d2
    4190:	c082           	andl %d2,%d0
    4192:	b480           	cmpl %d0,%d2
    4194:	671a           	beqs 41b0 <__unordsf2+0x32>
    4196:	202f 000c      	movel %sp@(12),%d0
    419a:	4840           	swap %d0
    419c:	ee40           	asrw #7,%d0
    419e:	48c0           	extl %d0
    41a0:	7200           	moveq #0,%d1
    41a2:	4601           	notb %d1
    41a4:	c081           	andl %d1,%d0
    41a6:	b280           	cmpl %d0,%d1
    41a8:	6714           	beqs 41be <__unordsf2+0x40>
    41aa:	7000           	moveq #0,%d0
    41ac:	241f           	movel %sp@+,%d2
    41ae:	4e75           	rts
    41b0:	0281 007f ffff 	andil #8388607,%d1
    41b6:	67de           	beqs 4196 <__unordsf2+0x18>
    41b8:	7001           	moveq #1,%d0
    41ba:	241f           	movel %sp@+,%d2
    41bc:	4e75           	rts
    41be:	202f 000c      	movel %sp@(12),%d0
    41c2:	0280 007f ffff 	andil #8388607,%d0
    41c8:	56c0           	sne %d0
    41ca:	4880           	extw %d0
    41cc:	48c0           	extl %d0
    41ce:	4480           	negl %d0
    41d0:	241f           	movel %sp@+,%d2
    41d2:	4e75           	rts

000041d4 <__unorddf2>:
    41d4:	48e7 3800      	moveml %d2-%d4,%sp@-
    41d8:	242f 0010      	movel %sp@(16),%d2
    41dc:	262f 0014      	movel %sp@(20),%d3
    41e0:	202f 0018      	movel %sp@(24),%d0
    41e4:	282f 001c      	movel %sp@(28),%d4
    41e8:	2202           	movel %d2,%d1
    41ea:	4841           	swap %d1
    41ec:	e841           	asrw #4,%d1
    41ee:	48c1           	extl %d1
    41f0:	0281 0000 07ff 	andil #2047,%d1
    41f6:	0c81 0000 07ff 	cmpil #2047,%d1
    41fc:	671e           	beqs 421c <__unorddf2+0x48>
    41fe:	2200           	movel %d0,%d1
    4200:	4841           	swap %d1
    4202:	e841           	asrw #4,%d1
    4204:	48c1           	extl %d1
    4206:	0281 0000 07ff 	andil #2047,%d1
    420c:	0c81 0000 07ff 	cmpil #2047,%d1
    4212:	671a           	beqs 422e <__unorddf2+0x5a>
    4214:	7000           	moveq #0,%d0
    4216:	4cdf 001c      	moveml %sp@+,%d2-%d4
    421a:	4e75           	rts
    421c:	0282 000f ffff 	andil #1048575,%d2
    4222:	8483           	orl %d3,%d2
    4224:	67d8           	beqs 41fe <__unorddf2+0x2a>
    4226:	7001           	moveq #1,%d0
    4228:	4cdf 001c      	moveml %sp@+,%d2-%d4
    422c:	4e75           	rts
    422e:	0280 000f ffff 	andil #1048575,%d0
    4234:	8084           	orl %d4,%d0
    4236:	56c0           	sne %d0
    4238:	4880           	extw %d0
    423a:	48c0           	extl %d0
    423c:	4480           	negl %d0
    423e:	4cdf 001c      	moveml %sp@+,%d2-%d4
    4242:	4e75           	rts

00004244 <__floatunsidf>:
    4244:	48e7 3800      	moveml %d2-%d4,%sp@-
    4248:	202f 0010      	movel %sp@(16),%d0
    424c:	6748           	beqs 4296 <__floatunsidf+0x52>
    424e:	0c80 01ff ffff 	cmpil #33554431,%d0
    4254:	624a           	bhis 42a0 <__floatunsidf+0x5c>
    4256:	223c 0000 041e 	movel #1054,%d1
    425c:	e988           	lsll #4,%d0
    425e:	5981           	subql #4,%d1
    4260:	0c80 01ff ffff 	cmpil #33554431,%d0
    4266:	63f4           	blss 425c <__floatunsidf+0x18>
    4268:	d080           	addl %d0,%d0
    426a:	5381           	subql #1,%d1
    426c:	4a80           	tstl %d0
    426e:	6cf8           	bges 4268 <__floatunsidf+0x24>
    4270:	e949           	lslw #4,%d1
    4272:	4841           	swap %d1
    4274:	4241           	clrw %d1
    4276:	2400           	movel %d0,%d2
    4278:	760b           	moveq #11,%d3
    427a:	e6aa           	lsrl %d3,%d2
    427c:	0882 0014      	bclr #20,%d2
    4280:	2802           	movel %d2,%d4
    4282:	8881           	orl %d1,%d4
    4284:	2600           	movel %d0,%d3
    4286:	eb4b           	lslw #5,%d3
    4288:	4843           	swap %d3
    428a:	4243           	clrw %d3
    428c:	2004           	movel %d4,%d0
    428e:	2203           	movel %d3,%d1
    4290:	4cdf 001c      	moveml %sp@+,%d2-%d4
    4294:	4e75           	rts
    4296:	4280           	clrl %d0
    4298:	4281           	clrl %d1
    429a:	4cdf 001c      	moveml %sp@+,%d2-%d4
    429e:	4e75           	rts
    42a0:	223c 41e0 0000 	movel #1105199104,%d1
    42a6:	4a80           	tstl %d0
    42a8:	6dcc           	blts 4276 <__floatunsidf+0x32>
    42aa:	223c 0000 041e 	movel #1054,%d1
    42b0:	d080           	addl %d0,%d0
    42b2:	5381           	subql #1,%d1
    42b4:	4a80           	tstl %d0
    42b6:	6cb0           	bges 4268 <__floatunsidf+0x24>
    42b8:	60b6           	bras 4270 <__floatunsidf+0x2c>

000042ba <__floatsidf>:
    42ba:	202f 0004      	movel %sp@(4),%d0
    42be:	6704           	beqs 42c4 <__floatsidf+0xa>
    42c0:	6000 fe0e      	braw 40d0 <__floatsidf.part.0>
    42c4:	4280           	clrl %d0
    42c6:	4281           	clrl %d1
    42c8:	4e75           	rts

000042ca <__floatunsisf>:
    42ca:	48e7 3800      	moveml %d2-%d4,%sp@-
    42ce:	202f 0010      	movel %sp@(16),%d0
    42d2:	674e           	beqs 4322 <__floatunsisf+0x58>
    42d4:	0c80 01ff ffff 	cmpil #33554431,%d0
    42da:	624e           	bhis 432a <__floatunsisf+0x60>
    42dc:	223c 0000 041e 	movel #1054,%d1
    42e2:	e988           	lsll #4,%d0
    42e4:	5981           	subql #4,%d1
    42e6:	0c80 01ff ffff 	cmpil #33554431,%d0
    42ec:	63f4           	blss 42e2 <__floatunsisf+0x18>
    42ee:	d080           	addl %d0,%d0
    42f0:	5381           	subql #1,%d1
    42f2:	4a80           	tstl %d0
    42f4:	6cf8           	bges 42ee <__floatunsisf+0x24>
    42f6:	e949           	lslw #4,%d1
    42f8:	4841           	swap %d1
    42fa:	4241           	clrw %d1
    42fc:	2800           	movel %d0,%d4
    42fe:	740b           	moveq #11,%d2
    4300:	e4ac           	lsrl %d2,%d4
    4302:	0884 0014      	bclr #20,%d4
    4306:	2404           	movel %d4,%d2
    4308:	8481           	orl %d1,%d2
    430a:	2600           	movel %d0,%d3
    430c:	eb4b           	lslw #5,%d3
    430e:	4843           	swap %d3
    4310:	4243           	clrw %d3
    4312:	2f03           	movel %d3,%sp@-
    4314:	2f02           	movel %d2,%sp@-
    4316:	4eba 00bc      	jsr %pc@(43d4 <__truncdfsf2>)
    431a:	508f           	addql #8,%sp
    431c:	4cdf 001c      	moveml %sp@+,%d2-%d4
    4320:	4e75           	rts
    4322:	7000           	moveq #0,%d0
    4324:	4cdf 001c      	moveml %sp@+,%d2-%d4
    4328:	4e75           	rts
    432a:	223c 41e0 0000 	movel #1105199104,%d1
    4330:	4a80           	tstl %d0
    4332:	6dc8           	blts 42fc <__floatunsisf+0x32>
    4334:	223c 0000 041e 	movel #1054,%d1
    433a:	d080           	addl %d0,%d0
    433c:	5381           	subql #1,%d1
    433e:	4a80           	tstl %d0
    4340:	6cac           	bges 42ee <__floatunsisf+0x24>
    4342:	60b2           	bras 42f6 <__floatunsisf+0x2c>

00004344 <__floatsisf>:
    4344:	202f 0004      	movel %sp@(4),%d0
    4348:	6712           	beqs 435c <__floatsisf+0x18>
    434a:	2f00           	movel %d0,%sp@-
    434c:	4eba fd82      	jsr %pc@(40d0 <__floatsidf.part.0>)
    4350:	2e81           	movel %d1,%sp@
    4352:	2f00           	movel %d0,%sp@-
    4354:	4eba 007e      	jsr %pc@(43d4 <__truncdfsf2>)
    4358:	508f           	addql #8,%sp
    435a:	4e75           	rts
    435c:	7000           	moveq #0,%d0
    435e:	4e75           	rts

00004360 <__extendsfdf2>:
    4360:	48e7 3800      	moveml %d2-%d4,%sp@-
    4364:	202f 0010      	movel %sp@(16),%d0
    4368:	2600           	movel %d0,%d3
    436a:	0283 8000 0000 	andil #-2147483648,%d3
    4370:	2200           	movel %d0,%d1
    4372:	0881 001f      	bclr #31,%d1
    4376:	4a81           	tstl %d1
    4378:	674e           	beqs 43c8 <__extendsfdf2+0x68>
    437a:	2400           	movel %d0,%d2
    437c:	4842           	swap %d2
    437e:	ee42           	asrw #7,%d2
    4380:	48c2           	extl %d2
    4382:	7200           	moveq #0,%d1
    4384:	4601           	notb %d1
    4386:	c282           	andl %d2,%d1
    4388:	0280 007f ffff 	andil #8388607,%d0
    438e:	4a02           	tstb %d2
    4390:	6610           	bnes 43a2 <__extendsfdf2+0x42>
    4392:	7201           	moveq #1,%d1
    4394:	d080           	addl %d0,%d0
    4396:	5381           	subql #1,%d1
    4398:	0800 0017      	btst #23,%d0
    439c:	67f6           	beqs 4394 <__extendsfdf2+0x34>
    439e:	0880 0017      	bclr #23,%d0
    43a2:	2400           	movel %d0,%d2
    43a4:	e682           	asrl #3,%d2
    43a6:	8483           	orl %d3,%d2
    43a8:	0681 0000 0380 	addil #896,%d1
    43ae:	e949           	lslw #4,%d1
    43b0:	4841           	swap %d1
    43b2:	4241           	clrw %d1
    43b4:	2802           	movel %d2,%d4
    43b6:	8881           	orl %d1,%d4
    43b8:	2600           	movel %d0,%d3
    43ba:	721d           	moveq #29,%d1
    43bc:	e3ab           	lsll %d1,%d3
    43be:	2004           	movel %d4,%d0
    43c0:	2203           	movel %d3,%d1
    43c2:	4cdf 001c      	moveml %sp@+,%d2-%d4
    43c6:	4e75           	rts
    43c8:	91c8           	subal %a0,%a0
    43ca:	2003           	movel %d3,%d0
    43cc:	2208           	movel %a0,%d1
    43ce:	4cdf 001c      	moveml %sp@+,%d2-%d4
    43d2:	4e75           	rts

000043d4 <__truncdfsf2>:
    43d4:	48e7 3c00      	moveml %d2-%d5,%sp@-
    43d8:	262f 0014      	movel %sp@(20),%d3
    43dc:	242f 0018      	movel %sp@(24),%d2
    43e0:	2003           	movel %d3,%d0
    43e2:	0880 001f      	bclr #31,%d0
    43e6:	8082           	orl %d2,%d0
    43e8:	6700 00ea      	beqw 44d4 <__truncdfsf2+0x100>
    43ec:	2203           	movel %d3,%d1
    43ee:	4841           	swap %d1
    43f0:	e841           	asrw #4,%d1
    43f2:	48c1           	extl %d1
    43f4:	0281 0000 07ff 	andil #2047,%d1
    43fa:	0681 ffff fc80 	addil #-896,%d1
    4400:	2802           	movel %d2,%d4
    4402:	0284 003f ffff 	andil #4194303,%d4
    4408:	2003           	movel %d3,%d0
    440a:	7a0a           	moveq #10,%d5
    440c:	eba8           	lsll %d5,%d0
    440e:	0280 3fff fc00 	andil #1073740800,%d0
    4414:	4242           	clrw %d2
    4416:	4842           	swap %d2
    4418:	ec4a           	lsrw #6,%d2
    441a:	8082           	orl %d2,%d0
    441c:	2400           	movel %d0,%d2
    441e:	08c2 001e      	bset #30,%d2
    4422:	7a3f           	moveq #63,%d5
    4424:	c085           	andl %d5,%d0
    4426:	8084           	orl %d4,%d0
    4428:	ec82           	asrl #6,%d2
    442a:	4a81           	tstl %d1
    442c:	6f64           	bles 4492 <__truncdfsf2+0xbe>
    442e:	7801           	moveq #1,%d4
    4430:	c882           	andl %d2,%d4
    4432:	0802 0000      	btst #0,%d2
    4436:	6740           	beqs 4478 <__truncdfsf2+0xa4>
    4438:	7a02           	moveq #2,%d5
    443a:	ca82           	andl %d2,%d5
    443c:	8085           	orl %d5,%d0
    443e:	6738           	beqs 4478 <__truncdfsf2+0xa4>
    4440:	4a81           	tstl %d1
    4442:	6702           	beqs 4446 <__truncdfsf2+0x72>
    4444:	7802           	moveq #2,%d4
    4446:	5282           	addql #1,%d2
    4448:	203c 0200 0000 	movel #33554432,%d0
    444e:	7a01           	moveq #1,%d5
    4450:	ba84           	cmpl %d4,%d5
    4452:	6774           	beqs 44c8 <__truncdfsf2+0xf4>
    4454:	b480           	cmpl %d0,%d2
    4456:	6d20           	blts 4478 <__truncdfsf2+0xa4>
    4458:	2001           	movel %d1,%d0
    445a:	5280           	addql #1,%d0
    445c:	ef48           	lslw #7,%d0
    445e:	4840           	swap %d0
    4460:	4240           	clrw %d0
    4462:	e8a2           	asrl %d4,%d2
    4464:	0882 0017      	bclr #23,%d2
    4468:	8082           	orl %d2,%d0
    446a:	0283 8000 0000 	andil #-2147483648,%d3
    4470:	8083           	orl %d3,%d0
    4472:	4cdf 003c      	moveml %sp@+,%d2-%d5
    4476:	4e75           	rts
    4478:	2001           	movel %d1,%d0
    447a:	ef48           	lslw #7,%d0
    447c:	4840           	swap %d0
    447e:	4240           	clrw %d0
    4480:	e282           	asrl #1,%d2
    4482:	0882 0017      	bclr #23,%d2
    4486:	8082           	orl %d2,%d0
    4488:	0283 8000 0000 	andil #-2147483648,%d3
    448e:	8083           	orl %d3,%d0
    4490:	60e0           	bras 4472 <__truncdfsf2+0x9e>
    4492:	78e8           	moveq #-24,%d4
    4494:	b881           	cmpl %d1,%d4
    4496:	6f10           	bles 44a8 <__truncdfsf2+0xd4>
    4498:	7400           	moveq #0,%d2
    449a:	7000           	moveq #0,%d0
    449c:	8082           	orl %d2,%d0
    449e:	0283 8000 0000 	andil #-2147483648,%d3
    44a4:	8083           	orl %d3,%d0
    44a6:	60ca           	bras 4472 <__truncdfsf2+0x9e>
    44a8:	7801           	moveq #1,%d4
    44aa:	9881           	subl %d1,%d4
    44ac:	7201           	moveq #1,%d1
    44ae:	e9a9           	lsll %d4,%d1
    44b0:	5381           	subql #1,%d1
    44b2:	c282           	andl %d2,%d1
    44b4:	8081           	orl %d1,%d0
    44b6:	e8a2           	asrl %d4,%d2
    44b8:	7200           	moveq #0,%d1
    44ba:	7801           	moveq #1,%d4
    44bc:	c882           	andl %d2,%d4
    44be:	0802 0000      	btst #0,%d2
    44c2:	6600 ff74      	bnew 4438 <__truncdfsf2+0x64>
    44c6:	60b0           	bras 4478 <__truncdfsf2+0xa4>
    44c8:	203c 0100 0000 	movel #16777216,%d0
    44ce:	b480           	cmpl %d0,%d2
    44d0:	6c86           	bges 4458 <__truncdfsf2+0x84>
    44d2:	60a4           	bras 4478 <__truncdfsf2+0xa4>
    44d4:	2003           	movel %d3,%d0
    44d6:	0280 8000 0000 	andil #-2147483648,%d0
    44dc:	4cdf 003c      	moveml %sp@+,%d2-%d5
    44e0:	4e75           	rts

000044e2 <__fixdfsi>:
    44e2:	48e7 3800      	moveml %d2-%d4,%sp@-
    44e6:	222f 0010      	movel %sp@(16),%d1
    44ea:	262f 0014      	movel %sp@(20),%d3
    44ee:	2001           	movel %d1,%d0
    44f0:	6724           	beqs 4516 <__fixdfsi+0x34>
    44f2:	2401           	movel %d1,%d2
    44f4:	4842           	swap %d2
    44f6:	e842           	asrw #4,%d2
    44f8:	48c2           	extl %d2
    44fa:	0282 0000 07ff 	andil #2047,%d2
    4500:	2042           	moveal %d2,%a0
    4502:	41e8 fbe3      	lea %a0@(-1053),%a0
    4506:	b0fc 0000      	cmpaw #0,%a0
    450a:	6f10           	bles 451c <__fixdfsi+0x3a>
    450c:	4a81           	tstl %d1
    450e:	6d4e           	blts 455e <__fixdfsi+0x7c>
    4510:	203c 7fff ffff 	movel #2147483647,%d0
    4516:	4cdf 001c      	moveml %sp@+,%d2-%d4
    451a:	4e75           	rts
    451c:	78e1           	moveq #-31,%d4
    451e:	b888           	cmpl %a0,%d4
    4520:	6e48           	bgts 456a <__fixdfsi+0x88>
    4522:	780a           	moveq #10,%d4
    4524:	e9a9           	lsll %d4,%d1
    4526:	0281 3fff fc00 	andil #1073740800,%d1
    452c:	4243           	clrw %d3
    452e:	4843           	swap %d3
    4530:	ec4b           	lsrw #6,%d3
    4532:	8283           	orl %d3,%d1
    4534:	08c1 001e      	bset #30,%d1
    4538:	b0fc 0000      	cmpaw #0,%a0
    453c:	670a           	beqs 4548 <__fixdfsi+0x66>
    453e:	263c 0000 041d 	movel #1053,%d3
    4544:	9682           	subl %d2,%d3
    4546:	e6a1           	asrl %d3,%d1
    4548:	4a80           	tstl %d0
    454a:	6d08           	blts 4554 <__fixdfsi+0x72>
    454c:	2001           	movel %d1,%d0
    454e:	4cdf 001c      	moveml %sp@+,%d2-%d4
    4552:	4e75           	rts
    4554:	2001           	movel %d1,%d0
    4556:	4480           	negl %d0
    4558:	4cdf 001c      	moveml %sp@+,%d2-%d4
    455c:	4e75           	rts
    455e:	203c 8000 0000 	movel #-2147483648,%d0
    4564:	4cdf 001c      	moveml %sp@+,%d2-%d4
    4568:	4e75           	rts
    456a:	7000           	moveq #0,%d0
    456c:	4cdf 001c      	moveml %sp@+,%d2-%d4
    4570:	4e75           	rts

00004572 <__fixsfsi>:
    4572:	48e7 3800      	moveml %d2-%d4,%sp@-
    4576:	2f2f 0010      	movel %sp@(16),%sp@-
    457a:	4eba fde4      	jsr %pc@(4360 <__extendsfdf2>)
    457e:	588f           	addql #4,%sp
    4580:	2400           	movel %d0,%d2
    4582:	2002           	movel %d2,%d0
    4584:	6724           	beqs 45aa <__fixsfsi+0x38>
    4586:	2602           	movel %d2,%d3
    4588:	4843           	swap %d3
    458a:	e843           	asrw #4,%d3
    458c:	48c3           	extl %d3
    458e:	0283 0000 07ff 	andil #2047,%d3
    4594:	2043           	moveal %d3,%a0
    4596:	41e8 fbe3      	lea %a0@(-1053),%a0
    459a:	b0fc 0000      	cmpaw #0,%a0
    459e:	6f10           	bles 45b0 <__fixsfsi+0x3e>
    45a0:	4a82           	tstl %d2
    45a2:	6d4e           	blts 45f2 <__fixsfsi+0x80>
    45a4:	203c 7fff ffff 	movel #2147483647,%d0
    45aa:	4cdf 001c      	moveml %sp@+,%d2-%d4
    45ae:	4e75           	rts
    45b0:	78e1           	moveq #-31,%d4
    45b2:	b888           	cmpl %a0,%d4
    45b4:	6e48           	bgts 45fe <__fixsfsi+0x8c>
    45b6:	780a           	moveq #10,%d4
    45b8:	e9aa           	lsll %d4,%d2
    45ba:	0282 3fff fc00 	andil #1073740800,%d2
    45c0:	4241           	clrw %d1
    45c2:	4841           	swap %d1
    45c4:	ec49           	lsrw #6,%d1
    45c6:	8481           	orl %d1,%d2
    45c8:	08c2 001e      	bset #30,%d2
    45cc:	b0fc 0000      	cmpaw #0,%a0
    45d0:	670a           	beqs 45dc <__fixsfsi+0x6a>
    45d2:	223c 0000 041d 	movel #1053,%d1
    45d8:	9283           	subl %d3,%d1
    45da:	e2a2           	asrl %d1,%d2
    45dc:	4a80           	tstl %d0
    45de:	6d08           	blts 45e8 <__fixsfsi+0x76>
    45e0:	2002           	movel %d2,%d0
    45e2:	4cdf 001c      	moveml %sp@+,%d2-%d4
    45e6:	4e75           	rts
    45e8:	2002           	movel %d2,%d0
    45ea:	4480           	negl %d0
    45ec:	4cdf 001c      	moveml %sp@+,%d2-%d4
    45f0:	4e75           	rts
    45f2:	203c 8000 0000 	movel #-2147483648,%d0
    45f8:	4cdf 001c      	moveml %sp@+,%d2-%d4
    45fc:	4e75           	rts
    45fe:	7000           	moveq #0,%d0
    4600:	4cdf 001c      	moveml %sp@+,%d2-%d4
    4604:	4e75           	rts
	...

00004608 <__mulsi3>:
    4608:	302f 0004      	movew %sp@(4),%d0
    460c:	c0ef 000a      	muluw %sp@(10),%d0
    4610:	322f 0006      	movew %sp@(6),%d1
    4614:	c2ef 0008      	muluw %sp@(8),%d1
    4618:	d041           	addw %d1,%d0
    461a:	4840           	swap %d0
    461c:	4240           	clrw %d0
    461e:	322f 0006      	movew %sp@(6),%d1
    4622:	c2ef 000a      	muluw %sp@(10),%d1
    4626:	d081           	addl %d1,%d0
    4628:	4e75           	rts
	...

0000462c <__gedf2>:
    462c:	4e56 0000      	linkw %fp,#0
    4630:	4878 ffff      	pea ffffffff <LESS+0x0>
    4634:	2f2e 0014      	movel %fp@(20),%sp@-
    4638:	2f2e 0010      	movel %fp@(16),%sp@-
    463c:	2f2e 000c      	movel %fp@(12),%sp@-
    4640:	2f2e 0008      	movel %fp@(8),%sp@-
    4644:	4eb9 0000 3e16 	jsr 3e16 <__cmpdf2_internal>
    464a:	4e5e           	unlk %fp
    464c:	4e75           	rts
    464e:	5374 6172 7469 	subqw #1,%a4@(0000000074696e67)@(0000000000002075)
    4654:	6e67 2075 
    4658:	702e           	moveq #46,%d0
    465a:	2e2e 0066      	movel %fp@(102),%d7
    465e:	6e69           	bgts 46c9 <_fpCCR+0x1>
    4660:	2b00           	movel %d0,%a5@-
    4662:	666e           	bnes 46d2 <__last_operation>
    4664:	6900 6e61      	bvsw b4c7 <_bss_end+0x35df>
    4668:	6e00 666e      	bgtw acd8 <_bss_end+0x2df0>
    466c:	692d           	bvss 469b <pow10.0+0x2b>
	...

00004670 <pow10.0>:
    4670:	3ff0 0000 0000 0000 4024 0000 0000 0000     ?.......@$......
    4680:	4059 0000 0000 0000 408f 4000 0000 0000     @Y......@.@.....
    4690:	40c3 8800 0000 0000 40f8 6a00 0000 0000     @.......@.j.....
    46a0:	412e 8480 0000 0000 4163 12d0 0000 0000     A.......Ac......
    46b0:	4197 d784 0000 0000 41cd cd65 0000 0000     A.......A..e....

Disassembly of section .data:

000046c0 <_ctors>:
    46c0:	0000 0000      	orib #0,%d0

000046c4 <crbuf>:
    46c4:	0d00 0000                                   ....

000046c8 <_fpCCR>:
	...

000046ca <__trap_enable_bits>:
	...

000046cc <__sticky_bits>:
	...

000046ce <__rounding_mode>:
	...

000046d0 <__format>:
	...

000046d2 <__last_operation>:
	...

000046d4 <__operand1>:
	...

000046dc <__operand2>:
	...
