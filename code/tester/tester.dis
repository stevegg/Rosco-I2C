
tester.elf:     file format elf32-m68k


Disassembly of section .text.init:

00002000 <START>:
    2000:	2e78 0414      	moveal 414 <SDB_MEMSIZE>,%sp
    2004:	41fa fffa      	lea %pc@(2000 <START>),%a0
    2008:	43f9 0000 2000 	lea 2000 <START>,%a1
    200e:	203c 0000 20c4 	movel #8388,%d0
    2014:	9089           	subl %a1,%d0
    2016:	e488           	lsrl #2,%d0
    2018:	5380           	subql #1,%d0
    201a:	22d8           	movel %a0@+,%a1@+
    201c:	51c8 fffc      	dbf %d0,201a <START+0x1a>
    2020:	4ef9 0000 2026 	jmp 2026 <_init_end>

Disassembly of section .text.postinit:

00002026 <_postinit>:
    2026:	203c 0000 4764 	movel #18276,%d0
    202c:	9089           	subl %a1,%d0
    202e:	e488           	lsrl #2,%d0
    2030:	2200           	movel %d0,%d1
    2032:	4841           	swap %d1
    2034:	6002           	bras 2038 <_postinit+0x12>
    2036:	22d8           	movel %a0@+,%a1@+
    2038:	51c8 fffc      	dbf %d0,2036 <_postinit+0x10>
    203c:	51c9 fff8      	dbf %d1,2036 <_postinit+0x10>

00002040 <PREMAIN>:
    2040:	23f8 0490 0000 	movel 490 <EFP_PROG_EXIT>,4740 <SAVE_PROG_EXIT>
    2046:	4740 
    2048:	21fc 0000 2062 	movel #8290,490 <EFP_PROG_EXIT>
    204e:	0490 
    2050:	41f9 0000 211a 	lea 211a <__kinit>,%a0
    2056:	4e90           	jsr %a0@
    2058:	6124           	bsrs 207e <CALL_CTORS>
    205a:	41f9 0000 20c4 	lea 20c4 <_postinit_end>,%a0
    2060:	4e90           	jsr %a0@
    2062:	21f9 0000 4740 	movel 4740 <SAVE_PROG_EXIT>,490 <EFP_PROG_EXIT>
    2068:	0490 
    206a:	42a7           	clrl %sp@-
    206c:	41f9 0000 2146 	lea 2146 <__cxa_finalize>,%a0
    2072:	4e90           	jsr %a0@
    2074:	588f           	addql #4,%sp
    2076:	6128           	bsrs 20a0 <CALL_DTORS>
    2078:	2078 0004      	moveal 4 <DUART_CRA>,%a0
    207c:	4ed0           	jmp %a0@

0000207e <CALL_CTORS>:
    207e:	48e7 0038      	moveml %a2-%a4,%sp@-
    2082:	45f9 0000 473c 	lea 473c <_code_end>,%a2
    2088:	47f9 0000 473c 	lea 473c <_code_end>,%a3
    208e:	598b           	subql #4,%a3
    2090:	b7ca           	cmpal %a2,%a3
    2092:	6506           	bcss 209a <CALL_CTORS+0x1c>
    2094:	2853           	moveal %a3@,%a4
    2096:	4e94           	jsr %a4@
    2098:	60f4           	bras 208e <CALL_CTORS+0x10>
    209a:	4cdf 1c00      	moveml %sp@+,%a2-%a4
    209e:	4e75           	rts

000020a0 <CALL_DTORS>:
    20a0:	48e7 0038      	moveml %a2-%a4,%sp@-
    20a4:	45f9 0000 473c 	lea 473c <_code_end>,%a2
    20aa:	47f9 0000 473c 	lea 473c <_code_end>,%a3
    20b0:	b5cb           	cmpal %a3,%a2
    20b2:	6708           	beqs 20bc <CALL_DTORS+0x1c>
    20b4:	2852           	moveal %a2@,%a4
    20b6:	4e94           	jsr %a4@
    20b8:	588a           	addql #4,%a2
    20ba:	60f4           	bras 20b0 <CALL_DTORS+0x10>
    20bc:	4cdf 1c00      	moveml %sp@+,%a2-%a4
    20c0:	4e75           	rts
	...

Disassembly of section .text:

000020c4 <kmain>:
 * Copyright (c) 2020 You (you@youremail.com)
 */

#include <stdio.h>

void kmain() {
    20c4:	4fef ffd8      	lea %sp@(-40),%sp
    20c8:	48e7 2038      	moveml %d2/%a2-%a4,%sp@-

  printf("Starting up...");
    20cc:	4879 0000 46a6 	pea 46a6 <__gedf2+0x22>
    20d2:	4eb9 0000 3466 	jsr 3466 <printf_>
    20d8:	588f           	addql #4,%sp
    20da:	7400           	moveq #0,%d2
  volatile char *address = (char *)0xF83F01;
  unsigned long count = 0l;
  char buffer[40];
  unsigned char value = 0;
  while ( 1 ) {
    sprintf(buffer, "Sending %lu with value %d", count ++, value );
    20dc:	47ef 0010      	lea %sp@(16),%a3
    20e0:	49f9 0000 348e 	lea 348e <sprintf_>,%a4
    printf(buffer);
    20e6:	45f9 0000 3466 	lea 3466 <printf_>,%a2
    sprintf(buffer, "Sending %lu with value %d", count ++, value );
    20ec:	7000           	moveq #0,%d0
    20ee:	4600           	notb %d0
    20f0:	c082           	andl %d2,%d0
    20f2:	2f00           	movel %d0,%sp@-
    20f4:	2f02           	movel %d2,%sp@-
    20f6:	4879 0000 46b5 	pea 46b5 <__gedf2+0x31>
    20fc:	2f0b           	movel %a3,%sp@-
    20fe:	4e94           	jsr %a4@
    printf(buffer);
    2100:	2f0b           	movel %a3,%sp@-
    2102:	4e92           	jsr %a2@
    *address = value ++;
    2104:	13c2 00f8 3f01 	moveb %d2,f83f01 <DUART_BASE_R2+0x3e59>

    printf("complete\r\n");
    210a:	4879 0000 46cf 	pea 46cf <__gedf2+0x4b>
    2110:	4e92           	jsr %a2@
  while ( 1 ) {
    2112:	5282           	addql #1,%d2
    2114:	4fef 0018      	lea %sp@(24),%sp
    2118:	60d2           	bras 20ec <kmain+0x28>

0000211a <__kinit>:

void *__dso_handle;

__attribute__((weak)) void __kinit() {
  // zero .bss
  for (uint32_t *dst = &_bss_start; dst < &_bss_end; *dst++ = 0);
    211a:	41f9 0000 4764 	lea 4764 <cxa_atexit_count>,%a0
    2120:	b1fc 0000 7f68 	cmpal #32616,%a0
    2126:	641c           	bccs 2144 <__kinit+0x2a>
    2128:	203c 0000 7f68 	movel #32616,%d0
    212e:	0480 0000 4765 	subil #18277,%d0
    2134:	72fc           	moveq #-4,%d1
    2136:	c081           	andl %d1,%d0
    2138:	0680 0000 4768 	addil #18280,%d0
    213e:	4298           	clrl %a0@+
    2140:	b088           	cmpl %a0,%d0
    2142:	66fa           	bnes 213e <__kinit+0x24>
}
    2144:	4e75           	rts

00002146 <__cxa_finalize>:
/*
 * We probably don't need the full dso_handle capability as we're always
 * statically linked, but I'd rather do a proper impl now than have it 
 * break later because of a half-baked one :D
 */
void __cxa_finalize(void *dso_handle) {
    2146:	48e7 3020      	moveml %d2-%d3/%a2,%sp@-
    214a:	262f 0010      	movel %sp@(16),%d3
    for (int i = cxa_atexit_count - 1; i >= 0; i--) {
    214e:	7200           	moveq #0,%d1
    2150:	3239 0000 4764 	movew 4764 <cxa_atexit_count>,%d1
    2156:	2401           	movel %d1,%d2
    2158:	5382           	subql #1,%d2
    215a:	4a81           	tstl %d1
    215c:	6728           	beqs 2186 <__cxa_finalize+0x40>
    215e:	2001           	movel %d1,%d0
    2160:	e788           	lsll #3,%d0
    2162:	2440           	moveal %d0,%a2
    2164:	95c1           	subal %d1,%a2
    2166:	d5ca           	addal %a2,%a2
    2168:	d5fc 0000 4758 	addal #18264,%a2
        cxa_atexit_entry *entry = &cxa_atexits[i];

        if ((dso_handle == NULL || dso_handle == entry->dso_handle) && !entry->done) {
    216e:	4a83           	tstl %d3
    2170:	671a           	beqs 218c <__cxa_finalize+0x46>
    2172:	b6aa 0008      	cmpl %a2@(8),%d3
    2176:	6714           	beqs 218c <__cxa_finalize+0x46>
    for (int i = cxa_atexit_count - 1; i >= 0; i--) {
    2178:	45ea fff2      	lea %a2@(-14),%a2
    217c:	51ca fff0      	dbf %d2,216e <__cxa_finalize+0x28>
    2180:	4242           	clrw %d2
    2182:	5382           	subql #1,%d2
    2184:	64e8           	bccs 216e <__cxa_finalize+0x28>
            entry->func(entry->ptr);
            entry->done = true;
        }
    }
}
    2186:	4cdf 040c      	moveml %sp@+,%d2-%d3/%a2
    218a:	4e75           	rts
        if ((dso_handle == NULL || dso_handle == entry->dso_handle) && !entry->done) {
    218c:	4a2a 000c      	tstb %a2@(12)
    2190:	66e6           	bnes 2178 <__cxa_finalize+0x32>
            entry->func(entry->ptr);
    2192:	2f2a 0004      	movel %a2@(4),%sp@-
    2196:	2052           	moveal %a2@,%a0
    2198:	4e90           	jsr %a0@
            entry->done = true;
    219a:	157c 0001 000c 	moveb #1,%a2@(12)
    21a0:	588f           	addql #4,%sp
    for (int i = cxa_atexit_count - 1; i >= 0; i--) {
    21a2:	45ea fff2      	lea %a2@(-14),%a2
    21a6:	51ca ffc6      	dbf %d2,216e <__cxa_finalize+0x28>
    21aa:	4242           	clrw %d2
    21ac:	5382           	subql #1,%d2
    21ae:	64be           	bccs 216e <__cxa_finalize+0x28>
    21b0:	60d4           	bras 2186 <__cxa_finalize+0x40>

000021b2 <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
    21b2:	222f 0004      	movel %sp@(4),%d1
    21b6:	202f 000c      	movel %sp@(12),%d0
  if (idx < maxlen) {
    21ba:	b0af 0010      	cmpl %sp@(16),%d0
    21be:	6408           	bccs 21c8 <_out_buffer+0x16>
    ((char*)buffer)[idx] = character;
    21c0:	206f 0008      	moveal %sp@(8),%a0
    21c4:	1181 0800      	moveb %d1,%a0@(0000000000000000,%d0:l)
  }
}
    21c8:	4e75           	rts

000021ca <_out_null>:

// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
    21ca:	4e75           	rts

000021cc <_out_rev>:
}


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
    21cc:	48e7 3f3e      	moveml %d2-%d7/%a2-%fp,%sp@-
    21d0:	266f 0030      	moveal %sp@(48),%a3
    21d4:	262f 0034      	movel %sp@(52),%d3
    21d8:	2a6f 0038      	moveal %sp@(56),%a5
    21dc:	282f 003c      	movel %sp@(60),%d4
    21e0:	2c2f 0040      	movel %sp@(64),%d6
    21e4:	286f 0044      	moveal %sp@(68),%a4
    21e8:	2e2f 0048      	movel %sp@(72),%d7
    21ec:	2a2f 004c      	movel %sp@(76),%d5
  const size_t start_idx = idx;

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    21f0:	7003           	moveq #3,%d0
    21f2:	c085           	andl %d5,%d0
    21f4:	667e           	bnes 2274 <_out_rev+0xa8>
    for (size_t i = len; i < width; i++) {
    21f6:	be8c           	cmpl %a4,%d7
    21f8:	637a           	blss 2274 <_out_rev+0xa8>
    21fa:	2407           	movel %d7,%d2
    21fc:	948c           	subl %a4,%d2
    21fe:	d48d           	addl %a5,%d2
    2200:	244d           	moveal %a5,%a2
      out(' ', buffer, idx++, maxlen);
    2202:	200a           	movel %a2,%d0
    2204:	528a           	addql #1,%a2
    2206:	2f04           	movel %d4,%sp@-
    2208:	2f00           	movel %d0,%sp@-
    220a:	2f03           	movel %d3,%sp@-
    220c:	4878 0020      	pea 20 <R_STOPCNTCMD+0x2>
    2210:	4e93           	jsr %a3@
    for (size_t i = len; i < width; i++) {
    2212:	4fef 0010      	lea %sp@(16),%sp
    2216:	b48a           	cmpl %a2,%d2
    2218:	66e8           	bnes 2202 <_out_rev+0x36>
    }
  }

  // reverse string
  while (len) {
    221a:	b8fc 0000      	cmpaw #0,%a4
    221e:	6726           	beqs 2246 <_out_rev+0x7a>
    2220:	45f4 6800      	lea %a4@(0000000000000000,%d6:l),%a2
    2224:	4df2 2800      	lea %a2@(0000000000000000,%d2:l),%fp
    out(buf[--len], buffer, idx++, maxlen);
    2228:	2f04           	movel %d4,%sp@-
    222a:	200e           	movel %fp,%d0
    222c:	908a           	subl %a2,%d0
    222e:	2f00           	movel %d0,%sp@-
    2230:	2f03           	movel %d3,%sp@-
    2232:	1022           	moveb %a2@-,%d0
    2234:	4880           	extw %d0
    2236:	3040           	moveaw %d0,%a0
    2238:	2f08           	movel %a0,%sp@-
    223a:	4e93           	jsr %a3@
  while (len) {
    223c:	4fef 0010      	lea %sp@(16),%sp
    2240:	b5c6           	cmpal %d6,%a2
    2242:	66e4           	bnes 2228 <_out_rev+0x5c>
    out(buf[--len], buffer, idx++, maxlen);
    2244:	d48c           	addl %a4,%d2
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
    2246:	0805 0001      	btst #1,%d5
    224a:	6720           	beqs 226c <_out_rev+0xa0>
    while (idx - start_idx < width) {
    224c:	2a02           	movel %d2,%d5
    224e:	9a8d           	subl %a5,%d5
    2250:	ba87           	cmpl %d7,%d5
    2252:	6418           	bccs 226c <_out_rev+0xa0>
      out(' ', buffer, idx++, maxlen);
    2254:	2f04           	movel %d4,%sp@-
    2256:	2f02           	movel %d2,%sp@-
    2258:	5282           	addql #1,%d2
    225a:	2f03           	movel %d3,%sp@-
    225c:	4878 0020      	pea 20 <R_STOPCNTCMD+0x2>
    2260:	4e93           	jsr %a3@
    while (idx - start_idx < width) {
    2262:	5285           	addql #1,%d5
    2264:	4fef 0010      	lea %sp@(16),%sp
    2268:	ba87           	cmpl %d7,%d5
    226a:	65e8           	bcss 2254 <_out_rev+0x88>
    }
  }

  return idx;
}
    226c:	2002           	movel %d2,%d0
    226e:	4cdf 7cfc      	moveml %sp@+,%d2-%d7/%a2-%fp
    2272:	4e75           	rts
    2274:	240d           	movel %a5,%d2
    2276:	60a2           	bras 221a <_out_rev+0x4e>

00002278 <_ntoa_long>:
}


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    2278:	4fef ffd4      	lea %sp@(-44),%sp
    227c:	48e7 3f3e      	moveml %d2-%d7/%a2-%fp,%sp@-
    2280:	242f 006c      	movel %sp@(108),%d2
    2284:	262f 0074      	movel %sp@(116),%d3
    2288:	2a2f 0080      	movel %sp@(128),%d5
    228c:	1f6f 0073 0037 	moveb %sp@(115),%sp@(55)
  if (!value) {
    flags &= ~FLAGS_HASH;
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    2292:	2205           	movel %d5,%d1
    2294:	0281 0000 0400 	andil #1024,%d1
    229a:	2f41 002e      	movel %d1,%sp@(46)
  if (!value) {
    229e:	4a82           	tstl %d2
    22a0:	6600 00fa      	bnew 239c <_ntoa_long+0x124>
    flags &= ~FLAGS_HASH;
    22a4:	70ef           	moveq #-17,%d0
    22a6:	c085           	andl %d5,%d0
  if (!(flags & FLAGS_PRECISION) || value) {
    22a8:	4a81           	tstl %d1
    22aa:	6600 0124      	bnew 23d0 <_ntoa_long+0x158>
    22ae:	42af 0032      	clrl %sp@(50)
    flags &= ~FLAGS_HASH;
    22b2:	2a00           	movel %d0,%d5
    22b4:	0805 0005      	btst #5,%d5
    22b8:	6600 00f2      	bnew 23ac <_ntoa_long+0x134>
    22bc:	7c61           	moveq #97,%d6
    22be:	4bef 0038      	lea %sp@(56),%a5
    22c2:	4def 0058      	lea %sp@(88),%fp
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    22c6:	244d           	moveal %a5,%a2
    22c8:	49f9 0000 3598 	lea 3598 <__umodsi3>,%a4
    22ce:	7801           	moveq #1,%d4
    22d0:	988d           	subl %a5,%d4
    22d2:	47f9 0000 350c 	lea 350c <__udivsi3>,%a3
    22d8:	0606 fff6      	addib #-10,%d6
      const char digit = (char)(value % base);
    22dc:	2f03           	movel %d3,%sp@-
    22de:	2f02           	movel %d2,%sp@-
    22e0:	4e94           	jsr %a4@
    22e2:	508f           	addql #8,%sp
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    22e4:	7209           	moveq #9,%d1
    22e6:	b280           	cmpl %d0,%d1
    22e8:	652c           	bcss 2316 <_ntoa_long+0x9e>
    22ea:	0600 0030      	addib #48,%d0
    22ee:	2e04           	movel %d4,%d7
    22f0:	de8a           	addl %a2,%d7
    22f2:	14c0           	moveb %d0,%a2@+
      value /= base;
    22f4:	2f03           	movel %d3,%sp@-
    22f6:	2f02           	movel %d2,%sp@-
    22f8:	4e93           	jsr %a3@
    22fa:	508f           	addql #8,%sp
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    22fc:	b682           	cmpl %d2,%d3
    22fe:	622a           	bhis 232a <_ntoa_long+0xb2>
    2300:	b5ce           	cmpal %fp,%a2
    2302:	6700 01dc      	beqw 24e0 <_ntoa_long+0x268>
      value /= base;
    2306:	2400           	movel %d0,%d2
      const char digit = (char)(value % base);
    2308:	2f03           	movel %d3,%sp@-
    230a:	2f02           	movel %d2,%sp@-
    230c:	4e94           	jsr %a4@
    230e:	508f           	addql #8,%sp
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    2310:	7209           	moveq #9,%d1
    2312:	b280           	cmpl %d0,%d1
    2314:	64d4           	bccs 22ea <_ntoa_long+0x72>
    2316:	d006           	addb %d6,%d0
    2318:	2e04           	movel %d4,%d7
    231a:	de8a           	addl %a2,%d7
    231c:	14c0           	moveb %d0,%a2@+
      value /= base;
    231e:	2f03           	movel %d3,%sp@-
    2320:	2f02           	movel %d2,%sp@-
    2322:	4e93           	jsr %a3@
    2324:	508f           	addql #8,%sp
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    2326:	b682           	cmpl %d2,%d3
    2328:	63d6           	blss 2300 <_ntoa_long+0x88>
  if (!(flags & FLAGS_LEFT)) {
    232a:	0805 0001      	btst #1,%d5
    232e:	6700 00b6      	beqw 23e6 <_ntoa_long+0x16e>
  if (flags & FLAGS_HASH) {
    2332:	4aaf 0032      	tstl %sp@(50)
    2336:	6700 0170      	beqw 24a8 <_ntoa_long+0x230>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    233a:	4aaf 002e      	tstl %sp@(46)
    233e:	6600 0146      	bnew 2486 <_ntoa_long+0x20e>
    2342:	4a87           	tstl %d7
    2344:	6600 0130      	bnew 2476 <_ntoa_long+0x1fe>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2348:	7010           	moveq #16,%d0
    234a:	b083           	cmpl %d3,%d0
    234c:	6700 028a      	beqw 25d8 <_ntoa_long+0x360>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2350:	5583           	subql #2,%d3
    2352:	6700 0316      	beqw 266a <_ntoa_long+0x3f2>
      buf[len++] = '0';
    2356:	1f7c 0030 0038 	moveb #48,%sp@(56)
    235c:	7e01           	moveq #1,%d7
    if (negative) {
    235e:	4a2f 0037      	tstb %sp@(55)
    2362:	6700 018a      	beqw 24ee <_ntoa_long+0x276>
      buf[len++] = '-';
    2366:	1fbc 002d 7838 	moveb #45,%sp@(0000000000000038,%d7:l)
    236c:	5287           	addql #1,%d7
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
    236e:	2f05           	movel %d5,%sp@-
    2370:	2f2f 0080      	movel %sp@(128),%sp@-
    2374:	2f07           	movel %d7,%sp@-
    2376:	2f0d           	movel %a5,%sp@-
    2378:	2f2f 0078      	movel %sp@(120),%sp@-
    237c:	2f2f 0078      	movel %sp@(120),%sp@-
    2380:	2f2f 0078      	movel %sp@(120),%sp@-
    2384:	2f2f 0078      	movel %sp@(120),%sp@-
    2388:	4eb9 0000 21cc 	jsr 21cc <_out_rev>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    238e:	4fef 0020      	lea %sp@(32),%sp
}
    2392:	4cdf 7cfc      	moveml %sp@+,%d2-%d7/%a2-%fp
    2396:	4fef 002c      	lea %sp@(44),%sp
    239a:	4e75           	rts
  if (flags & FLAGS_HASH) {
    239c:	7210           	moveq #16,%d1
    239e:	c285           	andl %d5,%d1
    23a0:	2f41 0032      	movel %d1,%sp@(50)
    23a4:	0805 0005      	btst #5,%d5
    23a8:	6700 ff12      	beqw 22bc <_ntoa_long+0x44>
    23ac:	7c41           	moveq #65,%d6
    23ae:	4bef 0038      	lea %sp@(56),%a5
    23b2:	4def 0058      	lea %sp@(88),%fp
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    23b6:	244d           	moveal %a5,%a2
    23b8:	49f9 0000 3598 	lea 3598 <__umodsi3>,%a4
    23be:	7801           	moveq #1,%d4
    23c0:	988d           	subl %a5,%d4
    23c2:	47f9 0000 350c 	lea 350c <__udivsi3>,%a3
    23c8:	0606 fff6      	addib #-10,%d6
    23cc:	6000 ff0e      	braw 22dc <_ntoa_long+0x64>
  if (!(flags & FLAGS_LEFT)) {
    23d0:	7e02           	moveq #2,%d7
    23d2:	ce85           	andl %d5,%d7
    23d4:	0805 0001      	btst #1,%d5
    23d8:	6600 0176      	bnew 2550 <_ntoa_long+0x2d8>
    23dc:	2a00           	movel %d0,%d5
    23de:	42af 0032      	clrl %sp@(50)
    23e2:	4bef 0038      	lea %sp@(56),%a5
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
    23e6:	7001           	moveq #1,%d0
    23e8:	c085           	andl %d5,%d0
    23ea:	4aaf 007c      	tstl %sp@(124)
    23ee:	6700 0144      	beqw 2534 <_ntoa_long+0x2bc>
    23f2:	4a80           	tstl %d0
    23f4:	6700 0166      	beqw 255c <_ntoa_long+0x2e4>
    23f8:	4a2f 0037      	tstb %sp@(55)
    23fc:	6600 01f6      	bnew 25f4 <_ntoa_long+0x37c>
    2400:	740c           	moveq #12,%d2
    2402:	c485           	andl %d5,%d2
    2404:	6600 01ee      	bnew 25f4 <_ntoa_long+0x37c>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2408:	beaf 0078      	cmpl %sp@(120),%d7
    240c:	6426           	bccs 2434 <_ntoa_long+0x1bc>
    240e:	7220           	moveq #32,%d1
    2410:	b287           	cmpl %d7,%d1
    2412:	6700 0246      	beqw 265a <_ntoa_long+0x3e2>
    2416:	41f5 7800      	lea %a5@(0000000000000000,%d7:l),%a0
    241a:	222f 0078      	movel %sp@(120),%d1
      buf[len++] = '0';
    241e:	5287           	addql #1,%d7
    2420:	10fc 0030      	moveb #48,%a0@+
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2424:	be81           	cmpl %d1,%d7
    2426:	6406           	bccs 242e <_ntoa_long+0x1b6>
    2428:	7420           	moveq #32,%d2
    242a:	b487           	cmpl %d7,%d2
    242c:	66f0           	bnes 241e <_ntoa_long+0x1a6>
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    242e:	4a80           	tstl %d0
    2430:	6700 ff00      	beqw 2332 <_ntoa_long+0xba>
    2434:	beaf 007c      	cmpl %sp@(124),%d7
    2438:	6400 fef8      	bccw 2332 <_ntoa_long+0xba>
    243c:	7020           	moveq #32,%d0
    243e:	b087           	cmpl %d7,%d0
    2440:	6700 0222      	beqw 2664 <_ntoa_long+0x3ec>
    2444:	41f5 7800      	lea %a5@(0000000000000000,%d7:l),%a0
    2448:	226f 007c      	moveal %sp@(124),%a1
    244c:	d3cd           	addal %a5,%a1
    244e:	4def 0058      	lea %sp@(88),%fp
    2452:	7001           	moveq #1,%d0
    2454:	908d           	subl %a5,%d0
      buf[len++] = '0';
    2456:	2e00           	movel %d0,%d7
    2458:	de88           	addl %a0,%d7
    245a:	10fc 0030      	moveb #48,%a0@+
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    245e:	b3c8           	cmpal %a0,%a1
    2460:	6700 fed0      	beqw 2332 <_ntoa_long+0xba>
    2464:	bdc8           	cmpal %a0,%fp
    2466:	66ee           	bnes 2456 <_ntoa_long+0x1de>
  if (flags & FLAGS_HASH) {
    2468:	4aaf 0032      	tstl %sp@(50)
    246c:	6700 ff00      	beqw 236e <_ntoa_long+0xf6>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    2470:	4aaf 002e      	tstl %sp@(46)
    2474:	6610           	bnes 2486 <_ntoa_long+0x20e>
    2476:	beaf 0078      	cmpl %sp@(120),%d7
    247a:	6700 014a      	beqw 25c6 <_ntoa_long+0x34e>
    247e:	beaf 007c      	cmpl %sp@(124),%d7
    2482:	6700 0142      	beqw 25c6 <_ntoa_long+0x34e>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2486:	7410           	moveq #16,%d2
    2488:	b483           	cmpl %d3,%d2
    248a:	6700 0170      	beqw 25fc <_ntoa_long+0x384>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    248e:	5583           	subql #2,%d3
    2490:	6700 011e      	beqw 25b0 <_ntoa_long+0x338>
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    2494:	7420           	moveq #32,%d2
    2496:	b487           	cmpl %d7,%d2
    2498:	6700 fed4      	beqw 236e <_ntoa_long+0xf6>
    249c:	2007           	movel %d7,%d0
      buf[len++] = '0';
    249e:	2e00           	movel %d0,%d7
    24a0:	5287           	addql #1,%d7
    24a2:	1fbc 0030 0838 	moveb #48,%sp@(0000000000000038,%d0:l)
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
    24a8:	7020           	moveq #32,%d0
    24aa:	b087           	cmpl %d7,%d0
    24ac:	6600 feb0      	bnew 235e <_ntoa_long+0xe6>
      buf[len++] = ' ';
    24b0:	7e20           	moveq #32,%d7
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
    24b2:	2f05           	movel %d5,%sp@-
    24b4:	2f2f 0080      	movel %sp@(128),%sp@-
    24b8:	2f07           	movel %d7,%sp@-
    24ba:	2f0d           	movel %a5,%sp@-
    24bc:	2f2f 0078      	movel %sp@(120),%sp@-
    24c0:	2f2f 0078      	movel %sp@(120),%sp@-
    24c4:	2f2f 0078      	movel %sp@(120),%sp@-
    24c8:	2f2f 0078      	movel %sp@(120),%sp@-
    24cc:	4eb9 0000 21cc 	jsr 21cc <_out_rev>
  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    24d2:	4fef 0020      	lea %sp@(32),%sp
}
    24d6:	4cdf 7cfc      	moveml %sp@+,%d2-%d7/%a2-%fp
    24da:	4fef 002c      	lea %sp@(44),%sp
    24de:	4e75           	rts
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    24e0:	7e20           	moveq #32,%d7
  if (!(flags & FLAGS_LEFT)) {
    24e2:	0805 0001      	btst #1,%d5
    24e6:	6600 fe4a      	bnew 2332 <_ntoa_long+0xba>
    24ea:	6000 fefa      	braw 23e6 <_ntoa_long+0x16e>
    else if (flags & FLAGS_PLUS) {
    24ee:	0805 0002      	btst #2,%d5
    24f2:	6600 0086      	bnew 257a <_ntoa_long+0x302>
    else if (flags & FLAGS_SPACE) {
    24f6:	0805 0003      	btst #3,%d5
    24fa:	6700 fe72      	beqw 236e <_ntoa_long+0xf6>
      buf[len++] = ' ';
    24fe:	1fbc 0020 7838 	moveb #32,%sp@(0000000000000038,%d7:l)
    2504:	5287           	addql #1,%d7
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
    2506:	2f05           	movel %d5,%sp@-
    2508:	2f2f 0080      	movel %sp@(128),%sp@-
    250c:	2f07           	movel %d7,%sp@-
    250e:	2f0d           	movel %a5,%sp@-
    2510:	2f2f 0078      	movel %sp@(120),%sp@-
    2514:	2f2f 0078      	movel %sp@(120),%sp@-
    2518:	2f2f 0078      	movel %sp@(120),%sp@-
    251c:	2f2f 0078      	movel %sp@(120),%sp@-
    2520:	4eb9 0000 21cc 	jsr 21cc <_out_rev>
  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    2526:	4fef 0020      	lea %sp@(32),%sp
}
    252a:	4cdf 7cfc      	moveml %sp@+,%d2-%d7/%a2-%fp
    252e:	4fef 002c      	lea %sp@(44),%sp
    2532:	4e75           	rts
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2534:	beaf 0078      	cmpl %sp@(120),%d7
    2538:	6400 fef4      	bccw 242e <_ntoa_long+0x1b6>
    253c:	7420           	moveq #32,%d2
    253e:	b487           	cmpl %d7,%d2
    2540:	6700 feec      	beqw 242e <_ntoa_long+0x1b6>
    2544:	41f5 7800      	lea %a5@(0000000000000000,%d7:l),%a0
    2548:	222f 0078      	movel %sp@(120),%d1
    254c:	6000 fed0      	braw 241e <_ntoa_long+0x1a6>
  if (!(flags & FLAGS_LEFT)) {
    2550:	2a00           	movel %d0,%d5
  size_t len = 0U;
    2552:	7e00           	moveq #0,%d7
    2554:	4bef 0038      	lea %sp@(56),%a5
    2558:	6000 fe04      	braw 235e <_ntoa_long+0xe6>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    255c:	beaf 0078      	cmpl %sp@(120),%d7
    2560:	6400 fdd0      	bccw 2332 <_ntoa_long+0xba>
    2564:	7420           	moveq #32,%d2
    2566:	b487           	cmpl %d7,%d2
    2568:	6600 feac      	bnew 2416 <_ntoa_long+0x19e>
  if (flags & FLAGS_HASH) {
    256c:	4aaf 0032      	tstl %sp@(50)
    2570:	6600 fdc8      	bnew 233a <_ntoa_long+0xc2>
      buf[len++] = ' ';
    2574:	7e20           	moveq #32,%d7
    2576:	6000 ff3a      	braw 24b2 <_ntoa_long+0x23a>
      buf[len++] = '+';  // ignore the space if the '+' exists
    257a:	1fbc 002b 7838 	moveb #43,%sp@(0000000000000038,%d7:l)
    2580:	5287           	addql #1,%d7
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
    2582:	2f05           	movel %d5,%sp@-
    2584:	2f2f 0080      	movel %sp@(128),%sp@-
    2588:	2f07           	movel %d7,%sp@-
    258a:	2f0d           	movel %a5,%sp@-
    258c:	2f2f 0078      	movel %sp@(120),%sp@-
    2590:	2f2f 0078      	movel %sp@(120),%sp@-
    2594:	2f2f 0078      	movel %sp@(120),%sp@-
    2598:	2f2f 0078      	movel %sp@(120),%sp@-
    259c:	4eb9 0000 21cc 	jsr 21cc <_out_rev>
  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    25a2:	4fef 0020      	lea %sp@(32),%sp
}
    25a6:	4cdf 7cfc      	moveml %sp@+,%d2-%d7/%a2-%fp
    25aa:	4fef 002c      	lea %sp@(44),%sp
    25ae:	4e75           	rts
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    25b0:	7220           	moveq #32,%d1
    25b2:	b287           	cmpl %d7,%d1
    25b4:	6700 fdb8      	beqw 236e <_ntoa_long+0xf6>
      buf[len++] = 'b';
    25b8:	41f5 7800      	lea %a5@(0000000000000000,%d7:l),%a0
    25bc:	5287           	addql #1,%d7
    25be:	10bc 0062      	moveb #98,%a0@
    25c2:	6000 fed0      	braw 2494 <_ntoa_long+0x21c>
      len--;
    25c6:	2007           	movel %d7,%d0
    25c8:	5380           	subql #1,%d0
      if (len && (base == 16U)) {
    25ca:	7201           	moveq #1,%d1
    25cc:	b287           	cmpl %d7,%d1
    25ce:	665c           	bnes 262c <_ntoa_long+0x3b4>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    25d0:	7410           	moveq #16,%d2
    25d2:	b483           	cmpl %d3,%d2
    25d4:	6600 fd7a      	bnew 2350 <_ntoa_long+0xd8>
    25d8:	0805 0005      	btst #5,%d5
    25dc:	6666           	bnes 2644 <_ntoa_long+0x3cc>
      buf[len++] = 'x';
    25de:	1f7c 0078 0038 	moveb #120,%sp@(56)
    25e4:	7001           	moveq #1,%d0
      buf[len++] = '0';
    25e6:	2e00           	movel %d0,%d7
    25e8:	5287           	addql #1,%d7
    25ea:	1fbc 0030 0838 	moveb #48,%sp@(0000000000000038,%d0:l)
    25f0:	6000 feb6      	braw 24a8 <_ntoa_long+0x230>
      width--;
    25f4:	53af 007c      	subql #1,%sp@(124)
    25f8:	6000 fe0e      	braw 2408 <_ntoa_long+0x190>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    25fc:	0805 0005      	btst #5,%d5
    2600:	6616           	bnes 2618 <_ntoa_long+0x3a0>
    2602:	7020           	moveq #32,%d0
    2604:	b087           	cmpl %d7,%d0
    2606:	6700 fd66      	beqw 236e <_ntoa_long+0xf6>
      buf[len++] = 'b';
    260a:	41f5 7800      	lea %a5@(0000000000000000,%d7:l),%a0
    260e:	5287           	addql #1,%d7
      buf[len++] = 'x';
    2610:	10bc 0078      	moveb #120,%a0@
    2614:	6000 fe7e      	braw 2494 <_ntoa_long+0x21c>
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2618:	7420           	moveq #32,%d2
    261a:	b487           	cmpl %d7,%d2
    261c:	6700 fd50      	beqw 236e <_ntoa_long+0xf6>
      buf[len++] = 'X';
    2620:	1fbc 0058 7838 	moveb #88,%sp@(0000000000000038,%d7:l)
    2626:	5287           	addql #1,%d7
    2628:	6000 fe6a      	braw 2494 <_ntoa_long+0x21c>
      if (len && (base == 16U)) {
    262c:	7210           	moveq #16,%d1
    262e:	b283           	cmpl %d3,%d1
    2630:	674e           	beqs 2680 <_ntoa_long+0x408>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2632:	5583           	subql #2,%d3
    2634:	6600 fe68      	bnew 249e <_ntoa_long+0x226>
      buf[len++] = 'b';
    2638:	41f5 0800      	lea %a5@(0000000000000000,%d0:l),%a0
    263c:	10bc 0062      	moveb #98,%a0@
    2640:	6000 fe52      	braw 2494 <_ntoa_long+0x21c>
      buf[len++] = 'X';
    2644:	1f7c 0058 0038 	moveb #88,%sp@(56)
    264a:	7001           	moveq #1,%d0
      buf[len++] = '0';
    264c:	2e00           	movel %d0,%d7
    264e:	5287           	addql #1,%d7
    2650:	1fbc 0030 0838 	moveb #48,%sp@(0000000000000038,%d0:l)
    2656:	6000 fe50      	braw 24a8 <_ntoa_long+0x230>
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    265a:	7420           	moveq #32,%d2
    265c:	b4af 007c      	cmpl %sp@(124),%d2
    2660:	6400 fcd0      	bccw 2332 <_ntoa_long+0xba>
      buf[len++] = ' ';
    2664:	7e20           	moveq #32,%d7
    2666:	6000 fe00      	braw 2468 <_ntoa_long+0x1f0>
      buf[len++] = 'b';
    266a:	1f7c 0062 0038 	moveb #98,%sp@(56)
    2670:	7001           	moveq #1,%d0
      buf[len++] = '0';
    2672:	2e00           	movel %d0,%d7
    2674:	5287           	addql #1,%d7
    2676:	1fbc 0030 0838 	moveb #48,%sp@(0000000000000038,%d0:l)
    267c:	6000 fe2a      	braw 24a8 <_ntoa_long+0x230>
        len--;
    2680:	5587           	subql #2,%d7
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2682:	0805 0005      	btst #5,%d5
    2686:	6698           	bnes 2620 <_ntoa_long+0x3a8>
      buf[len++] = 'x';
    2688:	41f5 7800      	lea %a5@(0000000000000000,%d7:l),%a0
    268c:	2e00           	movel %d0,%d7
    268e:	10bc 0078      	moveb #120,%a0@
    2692:	6000 fe00      	braw 2494 <_ntoa_long+0x21c>

00002696 <_out_char>:
{
    2696:	202f 0004      	movel %sp@(4),%d0
  if (character) {
    269a:	4a00           	tstb %d0
    269c:	6602           	bnes 26a0 <_out_char+0xa>
}
    269e:	4e75           	rts
    _putchar(character);
    26a0:	4880           	extw %d0
    26a2:	3040           	moveaw %d0,%a0
    26a4:	2f48 0004      	movel %a0,%sp@(4)
    26a8:	4ef9 0000 34b6 	jmp 34b6 <_putchar>

000026ae <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
    26ae:	4fef ffb4      	lea %sp@(-76),%sp
    26b2:	48e7 3f3e      	moveml %d2-%d7/%a2-%fp,%sp@-
    26b6:	2c6f 007c      	moveal %sp@(124),%fp
    26ba:	2e2f 0080      	movel %sp@(128),%d7
    26be:	2c2f 0084      	movel %sp@(132),%d6
    26c2:	266f 0088      	moveal %sp@(136),%a3
  unsigned int flags, width, precision, n;
  size_t idx = 0U;

  if (!buffer) {
    26c6:	4a87           	tstl %d7
    26c8:	6700 02de      	beqw 29a8 <_vsnprintf+0x2fa>
    // use null output function
    out = _out_null;
  }

  while (*format)
    26cc:	1013           	moveb %a3@,%d0
    26ce:	9bcd           	subal %a5,%a5
    26d0:	4a00           	tstb %d0
    26d2:	6700 02e4      	beqw 29b8 <_vsnprintf+0x30a>
    26d6:	7421           	moveq #33,%d2
    26d8:	7878           	moveq #120,%d4
    26da:	d88f           	addl %sp,%d4
    26dc:	9484           	subl %d4,%d2
    26de:	2f42 003e      	movel %d2,%sp@(62)
    26e2:	262f 008c      	movel %sp@(140),%d3
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
      // no
      out(*format, buffer, idx++, maxlen);
      format++;
    26e6:	528b           	addql #1,%a3
    if (*format != '%') {
    26e8:	0c00 0025      	cmpib #37,%d0
    26ec:	6740           	beqs 272e <_vsnprintf+0x80>
      out(*format, buffer, idx++, maxlen);
    26ee:	240d           	movel %a5,%d2
    26f0:	5282           	addql #1,%d2
    26f2:	2f06           	movel %d6,%sp@-
    26f4:	2f0d           	movel %a5,%sp@-
    26f6:	2f07           	movel %d7,%sp@-
    26f8:	4880           	extw %d0
    26fa:	3040           	moveaw %d0,%a0
    26fc:	2f08           	movel %a0,%sp@-
    26fe:	4e96           	jsr %fp@
      continue;
    2700:	4fef 0010      	lea %sp@(16),%sp
      out(*format, buffer, idx++, maxlen);
    2704:	2a42           	moveal %d2,%a5
  while (*format)
    2706:	1013           	moveb %a3@,%d0
    2708:	66dc           	bnes 26e6 <_vsnprintf+0x38>

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);

  // return written chars without terminating \0
  return (int)idx;
    270a:	240d           	movel %a5,%d2
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    270c:	bbc6           	cmpal %d6,%a5
    270e:	6504           	bcss 2714 <_vsnprintf+0x66>
    2710:	2a46           	moveal %d6,%a5
    2712:	538d           	subql #1,%a5
    2714:	2f06           	movel %d6,%sp@-
    2716:	2f0d           	movel %a5,%sp@-
    2718:	2f07           	movel %d7,%sp@-
    271a:	42a7           	clrl %sp@-
    271c:	4e96           	jsr %fp@
  return (int)idx;
    271e:	4fef 0010      	lea %sp@(16),%sp
}
    2722:	2002           	movel %d2,%d0
    2724:	4cdf 7cfc      	moveml %sp@+,%d2-%d7/%a2-%fp
    2728:	4fef 004c      	lea %sp@(76),%sp
    272c:	4e75           	rts
    flags = 0U;
    272e:	7a00           	moveq #0,%d5
      switch (*format) {
    2730:	247c 0000 2756 	moveal #10070,%a2
    2736:	224b           	moveal %a3,%a1
    2738:	1019           	moveb %a1@+,%d0
    273a:	1200           	moveb %d0,%d1
    273c:	0601 ffe0      	addib #-32,%d1
    2740:	0c01 0010      	cmpib #16,%d1
    2744:	6232           	bhis 2778 <_vsnprintf+0xca>
    2746:	0281 0000 00ff 	andil #255,%d1
    274c:	d281           	addl %d1,%d1
    274e:	3232 1800      	movew %a2@(0000000000000000,%d1:l),%d1
    2752:	4efb 1002      	jmp %pc@(2756 <_vsnprintf+0xa8>,%d1:w)
    2756:	00d0           	.short 0x00d0
    2758:	0022 0022      	orib #34,%a2@-
    275c:	00c6           	.short 0x00c6
    275e:	0022 0022      	orib #34,%a2@-
    2762:	0022 0022      	orib #34,%a2@-
    2766:	0022 0022      	orib #34,%a2@-
    276a:	0022 00bc      	orib #-68,%a2@-
    276e:	0022 00b2      	orib #-78,%a2@-
    2772:	0022 0022      	orib #34,%a2@-
    2776:	00a8 1200 0601 	oril #301991425,%a0@(-48)
    277c:	ffd0 
    if (_is_digit(*format)) {
    277e:	0c01 0009      	cmpib #9,%d1
    2782:	6300 01be      	blsw 2942 <_vsnprintf+0x294>
    else if (*format == '*') {
    2786:	0c00 002a      	cmpib #42,%d0
    278a:	6700 0204      	beqw 2990 <_vsnprintf+0x2e2>
    width = 0U;
    278e:	95ca           	subal %a2,%a2
    if (*format == '.') {
    2790:	0c00 002e      	cmpib #46,%d0
    2794:	6700 0162      	beqw 28f8 <_vsnprintf+0x24a>
    precision = 0U;
    2798:	99cc           	subal %a4,%a4
        format++;
    279a:	2209           	movel %a1,%d1
    switch (*format) {
    279c:	0c00 006c      	cmpib #108,%d0
    27a0:	6700 0186      	beqw 2928 <_vsnprintf+0x27a>
    27a4:	0c00 006c      	cmpib #108,%d0
    27a8:	6e00 0086      	bgtw 2830 <_vsnprintf+0x182>
    27ac:	0c00 0068      	cmpib #104,%d0
    27b0:	6700 0666      	beqw 2e18 <_vsnprintf+0x76a>
    27b4:	0c00 006a      	cmpib #106,%d0
    27b8:	6600 0c54      	bnew 340e <_vsnprintf+0xd60>
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    27bc:	0045 0200      	oriw #512,%d5
        if (*format == 'l') {
    27c0:	102b 0001      	moveb %a3@(1),%d0
        format++;
    27c4:	2641           	moveal %d1,%a3
    27c6:	528b           	addql #1,%a3
    switch (*format) {
    27c8:	0c00 0066      	cmpib #102,%d0
    27cc:	6e7c           	bgts 284a <_vsnprintf+0x19c>
    27ce:	0c00 0045      	cmpib #69,%d0
    27d2:	6e00 00c6      	bgtw 289a <_vsnprintf+0x1ec>
    27d6:	0c00 0025      	cmpib #37,%d0
    27da:	6600 009c      	bnew 2878 <_vsnprintf+0x1ca>
        out('%', buffer, idx++, maxlen);
    27de:	240d           	movel %a5,%d2
    27e0:	5282           	addql #1,%d2
    27e2:	2f06           	movel %d6,%sp@-
    27e4:	2f0d           	movel %a5,%sp@-
    27e6:	2f07           	movel %d7,%sp@-
    27e8:	4878 0025      	pea 25 <R_STOPCNTCMD+0x7>
    27ec:	4e96           	jsr %fp@
        break;
    27ee:	4fef 0010      	lea %sp@(16),%sp
        out('%', buffer, idx++, maxlen);
    27f2:	2a42           	moveal %d2,%a5
  while (*format)
    27f4:	1013           	moveb %a3@,%d0
    27f6:	6600 feee      	bnew 26e6 <_vsnprintf+0x38>
    27fa:	6000 ff0e      	braw 270a <_vsnprintf+0x5c>
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
    27fe:	7001           	moveq #1,%d0
    2800:	8a80           	orl %d0,%d5
      format++;
    2802:	2649           	moveal %a1,%a3
    2804:	6000 ff30      	braw 2736 <_vsnprintf+0x88>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
    2808:	7202           	moveq #2,%d1
    280a:	8a81           	orl %d1,%d5
      format++;
    280c:	2649           	moveal %a1,%a3
    280e:	6000 ff26      	braw 2736 <_vsnprintf+0x88>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
    2812:	7404           	moveq #4,%d2
    2814:	8a82           	orl %d2,%d5
      format++;
    2816:	2649           	moveal %a1,%a3
    2818:	6000 ff1c      	braw 2736 <_vsnprintf+0x88>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
    281c:	7010           	moveq #16,%d0
    281e:	8a80           	orl %d0,%d5
      format++;
    2820:	2649           	moveal %a1,%a3
    2822:	6000 ff12      	braw 2736 <_vsnprintf+0x88>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
    2826:	7808           	moveq #8,%d4
    2828:	8a84           	orl %d4,%d5
      format++;
    282a:	2649           	moveal %a1,%a3
    282c:	6000 ff08      	braw 2736 <_vsnprintf+0x88>
    switch (*format) {
    2830:	0c00 007a      	cmpib #122,%d0
    2834:	6600 0106      	bnew 293c <_vsnprintf+0x28e>
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    2838:	0045 0100      	oriw #256,%d5
        if (*format == 'l') {
    283c:	102b 0001      	moveb %a3@(1),%d0
        format++;
    2840:	2641           	moveal %d1,%a3
    2842:	528b           	addql #1,%a3
    switch (*format) {
    2844:	0c00 0066      	cmpib #102,%d0
    2848:	6f84           	bles 27ce <_vsnprintf+0x120>
    284a:	1200           	moveb %d0,%d1
    284c:	0601 ff97      	addib #-105,%d1
    2850:	0c01 000f      	cmpib #15,%d1
    2854:	6222           	bhis 2878 <_vsnprintf+0x1ca>
    2856:	7800           	moveq #0,%d4
    2858:	1801           	moveb %d1,%d4
    285a:	7401           	moveq #1,%d2
    285c:	e9aa           	lsll %d4,%d2
    285e:	0282 0000 9041 	andil #36929,%d2
    2864:	6600 0804      	bnew 306a <_vsnprintf+0x9bc>
    2868:	0c01 000a      	cmpib #10,%d1
    286c:	6700 05c0      	beqw 2e2e <_vsnprintf+0x780>
    2870:	0c01 0007      	cmpib #7,%d1
    2874:	6700 01f8      	beqw 2a6e <_vsnprintf+0x3c0>
        out(*format, buffer, idx++, maxlen);
    2878:	240d           	movel %a5,%d2
    287a:	5282           	addql #1,%d2
    287c:	2f06           	movel %d6,%sp@-
    287e:	2f0d           	movel %a5,%sp@-
    2880:	2f07           	movel %d7,%sp@-
    switch (*format) {
    2882:	4880           	extw %d0
        out(*format, buffer, idx++, maxlen);
    2884:	3240           	moveaw %d0,%a1
    2886:	2f09           	movel %a1,%sp@-
    2888:	4e96           	jsr %fp@
        break;
    288a:	4fef 0010      	lea %sp@(16),%sp
        out(*format, buffer, idx++, maxlen);
    288e:	2a42           	moveal %d2,%a5
  while (*format)
    2890:	1013           	moveb %a3@,%d0
    2892:	6600 fe52      	bnew 26e6 <_vsnprintf+0x38>
    2896:	6000 fe72      	braw 270a <_vsnprintf+0x5c>
    switch (*format) {
    289a:	1200           	moveb %d0,%d1
    289c:	0601 ffba      	addib #-70,%d1
    28a0:	0c01 0020      	cmpib #32,%d1
    28a4:	62d2           	bhis 2878 <_vsnprintf+0x1ca>
    28a6:	0281 0000 00ff 	andil #255,%d1
    28ac:	d281           	addl %d1,%d1
    28ae:	323b 1806      	movew %pc@(28b6 <_vsnprintf+0x208>,%d1:l),%d1
    28b2:	4efb 1002      	jmp %pc@(28b6 <_vsnprintf+0x208>,%d1:w)
    28b6:	01ee ffc2      	bset %d0,%fp@(-62)
    28ba:	ffc2           	.short 0xffc2
    28bc:	ffc2           	.short 0xffc2
    28be:	ffc2           	.short 0xffc2
    28c0:	ffc2           	.short 0xffc2
    28c2:	ffc2           	.short 0xffc2
    28c4:	ffc2           	.short 0xffc2
    28c6:	ffc2           	.short 0xffc2
    28c8:	ffc2           	.short 0xffc2
    28ca:	ffc2           	.short 0xffc2
    28cc:	ffc2           	.short 0xffc2
    28ce:	ffc2           	.short 0xffc2
    28d0:	ffc2           	.short 0xffc2
    28d2:	ffc2           	.short 0xffc2
    28d4:	ffc2           	.short 0xffc2
    28d6:	ffc2           	.short 0xffc2
    28d8:	ffc2           	.short 0xffc2
    28da:	0124           	btst %d0,%a4@-
    28dc:	ffc2           	.short 0xffc2
    28de:	ffc2           	.short 0xffc2
    28e0:	ffc2           	.short 0xffc2
    28e2:	ffc2           	.short 0xffc2
    28e4:	ffc2           	.short 0xffc2
    28e6:	ffc2           	.short 0xffc2
    28e8:	ffc2           	.short 0xffc2
    28ea:	ffc2           	.short 0xffc2
    28ec:	ffc2           	.short 0xffc2
    28ee:	0124           	btst %d0,%a4@-
    28f0:	050e 0124      	movepw %fp@(292),%d2
    28f4:	ffc2           	.short 0xffc2
    28f6:	01ee 2049      	bset %d0,%fp@(8265)
      flags |= FLAGS_PRECISION;
    28fa:	0045 0400      	oriw #1024,%d5
      if (_is_digit(*format)) {
    28fe:	102b 0001      	moveb %a3@(1),%d0
  return (ch >= '0') && (ch <= '9');
    2902:	1200           	moveb %d0,%d1
    2904:	0601 ffd0      	addib #-48,%d1
      if (_is_digit(*format)) {
    2908:	0c01 0009      	cmpib #9,%d1
    290c:	6300 05c2      	blsw 2ed0 <_vsnprintf+0x822>
      else if (*format == '*') {
    2910:	0c00 002a      	cmpib #42,%d0
    2914:	6700 05ea      	beqw 2f00 <_vsnprintf+0x852>
      format++;
    2918:	2649           	moveal %a1,%a3
    precision = 0U;
    291a:	99cc           	subal %a4,%a4
    291c:	5289           	addql #1,%a1
        format++;
    291e:	2209           	movel %a1,%d1
    switch (*format) {
    2920:	0c00 006c      	cmpib #108,%d0
    2924:	6600 fe7e      	bnew 27a4 <_vsnprintf+0xf6>
        if (*format == 'l') {
    2928:	102b 0001      	moveb %a3@(1),%d0
    292c:	0c00 006c      	cmpib #108,%d0
    2930:	6700 070e      	beqw 3040 <_vsnprintf+0x992>
        flags |= FLAGS_LONG;
    2934:	0045 0100      	oriw #256,%d5
    2938:	6000 fe8a      	braw 27c4 <_vsnprintf+0x116>
        format++;
    293c:	2649           	moveal %a1,%a3
    293e:	6000 ff0a      	braw 284a <_vsnprintf+0x19c>
  unsigned int i = 0U;
    2942:	95ca           	subal %a2,%a2
    2944:	204a           	moveal %a2,%a0
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    2946:	2649           	moveal %a1,%a3
    2948:	45f0 8800      	lea %a0@(0000000000000000,%a0:l),%a2
    294c:	d5ca           	addal %a2,%a2
    294e:	d5c8           	addal %a0,%a2
    2950:	d5ca           	addal %a2,%a2
    2952:	4880           	extw %d0
    2954:	41f2 00d0      	lea %a2@(ffffffffffffffd0,%d0:w),%a0
  while (_is_digit(**str)) {
    2958:	1011           	moveb %a1@,%d0
  return (ch >= '0') && (ch <= '9');
    295a:	1200           	moveb %d0,%d1
    295c:	0601 ffd0      	addib #-48,%d1
  while (_is_digit(**str)) {
    2960:	0c01 0009      	cmpib #9,%d1
    2964:	6222           	bhis 2988 <_vsnprintf+0x2da>
    2966:	5289           	addql #1,%a1
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    2968:	2649           	moveal %a1,%a3
    296a:	45f0 8800      	lea %a0@(0000000000000000,%a0:l),%a2
    296e:	d5ca           	addal %a2,%a2
    2970:	d5c8           	addal %a0,%a2
    2972:	d5ca           	addal %a2,%a2
    2974:	4880           	extw %d0
    2976:	41f2 00d0      	lea %a2@(ffffffffffffffd0,%d0:w),%a0
  while (_is_digit(**str)) {
    297a:	1011           	moveb %a1@,%d0
  return (ch >= '0') && (ch <= '9');
    297c:	1200           	moveb %d0,%d1
    297e:	0601 ffd0      	addib #-48,%d1
  while (_is_digit(**str)) {
    2982:	0c01 0009      	cmpib #9,%d1
    2986:	63de           	blss 2966 <_vsnprintf+0x2b8>
    2988:	2448           	moveal %a0,%a2
    298a:	5289           	addql #1,%a1
    298c:	6000 fe02      	braw 2790 <_vsnprintf+0xe2>
      const int w = va_arg(va, int);
    2990:	2043           	moveal %d3,%a0
    2992:	2458           	moveal %a0@+,%a2
    2994:	2608           	movel %a0,%d3
      if (w < 0) {
    2996:	b4fc 0000      	cmpaw #0,%a2
    299a:	6d28           	blts 29c4 <_vsnprintf+0x316>
    if (*format == '.') {
    299c:	102b 0001      	moveb %a3@(1),%d0
      format++;
    29a0:	2649           	moveal %a1,%a3
    29a2:	5289           	addql #1,%a1
    29a4:	6000 fdea      	braw 2790 <_vsnprintf+0xe2>
    out = _out_null;
    29a8:	4df9 0000 21ca 	lea 21ca <_out_null>,%fp
  while (*format)
    29ae:	1013           	moveb %a3@,%d0
    29b0:	9bcd           	subal %a5,%a5
    29b2:	4a00           	tstb %d0
    29b4:	6600 fd20      	bnew 26d6 <_vsnprintf+0x28>
    29b8:	7400           	moveq #0,%d2
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    29ba:	bbc6           	cmpal %d6,%a5
    29bc:	6500 fd56      	bcsw 2714 <_vsnprintf+0x66>
    29c0:	6000 fd4e      	braw 2710 <_vsnprintf+0x62>
        flags |= FLAGS_LEFT;    // reverse padding
    29c4:	7002           	moveq #2,%d0
    29c6:	8a80           	orl %d0,%d5
        width = (unsigned int)-w;
    29c8:	220a           	movel %a2,%d1
    29ca:	4481           	negl %d1
    29cc:	2441           	moveal %d1,%a2
    if (*format == '.') {
    29ce:	102b 0001      	moveb %a3@(1),%d0
      format++;
    29d2:	2649           	moveal %a1,%a3
    29d4:	5289           	addql #1,%a1
    29d6:	6000 fdb8      	braw 2790 <_vsnprintf+0xe2>
        if (*format == 'x' || *format == 'X') {
    29da:	0c00 0062      	cmpib #98,%d0
    29de:	6700 060e      	beqw 2fee <_vsnprintf+0x940>
    29e2:	0c00 006f      	cmpib #111,%d0
    29e6:	6700 05be      	beqw 2fa6 <_vsnprintf+0x8f8>
    29ea:	0c00 0058      	cmpib #88,%d0
    29ee:	6700 0554      	beqw 2f44 <_vsnprintf+0x896>
          flags &= ~FLAGS_HASH;   // no hash for dec format
    29f2:	72ef           	moveq #-17,%d1
    29f4:	ca81           	andl %d1,%d5
          base = 10U;
    29f6:	327c 000a      	moveaw #10,%a1
        if (flags & FLAGS_PRECISION) {
    29fa:	2405           	movel %d5,%d2
    29fc:	0282 0000 0400 	andil #1024,%d2
        if ((*format != 'i') && (*format != 'd')) {
    2a02:	0c00 0069      	cmpib #105,%d0
    2a06:	6600 071c      	bnew 3124 <_vsnprintf+0xa76>
        if (flags & FLAGS_PRECISION) {
    2a0a:	4a82           	tstl %d2
    2a0c:	6600 0592      	bnew 2fa0 <_vsnprintf+0x8f2>
          if (flags & FLAGS_LONG_LONG) {
    2a10:	0805 0009      	btst #9,%d5
    2a14:	6600 fcf0      	bnew 2706 <_vsnprintf+0x58>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    2a18:	2403           	movel %d3,%d2
    2a1a:	5882           	addql #4,%d2
            const long value = va_arg(va, long);
    2a1c:	2043           	moveal %d3,%a0
    2a1e:	2010           	movel %a0@,%d0
          else if (flags & FLAGS_LONG) {
    2a20:	0805 0008      	btst #8,%d5
    2a24:	660e           	bnes 2a34 <_vsnprintf+0x386>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    2a26:	0805 0006      	btst #6,%d5
    2a2a:	6600 0772      	bnew 319e <_vsnprintf+0xaf0>
    2a2e:	4a05           	tstb %d5
    2a30:	6a02           	bpls 2a34 <_vsnprintf+0x386>
    2a32:	48c0           	extl %d0
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    2a34:	2f05           	movel %d5,%sp@-
    2a36:	2f0a           	movel %a2,%sp@-
    2a38:	2f0c           	movel %a4,%sp@-
    2a3a:	2f09           	movel %a1,%sp@-
    2a3c:	2200           	movel %d0,%d1
    2a3e:	d281           	addl %d1,%d1
    2a40:	9381           	subxl %d1,%d1
    2a42:	4481           	negl %d1
    2a44:	2f01           	movel %d1,%sp@-
    2a46:	4a80           	tstl %d0
    2a48:	6d00 0738      	bltw 3182 <_vsnprintf+0xad4>
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    2a4c:	2f00           	movel %d0,%sp@-
    2a4e:	2f06           	movel %d6,%sp@-
    2a50:	2f0d           	movel %a5,%sp@-
    2a52:	2f07           	movel %d7,%sp@-
    2a54:	2f0e           	movel %fp,%sp@-
    2a56:	4eb9 0000 2278 	jsr 2278 <_ntoa_long>
    2a5c:	2a40           	moveal %d0,%a5
    2a5e:	4fef 0028      	lea %sp@(40),%sp
    2a62:	2602           	movel %d2,%d3
  while (*format)
    2a64:	1013           	moveb %a3@,%d0
    2a66:	6600 fc7e      	bnew 26e6 <_vsnprintf+0x38>
    2a6a:	6000 fc9e      	braw 270a <_vsnprintf+0x5c>
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
    2a6e:	7021           	moveq #33,%d0
    2a70:	8085           	orl %d5,%d0
    2a72:	2f00           	movel %d0,%sp@-
    2a74:	4878 0008      	pea 8 <DIVIDE_BY_ZERO>
    2a78:	2f0c           	movel %a4,%sp@-
    2a7a:	4878 0010      	pea 10 <DUART_MR1B>
    2a7e:	42a7           	clrl %sp@-
    2a80:	2043           	moveal %d3,%a0
    2a82:	2f18           	movel %a0@+,%sp@-
    2a84:	2608           	movel %a0,%d3
    2a86:	2f06           	movel %d6,%sp@-
    2a88:	2f0d           	movel %a5,%sp@-
    2a8a:	2f07           	movel %d7,%sp@-
    2a8c:	2f0e           	movel %fp,%sp@-
    2a8e:	4eb9 0000 2278 	jsr 2278 <_ntoa_long>
    2a94:	2a40           	moveal %d0,%a5
        break;
    2a96:	4fef 0028      	lea %sp@(40),%sp
  while (*format)
    2a9a:	1013           	moveb %a3@,%d0
    2a9c:	6600 fc48      	bnew 26e6 <_vsnprintf+0x38>
    2aa0:	6000 fc68      	braw 270a <_vsnprintf+0x5c>
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
    2aa4:	0c00 0046      	cmpib #70,%d0
    2aa8:	6700 0482      	beqw 2f2c <_vsnprintf+0x87e>
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
    2aac:	2f43 003a      	movel %d3,%sp@(58)
    2ab0:	2043           	moveal %d3,%a0
    2ab2:	50af 003a      	addql #8,%sp@(58)
    2ab6:	2f58 0032      	movel %a0@+,%sp@(50)
    2aba:	2f58 0036      	movel %a0@+,%sp@(54)
  if (value != value)
    2abe:	2f2f 0036      	movel %sp@(54),%sp@-
    2ac2:	2f2f 0036      	movel %sp@(54),%sp@-
    2ac6:	2f2f 003e      	movel %sp@(62),%sp@-
    2aca:	2f2f 003e      	movel %sp@(62),%sp@-
    2ace:	4eb9 0000 4030 	jsr 4030 <__nedf2>
    2ad4:	4fef 0010      	lea %sp@(16),%sp
    2ad8:	4a80           	tstl %d0
    2ada:	6600 065a      	bnew 3136 <_vsnprintf+0xa88>
  if (value < -DBL_MAX)
    2ade:	4878 ffff      	pea ffffffff <LESS+0x0>
    2ae2:	2f3c ffef ffff 	movel #-1048577,%sp@-
    2ae8:	2f2f 003e      	movel %sp@(62),%sp@-
    2aec:	2f2f 003e      	movel %sp@(62),%sp@-
    2af0:	4eb9 0000 4078 	jsr 4078 <__ltdf2>
    2af6:	4fef 0010      	lea %sp@(16),%sp
    2afa:	4a80           	tstl %d0
    2afc:	6d00 065e      	bltw 315c <_vsnprintf+0xaae>
  if (value > DBL_MAX)
    2b00:	4878 ffff      	pea ffffffff <LESS+0x0>
    2b04:	2f3c 7fef ffff 	movel #2146435071,%sp@-
    2b0a:	2f2f 003e      	movel %sp@(62),%sp@-
    2b0e:	2f2f 003e      	movel %sp@(62),%sp@-
    2b12:	4eb9 0000 4054 	jsr 4054 <__gtdf2>
    2b18:	4fef 0010      	lea %sp@(16),%sp
    2b1c:	4a80           	tstl %d0
    2b1e:	6e00 049e      	bgtw 2fbe <_vsnprintf+0x910>
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
    2b22:	42a7           	clrl %sp@-
    2b24:	2f3c 41cd cd65 	movel #1104006501,%sp@-
    2b2a:	2f2f 003e      	movel %sp@(62),%sp@-
    2b2e:	2f2f 003e      	movel %sp@(62),%sp@-
    2b32:	4eb9 0000 4054 	jsr 4054 <__gtdf2>
    2b38:	4fef 0010      	lea %sp@(16),%sp
    2b3c:	4a80           	tstl %d0
    2b3e:	6e00 05da      	bgtw 311a <_vsnprintf+0xa6c>
    2b42:	42a7           	clrl %sp@-
    2b44:	2f3c c1cd cd65 	movel #-1043477147,%sp@-
    2b4a:	2f2f 003e      	movel %sp@(62),%sp@-
    2b4e:	2f2f 003e      	movel %sp@(62),%sp@-
    2b52:	4eb9 0000 4078 	jsr 4078 <__ltdf2>
    2b58:	4fef 0010      	lea %sp@(16),%sp
    2b5c:	4a80           	tstl %d0
    2b5e:	6d00 05ba      	bltw 311a <_vsnprintf+0xa6c>
  if (value < 0) {
    2b62:	4282           	clrl %d2
    2b64:	4283           	clrl %d3
    2b66:	2f03           	movel %d3,%sp@-
    2b68:	2f02           	movel %d2,%sp@-
    2b6a:	2f2f 003e      	movel %sp@(62),%sp@-
    2b6e:	2f2f 003e      	movel %sp@(62),%sp@-
    2b72:	4eb9 0000 4078 	jsr 4078 <__ltdf2>
    2b78:	4fef 0010      	lea %sp@(16),%sp
    2b7c:	4a80           	tstl %d0
    2b7e:	6d00 063c      	bltw 31bc <_vsnprintf+0xb0e>
  bool negative = false;
    2b82:	422f 0057      	clrb %sp@(87)
    2b86:	2f7c 0000 3652 	movel #13906,%sp@(74)
    2b8c:	004a 
  if (!(flags & FLAGS_PRECISION)) {
    2b8e:	0805 000a      	btst #10,%d5
    2b92:	6604           	bnes 2b98 <_vsnprintf+0x4ea>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
    2b94:	387c 0006      	moveaw #6,%a4
    2b98:	70e0           	moveq #-32,%d0
    2b9a:	d08c           	addl %a4,%d0
    2b9c:	43ef 0058      	lea %sp@(88),%a1
    2ba0:	280c           	movel %a4,%d4
    2ba2:	204c           	moveal %a4,%a0
    2ba4:	91c4           	subal %d4,%a0
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    2ba6:	7209           	moveq #9,%d1
    2ba8:	b284           	cmpl %d4,%d1
    2baa:	640e           	bccs 2bba <_vsnprintf+0x50c>
    buf[len++] = '0';
    2bac:	12fc 0030      	moveb #48,%a1@+
    prec--;
    2bb0:	5384           	subql #1,%d4
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    2bb2:	b880           	cmpl %d0,%d4
    2bb4:	66ec           	bnes 2ba2 <_vsnprintf+0x4f4>
    2bb6:	307c 0020      	moveaw #32,%a0
  int whole = (int)value;
    2bba:	2f2f 0036      	movel %sp@(54),%sp@-
    2bbe:	2f2f 0036      	movel %sp@(54),%sp@-
    2bc2:	2f48 0036      	movel %a0,%sp@(54)
    2bc6:	4eb9 0000 453a 	jsr 453a <__fixdfsi>
    2bcc:	508f           	addql #8,%sp
    2bce:	2400           	movel %d0,%d2
  double tmp = (value - whole) * pow10[prec];
    2bd0:	43f9 0000 46ec 	lea 46ec <pow10.0>,%a1
    2bd6:	2004           	movel %d4,%d0
    2bd8:	e788           	lsll #3,%d0
    2bda:	2f71 0800 004e 	movel %a1@(0000000000000000,%d0:l),%sp@(78)
    2be0:	2f71 0804 0052 	movel %a1@(0000000000000004,%d0:l),%sp@(82)
    2be6:	2f02           	movel %d2,%sp@-
    2be8:	4eb9 0000 4312 	jsr 4312 <__floatsidf>
    2bee:	2e81           	movel %d1,%sp@
    2bf0:	2f00           	movel %d0,%sp@-
    2bf2:	2f2f 003e      	movel %sp@(62),%sp@-
    2bf6:	2f2f 003e      	movel %sp@(62),%sp@-
    2bfa:	226f 005a      	moveal %sp@(90),%a1
    2bfe:	4e91           	jsr %a1@
    2c00:	4fef 0010      	lea %sp@(16),%sp
    2c04:	2f2f 0052      	movel %sp@(82),%sp@-
    2c08:	2f2f 0052      	movel %sp@(82),%sp@-
    2c0c:	2f01           	movel %d1,%sp@-
    2c0e:	2f00           	movel %d0,%sp@-
    2c10:	4eb9 0000 39ee 	jsr 39ee <__muldf3>
    2c16:	4fef 0010      	lea %sp@(16),%sp
    2c1a:	2240           	moveal %d0,%a1
    2c1c:	2009           	movel %a1,%d0
    2c1e:	2f40 0042      	movel %d0,%sp@(66)
    2c22:	2f41 0046      	movel %d1,%sp@(70)
  unsigned long frac = (unsigned long)tmp;
    2c26:	2f01           	movel %d1,%sp@-
    2c28:	2f09           	movel %a1,%sp@-
    2c2a:	4eb9 0000 40c0 	jsr 40c0 <__fixunsdfsi>
    2c30:	508f           	addql #8,%sp
    2c32:	2600           	movel %d0,%d3
  diff = tmp - frac;
    2c34:	49f9 0000 429c 	lea 429c <__floatunsidf>,%a4
    2c3a:	2f00           	movel %d0,%sp@-
    2c3c:	4e94           	jsr %a4@
    2c3e:	2e81           	movel %d1,%sp@
    2c40:	2f00           	movel %d0,%sp@-
    2c42:	2f2f 004e      	movel %sp@(78),%sp@-
    2c46:	2f2f 004e      	movel %sp@(78),%sp@-
    2c4a:	226f 005a      	moveal %sp@(90),%a1
    2c4e:	4e91           	jsr %a1@
    2c50:	4fef 0010      	lea %sp@(16),%sp
    2c54:	2f40 0042      	movel %d0,%sp@(66)
    2c58:	2f41 0046      	movel %d1,%sp@(70)
  if (diff > 0.5) {
    2c5c:	42a7           	clrl %sp@-
    2c5e:	2f3c 3fe0 0000 	movel #1071644672,%sp@-
    2c64:	2f2f 004e      	movel %sp@(78),%sp@-
    2c68:	2f2f 004e      	movel %sp@(78),%sp@-
    2c6c:	4eb9 0000 4054 	jsr 4054 <__gtdf2>
    2c72:	4fef 0010      	lea %sp@(16),%sp
    2c76:	206f 002e      	moveal %sp@(46),%a0
    2c7a:	4a80           	tstl %d0
    2c7c:	6f00 0600      	blew 327e <_vsnprintf+0xbd0>
    ++frac;
    2c80:	5283           	addql #1,%d3
    if (frac >= pow10[prec]) {
    2c82:	2f03           	movel %d3,%sp@-
    2c84:	4e94           	jsr %a4@
    2c86:	2e81           	movel %d1,%sp@
    2c88:	2f00           	movel %d0,%sp@-
    2c8a:	2f2f 005a      	movel %sp@(90),%sp@-
    2c8e:	2f2f 005a      	movel %sp@(90),%sp@-
    2c92:	4eb9 0000 409c 	jsr 409c <__ledf2>
    2c98:	4fef 0010      	lea %sp@(16),%sp
    2c9c:	206f 002e      	moveal %sp@(46),%a0
    2ca0:	4a80           	tstl %d0
    2ca2:	6e04           	bgts 2ca8 <_vsnprintf+0x5fa>
      ++whole;
    2ca4:	5282           	addql #1,%d2
      frac = 0;
    2ca6:	7600           	moveq #0,%d3
  if (prec == 0U) {
    2ca8:	4a84           	tstl %d4
    2caa:	6600 0574      	bnew 3220 <_vsnprintf+0xb72>
    diff = value - (double)whole;
    2cae:	2f02           	movel %d2,%sp@-
    2cb0:	2f48 0032      	movel %a0,%sp@(50)
    2cb4:	4eb9 0000 4312 	jsr 4312 <__floatsidf>
    2cba:	2e81           	movel %d1,%sp@
    2cbc:	2f00           	movel %d0,%sp@-
    2cbe:	2f2f 003e      	movel %sp@(62),%sp@-
    2cc2:	2f2f 003e      	movel %sp@(62),%sp@-
    2cc6:	226f 005a      	moveal %sp@(90),%a1
    2cca:	4e91           	jsr %a1@
    2ccc:	4fef 0010      	lea %sp@(16),%sp
    2cd0:	2600           	movel %d0,%d3
    2cd2:	2801           	movel %d1,%d4
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
    2cd4:	42a7           	clrl %sp@-
    2cd6:	2f3c 3fe0 0000 	movel #1071644672,%sp@-
    2cdc:	2f01           	movel %d1,%sp@-
    2cde:	2f03           	movel %d3,%sp@-
    2ce0:	4eb9 0000 4078 	jsr 4078 <__ltdf2>
    2ce6:	4fef 0010      	lea %sp@(16),%sp
    2cea:	206f 002e      	moveal %sp@(46),%a0
    2cee:	4a80           	tstl %d0
    2cf0:	6c22           	bges 2d14 <_vsnprintf+0x666>
    2cf2:	42a7           	clrl %sp@-
    2cf4:	2f3c 3fe0 0000 	movel #1071644672,%sp@-
    2cfa:	2f04           	movel %d4,%sp@-
    2cfc:	2f03           	movel %d3,%sp@-
    2cfe:	2f48 003e      	movel %a0,%sp@(62)
    2d02:	4eb9 0000 4054 	jsr 4054 <__gtdf2>
    2d08:	4fef 0010      	lea %sp@(16),%sp
    2d0c:	206f 002e      	moveal %sp@(46),%a0
    2d10:	4a80           	tstl %d0
    2d12:	6f08           	bles 2d1c <_vsnprintf+0x66e>
    2d14:	0802 0000      	btst #0,%d2
    2d18:	6702           	beqs 2d1c <_vsnprintf+0x66e>
      ++whole;
    2d1a:	5282           	addql #1,%d2
    2d1c:	49ef 0058      	lea %sp@(88),%a4
    2d20:	d9c8           	addal %a0,%a4
    2d22:	7658           	moveq #88,%d3
    2d24:	d68f           	addl %sp,%d3
    2d26:	7020           	moveq #32,%d0
    2d28:	d680           	addl %d0,%d3
    if (!(whole /= 10)) {
    2d2a:	283c 0000 3568 	movel #13672,%d4
    2d30:	2f45 0032      	movel %d5,%sp@(50)
    2d34:	2f46 0042      	movel %d6,%sp@(66)
    2d38:	2c02           	movel %d2,%d6
    2d3a:	2a2f 003e      	movel %sp@(62),%d5
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    2d3e:	b9c3           	cmpal %d3,%a4
    2d40:	6700 05f4      	beqw 3336 <_vsnprintf+0xc88>
    buf[len++] = (char)(48 + (whole % 10));
    2d44:	2405           	movel %d5,%d2
    2d46:	d48c           	addl %a4,%d2
    2d48:	4878 000a      	pea a <DUART_IMR>
    2d4c:	2f06           	movel %d6,%sp@-
    2d4e:	4eb9 0000 35c8 	jsr 35c8 <__modsi3>
    2d54:	508f           	addql #8,%sp
    2d56:	0600 0030      	addib #48,%d0
    2d5a:	18c0           	moveb %d0,%a4@+
    if (!(whole /= 10)) {
    2d5c:	4878 000a      	pea a <DUART_IMR>
    2d60:	2f06           	movel %d6,%sp@-
    2d62:	2044           	moveal %d4,%a0
    2d64:	4e90           	jsr %a0@
    2d66:	508f           	addql #8,%sp
    2d68:	2c00           	movel %d0,%d6
    2d6a:	66d2           	bnes 2d3e <_vsnprintf+0x690>
    2d6c:	2a2f 0032      	movel %sp@(50),%d5
    2d70:	2c2f 0042      	movel %sp@(66),%d6
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
    2d74:	7003           	moveq #3,%d0
    2d76:	c085           	andl %d5,%d0
    2d78:	5380           	subql #1,%d0
    2d7a:	6700 0698      	beqw 3414 <_vsnprintf+0xd66>
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
    2d7e:	7820           	moveq #32,%d4
    2d80:	b882           	cmpl %d2,%d4
    2d82:	6700 0584      	beqw 3308 <_vsnprintf+0xc5a>
      buf[len++] = '-';
    2d86:	2002           	movel %d2,%d0
    if (negative) {
    2d88:	4a2f 0057      	tstb %sp@(87)
    2d8c:	6700 058a      	beqw 3318 <_vsnprintf+0xc6a>
      buf[len++] = '-';
    2d90:	5280           	addql #1,%d0
    2d92:	1fbc 002d 2858 	moveb #45,%sp@(0000000000000058,%d2:l)
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
    2d98:	2f05           	movel %d5,%sp@-
    2d9a:	2f0a           	movel %a2,%sp@-
    2d9c:	2f00           	movel %d0,%sp@-
    2d9e:	486f 0064      	pea %sp@(100)
    2da2:	2f06           	movel %d6,%sp@-
    2da4:	2f0d           	movel %a5,%sp@-
    2da6:	2f07           	movel %d7,%sp@-
    2da8:	2f0e           	movel %fp,%sp@-
    2daa:	4eb9 0000 21cc 	jsr 21cc <_out_rev>
    2db0:	2a40           	moveal %d0,%a5
    2db2:	4fef 0020      	lea %sp@(32),%sp
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
    2db6:	262f 003a      	movel %sp@(58),%d3
  while (*format)
    2dba:	1013           	moveb %a3@,%d0
    2dbc:	6600 f928      	bnew 26e6 <_vsnprintf+0x38>
    2dc0:	6000 f948      	braw 270a <_vsnprintf+0x5c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    2dc4:	2803           	movel %d3,%d4
    2dc6:	5884           	addql #4,%d4
        if (!(flags & FLAGS_LEFT)) {
    2dc8:	0805 0001      	btst #1,%d5
    2dcc:	6700 0308      	beqw 30d6 <_vsnprintf+0xa28>
      out(*format, buffer, idx++, maxlen);
    2dd0:	240d           	movel %a5,%d2
    2dd2:	5282           	addql #1,%d2
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    2dd4:	2f06           	movel %d6,%sp@-
    2dd6:	2f0d           	movel %a5,%sp@-
    2dd8:	2f07           	movel %d7,%sp@-
    2dda:	2043           	moveal %d3,%a0
    2ddc:	2010           	movel %a0@,%d0
    2dde:	4880           	extw %d0
    2de0:	3240           	moveaw %d0,%a1
    2de2:	2f09           	movel %a1,%sp@-
    2de4:	4e96           	jsr %fp@
          while (l++ < width) {
    2de6:	4fef 0010      	lea %sp@(16),%sp
    2dea:	dbca           	addal %a2,%a5
    2dec:	7001           	moveq #1,%d0
    2dee:	b08a           	cmpl %a2,%d0
    2df0:	6400 0426      	bccw 3218 <_vsnprintf+0xb6a>
            out(' ', buffer, idx++, maxlen);
    2df4:	2002           	movel %d2,%d0
    2df6:	5282           	addql #1,%d2
    2df8:	2f06           	movel %d6,%sp@-
    2dfa:	2f00           	movel %d0,%sp@-
    2dfc:	2f07           	movel %d7,%sp@-
    2dfe:	4878 0020      	pea 20 <R_STOPCNTCMD+0x2>
    2e02:	4e96           	jsr %fp@
          while (l++ < width) {
    2e04:	4fef 0010      	lea %sp@(16),%sp
    2e08:	b48d           	cmpl %a5,%d2
    2e0a:	66e8           	bnes 2df4 <_vsnprintf+0x746>
        break;
    2e0c:	2604           	movel %d4,%d3
  while (*format)
    2e0e:	1013           	moveb %a3@,%d0
    2e10:	6600 f8d4      	bnew 26e6 <_vsnprintf+0x38>
    2e14:	6000 f8f4      	braw 270a <_vsnprintf+0x5c>
        if (*format == 'h') {
    2e18:	102b 0001      	moveb %a3@(1),%d0
    2e1c:	0c00 0068      	cmpib #104,%d0
    2e20:	6700 022e      	beqw 3050 <_vsnprintf+0x9a2>
        flags |= FLAGS_SHORT;
    2e24:	747f           	moveq #127,%d2
    2e26:	4602           	notb %d2
    2e28:	8a82           	orl %d2,%d5
    2e2a:	6000 f998      	braw 27c4 <_vsnprintf+0x116>
        const char* p = va_arg(va, char*);
    2e2e:	2f43 0032      	movel %d3,%sp@(50)
    2e32:	2043           	moveal %d3,%a0
    2e34:	58af 0032      	addql #4,%sp@(50)
    2e38:	2618           	movel %a0@+,%d3
  for (s = str; *s && maxsize--; ++s);
    2e3a:	2243           	moveal %d3,%a1
    2e3c:	1211           	moveb %a1@,%d1
    2e3e:	1001           	moveb %d1,%d0
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
    2e40:	b8fc 0000      	cmpaw #0,%a4
    2e44:	6700 00d4      	beqw 2f1a <_vsnprintf+0x86c>
  for (s = str; *s && maxsize--; ++s);
    2e48:	4a01           	tstb %d1
    2e4a:	671a           	beqs 2e66 <_vsnprintf+0x7b8>
    2e4c:	280c           	movel %a4,%d4
    2e4e:	5384           	subql #1,%d4
    2e50:	2243           	moveal %d3,%a1
    2e52:	41f1 4801      	lea %a1@(0000000000000001,%d4:l),%a0
    2e56:	5289           	addql #1,%a1
    2e58:	4a11           	tstb %a1@
    2e5a:	6700 0206      	beqw 3062 <_vsnprintf+0x9b4>
    2e5e:	b3c8           	cmpal %a0,%a1
    2e60:	66f4           	bnes 2e56 <_vsnprintf+0x7a8>
  return (unsigned int)(s - str);
    2e62:	2408           	movel %a0,%d2
    2e64:	9483           	subl %d3,%d2
        if (flags & FLAGS_PRECISION) {
    2e66:	2805           	movel %d5,%d4
    2e68:	0284 0000 0400 	andil #1024,%d4
    2e6e:	2244           	moveal %d4,%a1
    2e70:	0805 000a      	btst #10,%d5
    2e74:	6706           	beqs 2e7c <_vsnprintf+0x7ce>
          l = (l < precision ? l : precision);
    2e76:	b9c2           	cmpal %d2,%a4
    2e78:	6402           	bccs 2e7c <_vsnprintf+0x7ce>
    2e7a:	240c           	movel %a4,%d2
        if (!(flags & FLAGS_LEFT)) {
    2e7c:	7802           	moveq #2,%d4
    2e7e:	c885           	andl %d5,%d4
    2e80:	2f44 003a      	movel %d4,%sp@(58)
    2e84:	0805 0001      	btst #1,%d5
    2e88:	6700 0202      	beqw 308c <_vsnprintf+0x9de>
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    2e8c:	4a01           	tstb %d1
    2e8e:	6700 017e      	beqw 300e <_vsnprintf+0x960>
          out(*(p++), buffer, idx++, maxlen);
    2e92:	220d           	movel %a5,%d1
    2e94:	2809           	movel %a1,%d4
    2e96:	204a           	moveal %a2,%a0
    2e98:	244c           	moveal %a4,%a2
    2e9a:	2843           	moveal %d3,%a4
    2e9c:	2608           	movel %a0,%d3
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    2e9e:	4a84           	tstl %d4
    2ea0:	670e           	beqs 2eb0 <_vsnprintf+0x802>
    2ea2:	41ea ffff      	lea %a2@(-1),%a0
    2ea6:	b4fc 0000      	cmpaw #0,%a2
    2eaa:	6700 015a      	beqw 3006 <_vsnprintf+0x958>
    2eae:	2448           	moveal %a0,%a2
          out(*(p++), buffer, idx++, maxlen);
    2eb0:	528d           	addql #1,%a5
    2eb2:	528c           	addql #1,%a4
    2eb4:	2f06           	movel %d6,%sp@-
    2eb6:	2f01           	movel %d1,%sp@-
    2eb8:	2f07           	movel %d7,%sp@-
    2eba:	4880           	extw %d0
    2ebc:	3040           	moveaw %d0,%a0
    2ebe:	2f08           	movel %a0,%sp@-
    2ec0:	4e96           	jsr %fp@
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    2ec2:	1014           	moveb %a4@,%d0
    2ec4:	4fef 0010      	lea %sp@(16),%sp
    2ec8:	6700 013c      	beqw 3006 <_vsnprintf+0x958>
          out(*(p++), buffer, idx++, maxlen);
    2ecc:	220d           	movel %a5,%d1
    2ece:	60ce           	bras 2e9e <_vsnprintf+0x7f0>
  unsigned int i = 0U;
    2ed0:	99cc           	subal %a4,%a4
    2ed2:	224c           	moveal %a4,%a1
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    2ed4:	5288           	addql #1,%a0
    2ed6:	49f1 9800      	lea %a1@(0000000000000000,%a1:l),%a4
    2eda:	d9cc           	addal %a4,%a4
    2edc:	d9c9           	addal %a1,%a4
    2ede:	d9cc           	addal %a4,%a4
    2ee0:	4880           	extw %d0
    2ee2:	43f4 00d0      	lea %a4@(ffffffffffffffd0,%d0:w),%a1
  while (_is_digit(**str)) {
    2ee6:	1010           	moveb %a0@,%d0
  return (ch >= '0') && (ch <= '9');
    2ee8:	1200           	moveb %d0,%d1
    2eea:	0601 ffd0      	addib #-48,%d1
  while (_is_digit(**str)) {
    2eee:	0c01 0009      	cmpib #9,%d1
    2ef2:	63e0           	blss 2ed4 <_vsnprintf+0x826>
    2ef4:	2849           	moveal %a1,%a4
    2ef6:	2648           	moveal %a0,%a3
    2ef8:	43e8 0001      	lea %a0@(1),%a1
    2efc:	6000 f89c      	braw 279a <_vsnprintf+0xec>
        precision = prec > 0 ? (unsigned int)prec : 0U;
    2f00:	2043           	moveal %d3,%a0
    2f02:	2858           	moveal %a0@+,%a4
    2f04:	2608           	movel %a0,%d3
    2f06:	b8fc 0000      	cmpaw #0,%a4
    2f0a:	6d28           	blts 2f34 <_vsnprintf+0x886>
    switch (*format) {
    2f0c:	102b 0002      	moveb %a3@(2),%d0
        format++;
    2f10:	548b           	addql #2,%a3
    2f12:	43eb 0001      	lea %a3@(1),%a1
    2f16:	6000 f882      	braw 279a <_vsnprintf+0xec>
  for (s = str; *s && maxsize--; ++s);
    2f1a:	78fe           	moveq #-2,%d4
    2f1c:	4a01           	tstb %d1
    2f1e:	6700 ff46      	beqw 2e66 <_vsnprintf+0x7b8>
    2f22:	2243           	moveal %d3,%a1
    2f24:	41f1 4801      	lea %a1@(0000000000000001,%d4:l),%a0
    2f28:	6000 ff2c      	braw 2e56 <_vsnprintf+0x7a8>
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
    2f2c:	7020           	moveq #32,%d0
    2f2e:	8a80           	orl %d0,%d5
    2f30:	6000 fb7a      	braw 2aac <_vsnprintf+0x3fe>
        precision = prec > 0 ? (unsigned int)prec : 0U;
    2f34:	99cc           	subal %a4,%a4
    switch (*format) {
    2f36:	102b 0002      	moveb %a3@(2),%d0
        format++;
    2f3a:	548b           	addql #2,%a3
    2f3c:	43eb 0001      	lea %a3@(1),%a1
    2f40:	6000 f858      	braw 279a <_vsnprintf+0xec>
          flags |= FLAGS_UPPERCASE;
    2f44:	7420           	moveq #32,%d2
    2f46:	8a82           	orl %d2,%d5
    2f48:	327c 0010      	moveaw #16,%a1
    2f4c:	2405           	movel %d5,%d2
    2f4e:	0282 0000 0400 	andil #1024,%d2
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    2f54:	78f3           	moveq #-13,%d4
    2f56:	ca84           	andl %d4,%d5
        if (flags & FLAGS_PRECISION) {
    2f58:	4a82           	tstl %d2
    2f5a:	6644           	bnes 2fa0 <_vsnprintf+0x8f2>
        if ((*format == 'i') || (*format == 'd')) {
    2f5c:	0c00 0069      	cmpib #105,%d0
    2f60:	6700 faae      	beqw 2a10 <_vsnprintf+0x362>
    2f64:	0c00 0064      	cmpib #100,%d0
    2f68:	6700 faa6      	beqw 2a10 <_vsnprintf+0x362>
          if (flags & FLAGS_LONG_LONG) {
    2f6c:	0805 0009      	btst #9,%d5
    2f70:	6600 f794      	bnew 2706 <_vsnprintf+0x58>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    2f74:	2403           	movel %d3,%d2
    2f76:	5882           	addql #4,%d2
          else if (flags & FLAGS_LONG) {
    2f78:	0805 0008      	btst #8,%d5
    2f7c:	6600 0272      	bnew 31f0 <_vsnprintf+0xb42>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
    2f80:	0805 0006      	btst #6,%d5
    2f84:	6700 0332      	beqw 32b8 <_vsnprintf+0xc0a>
    2f88:	7000           	moveq #0,%d0
    2f8a:	4600           	notb %d0
    2f8c:	2043           	moveal %d3,%a0
    2f8e:	c090           	andl %a0@,%d0
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    2f90:	2f05           	movel %d5,%sp@-
    2f92:	2f0a           	movel %a2,%sp@-
    2f94:	2f0c           	movel %a4,%sp@-
    2f96:	2f09           	movel %a1,%sp@-
    2f98:	42a7           	clrl %sp@-
    2f9a:	2f00           	movel %d0,%sp@-
    2f9c:	6000 fab0      	braw 2a4e <_vsnprintf+0x3a0>
          flags &= ~FLAGS_ZEROPAD;
    2fa0:	72fe           	moveq #-2,%d1
    2fa2:	ca81           	andl %d1,%d5
    2fa4:	60b6           	bras 2f5c <_vsnprintf+0x8ae>
          while (l++ < width) {
    2fa6:	327c 0008      	moveaw #8,%a1
        if (flags & FLAGS_PRECISION) {
    2faa:	2405           	movel %d5,%d2
    2fac:	0282 0000 0400 	andil #1024,%d2
        if ((*format != 'i') && (*format != 'd')) {
    2fb2:	0c00 0069      	cmpib #105,%d0
    2fb6:	6700 fa52      	beqw 2a0a <_vsnprintf+0x35c>
    2fba:	6000 0168      	braw 3124 <_vsnprintf+0xa76>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
    2fbe:	0805 0002      	btst #2,%d5
    2fc2:	6700 01c6      	beqw 318a <_vsnprintf+0xadc>
    2fc6:	7204           	moveq #4,%d1
    2fc8:	203c 0000 46da 	movel #18138,%d0
    2fce:	2f05           	movel %d5,%sp@-
    2fd0:	2f0a           	movel %a2,%sp@-
    2fd2:	2f01           	movel %d1,%sp@-
    2fd4:	2f00           	movel %d0,%sp@-
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
    2fd6:	2f06           	movel %d6,%sp@-
    2fd8:	2f0d           	movel %a5,%sp@-
    2fda:	2f07           	movel %d7,%sp@-
    2fdc:	2f0e           	movel %fp,%sp@-
    2fde:	4eb9 0000 21cc 	jsr 21cc <_out_rev>
    2fe4:	2a40           	moveal %d0,%a5
    2fe6:	4fef 0020      	lea %sp@(32),%sp
    2fea:	6000 fdca      	braw 2db6 <_vsnprintf+0x708>
    switch (*format) {
    2fee:	327c 0002      	moveaw #2,%a1
    2ff2:	2405           	movel %d5,%d2
    2ff4:	0282 0000 0400 	andil #1024,%d2
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    2ffa:	78f3           	moveq #-13,%d4
    2ffc:	ca84           	andl %d4,%d5
        if (flags & FLAGS_PRECISION) {
    2ffe:	4a82           	tstl %d2
    3000:	6700 ff5a      	beqw 2f5c <_vsnprintf+0x8ae>
    3004:	609a           	bras 2fa0 <_vsnprintf+0x8f2>
    3006:	2443           	moveal %d3,%a2
        if (flags & FLAGS_LEFT) {
    3008:	4aaf 003a      	tstl %sp@(58)
    300c:	6724           	beqs 3032 <_vsnprintf+0x984>
    300e:	280d           	movel %a5,%d4
          while (l++ < width) {
    3010:	b48a           	cmpl %a2,%d2
    3012:	641e           	bccs 3032 <_vsnprintf+0x984>
    3014:	4bf2 d800      	lea %a2@(0000000000000000,%a5:l),%a5
    3018:	9bc2           	subal %d2,%a5
            out(' ', buffer, idx++, maxlen);
    301a:	2004           	movel %d4,%d0
    301c:	5284           	addql #1,%d4
    301e:	2f06           	movel %d6,%sp@-
    3020:	2f00           	movel %d0,%sp@-
    3022:	2f07           	movel %d7,%sp@-
    3024:	4878 0020      	pea 20 <R_STOPCNTCMD+0x2>
    3028:	4e96           	jsr %fp@
          while (l++ < width) {
    302a:	4fef 0010      	lea %sp@(16),%sp
    302e:	b88d           	cmpl %a5,%d4
    3030:	66e8           	bnes 301a <_vsnprintf+0x96c>
        const char* p = va_arg(va, char*);
    3032:	262f 0032      	movel %sp@(50),%d3
  while (*format)
    3036:	1013           	moveb %a3@,%d0
    3038:	6600 f6ac      	bnew 26e6 <_vsnprintf+0x38>
    303c:	6000 f6cc      	braw 270a <_vsnprintf+0x5c>
          flags |= FLAGS_LONG_LONG;
    3040:	0045 0300      	oriw #768,%d5
          format++;
    3044:	220b           	movel %a3,%d1
    3046:	5481           	addql #2,%d1
    switch (*format) {
    3048:	102b 0002      	moveb %a3@(2),%d0
    304c:	6000 f776      	braw 27c4 <_vsnprintf+0x116>
          flags |= FLAGS_CHAR;
    3050:	783f           	moveq #63,%d4
    3052:	4604           	notb %d4
    3054:	8a84           	orl %d4,%d5
          format++;
    3056:	220b           	movel %a3,%d1
    3058:	5481           	addql #2,%d1
    switch (*format) {
    305a:	102b 0002      	moveb %a3@(2),%d0
    305e:	6000 f764      	braw 27c4 <_vsnprintf+0x116>
  return (unsigned int)(s - str);
    3062:	2409           	movel %a1,%d2
    3064:	9483           	subl %d3,%d2
    3066:	6000 fdfe      	braw 2e66 <_vsnprintf+0x7b8>
        if (*format == 'x' || *format == 'X') {
    306a:	0c00 0078      	cmpib #120,%d0
    306e:	6600 f972      	bnew 29e2 <_vsnprintf+0x334>
          base = 16U;
    3072:	327c 0010      	moveaw #16,%a1
    3076:	2405           	movel %d5,%d2
    3078:	0282 0000 0400 	andil #1024,%d2
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    307e:	78f3           	moveq #-13,%d4
    3080:	ca84           	andl %d4,%d5
        if (flags & FLAGS_PRECISION) {
    3082:	4a82           	tstl %d2
    3084:	6700 fed6      	beqw 2f5c <_vsnprintf+0x8ae>
    3088:	6000 ff16      	braw 2fa0 <_vsnprintf+0x8f2>
          while (l++ < width) {
    308c:	2002           	movel %d2,%d0
    308e:	5280           	addql #1,%d0
    3090:	b48a           	cmpl %a2,%d2
    3092:	6400 033e      	bccw 33d2 <_vsnprintf+0xd24>
    3096:	2a0a           	movel %a2,%d5
    3098:	da8d           	addl %a5,%d5
    309a:	9a82           	subl %d2,%d5
    309c:	2809           	movel %a1,%d4
            out(' ', buffer, idx++, maxlen);
    309e:	200d           	movel %a5,%d0
    30a0:	528d           	addql #1,%a5
    30a2:	2f06           	movel %d6,%sp@-
    30a4:	2f00           	movel %d0,%sp@-
    30a6:	2f07           	movel %d7,%sp@-
    30a8:	4878 0020      	pea 20 <R_STOPCNTCMD+0x2>
    30ac:	4e96           	jsr %fp@
          while (l++ < width) {
    30ae:	4fef 0010      	lea %sp@(16),%sp
    30b2:	bbc5           	cmpal %d5,%a5
    30b4:	66e8           	bnes 309e <_vsnprintf+0x9f0>
    30b6:	2244           	moveal %d4,%a1
    30b8:	240a           	movel %a2,%d2
    30ba:	5282           	addql #1,%d2
    30bc:	2043           	moveal %d3,%a0
    30be:	1210           	moveb %a0@,%d1
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    30c0:	1001           	moveb %d1,%d0
    30c2:	6700 ff6e      	beqw 3032 <_vsnprintf+0x984>
          out(*(p++), buffer, idx++, maxlen);
    30c6:	220d           	movel %a5,%d1
    30c8:	2809           	movel %a1,%d4
    30ca:	204a           	moveal %a2,%a0
    30cc:	244c           	moveal %a4,%a2
    30ce:	2843           	moveal %d3,%a4
    30d0:	2608           	movel %a0,%d3
    30d2:	6000 fdca      	braw 2e9e <_vsnprintf+0x7f0>
          while (l++ < width) {
    30d6:	7001           	moveq #1,%d0
    30d8:	b08a           	cmpl %a2,%d0
    30da:	6400 02d6      	bccw 33b2 <_vsnprintf+0xd04>
    30de:	45f2 d8ff      	lea %a2@(ffffffffffffffff,%a5:l),%a2
            out(' ', buffer, idx++, maxlen);
    30e2:	200d           	movel %a5,%d0
    30e4:	528d           	addql #1,%a5
    30e6:	2f06           	movel %d6,%sp@-
    30e8:	2f00           	movel %d0,%sp@-
    30ea:	2f07           	movel %d7,%sp@-
    30ec:	4878 0020      	pea 20 <R_STOPCNTCMD+0x2>
    30f0:	4e96           	jsr %fp@
          while (l++ < width) {
    30f2:	4fef 0010      	lea %sp@(16),%sp
    30f6:	bbca           	cmpal %a2,%a5
    30f8:	66e8           	bnes 30e2 <_vsnprintf+0xa34>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    30fa:	4bea 0001      	lea %a2@(1),%a5
    30fe:	2f06           	movel %d6,%sp@-
    3100:	2f0a           	movel %a2,%sp@-
    3102:	2f07           	movel %d7,%sp@-
    3104:	2043           	moveal %d3,%a0
    3106:	2010           	movel %a0@,%d0
    3108:	4880           	extw %d0
    310a:	3240           	moveaw %d0,%a1
    310c:	2f09           	movel %a1,%sp@-
    310e:	4e96           	jsr %fp@
    3110:	4fef 0010      	lea %sp@(16),%sp
        break;
    3114:	2604           	movel %d4,%d3
    3116:	6000 fcf6      	braw 2e0e <_vsnprintf+0x760>
    return 0U;
    311a:	9bcd           	subal %a5,%a5
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
    311c:	262f 003a      	movel %sp@(58),%d3
    3120:	6000 fc98      	braw 2dba <_vsnprintf+0x70c>
        if ((*format != 'i') && (*format != 'd')) {
    3124:	0c00 0064      	cmpib #100,%d0
    3128:	6600 fe2a      	bnew 2f54 <_vsnprintf+0x8a6>
        if (flags & FLAGS_PRECISION) {
    312c:	4a82           	tstl %d2
    312e:	6700 f8e0      	beqw 2a10 <_vsnprintf+0x362>
    3132:	6000 fe6c      	braw 2fa0 <_vsnprintf+0x8f2>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
    3136:	2f05           	movel %d5,%sp@-
    3138:	2f0a           	movel %a2,%sp@-
    313a:	4878 0003      	pea 3 <DIVIDE>
    313e:	4879 0000 46e3 	pea 46e3 <__gedf2+0x5f>
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
    3144:	2f06           	movel %d6,%sp@-
    3146:	2f0d           	movel %a5,%sp@-
    3148:	2f07           	movel %d7,%sp@-
    314a:	2f0e           	movel %fp,%sp@-
    314c:	4eb9 0000 21cc 	jsr 21cc <_out_rev>
    3152:	2a40           	moveal %d0,%a5
    3154:	4fef 0020      	lea %sp@(32),%sp
    3158:	6000 fc5c      	braw 2db6 <_vsnprintf+0x708>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
    315c:	2f05           	movel %d5,%sp@-
    315e:	2f0a           	movel %a2,%sp@-
    3160:	4878 0004      	pea 4 <DUART_CRA>
    3164:	4879 0000 46e7 	pea 46e7 <__gedf2+0x63>
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
    316a:	2f06           	movel %d6,%sp@-
    316c:	2f0d           	movel %a5,%sp@-
    316e:	2f07           	movel %d7,%sp@-
    3170:	2f0e           	movel %fp,%sp@-
    3172:	4eb9 0000 21cc 	jsr 21cc <_out_rev>
    3178:	2a40           	moveal %d0,%a5
    317a:	4fef 0020      	lea %sp@(32),%sp
    317e:	6000 fc36      	braw 2db6 <_vsnprintf+0x708>
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    3182:	4480           	negl %d0
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    3184:	2f00           	movel %d0,%sp@-
    3186:	6000 f8c6      	braw 2a4e <_vsnprintf+0x3a0>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
    318a:	7203           	moveq #3,%d1
    318c:	203c 0000 46df 	movel #18143,%d0
    3192:	2f05           	movel %d5,%sp@-
    3194:	2f0a           	movel %a2,%sp@-
    3196:	2f01           	movel %d1,%sp@-
    3198:	2f00           	movel %d0,%sp@-
    319a:	6000 fe3a      	braw 2fd6 <_vsnprintf+0x928>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    319e:	4880           	extw %d0
    31a0:	48c0           	extl %d0
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    31a2:	2f05           	movel %d5,%sp@-
    31a4:	2f0a           	movel %a2,%sp@-
    31a6:	2f0c           	movel %a4,%sp@-
    31a8:	2f09           	movel %a1,%sp@-
    31aa:	2200           	movel %d0,%d1
    31ac:	d281           	addl %d1,%d1
    31ae:	9381           	subxl %d1,%d1
    31b0:	4481           	negl %d1
    31b2:	2f01           	movel %d1,%sp@-
    31b4:	4a80           	tstl %d0
    31b6:	6c00 f894      	bgew 2a4c <_vsnprintf+0x39e>
    31ba:	60c6           	bras 3182 <_vsnprintf+0xad4>
    value = 0 - value;
    31bc:	2f7c 0000 3652 	movel #13906,%sp@(74)
    31c2:	004a 
    31c4:	2f2f 0036      	movel %sp@(54),%sp@-
    31c8:	2f2f 0036      	movel %sp@(54),%sp@-
    31cc:	2f03           	movel %d3,%sp@-
    31ce:	2f02           	movel %d2,%sp@-
    31d0:	226f 005a      	moveal %sp@(90),%a1
    31d4:	4e91           	jsr %a1@
    31d6:	4fef 0010      	lea %sp@(16),%sp
    31da:	2400           	movel %d0,%d2
    31dc:	2601           	movel %d1,%d3
    31de:	2f42 0032      	movel %d2,%sp@(50)
    31e2:	2f43 0036      	movel %d3,%sp@(54)
    negative = true;
    31e6:	1f7c 0001 0057 	moveb #1,%sp@(87)
    31ec:	6000 f9a0      	braw 2b8e <_vsnprintf+0x4e0>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    31f0:	2f05           	movel %d5,%sp@-
    31f2:	2f0a           	movel %a2,%sp@-
    31f4:	2f0c           	movel %a4,%sp@-
    31f6:	2f09           	movel %a1,%sp@-
    31f8:	42a7           	clrl %sp@-
    31fa:	2243           	moveal %d3,%a1
    31fc:	2f11           	movel %a1@,%sp@-
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    31fe:	2f06           	movel %d6,%sp@-
    3200:	2f0d           	movel %a5,%sp@-
    3202:	2f07           	movel %d7,%sp@-
    3204:	2f0e           	movel %fp,%sp@-
    3206:	4eb9 0000 2278 	jsr 2278 <_ntoa_long>
    320c:	2a40           	moveal %d0,%a5
    320e:	4fef 0028      	lea %sp@(40),%sp
    3212:	2602           	movel %d2,%d3
        break;
    3214:	6000 f84e      	braw 2a64 <_vsnprintf+0x3b6>
          while (l++ < width) {
    3218:	2a42           	moveal %d2,%a5
        break;
    321a:	2604           	movel %d4,%d3
    321c:	6000 fbf0      	braw 2e0e <_vsnprintf+0x760>
    3220:	49ef 0058      	lea %sp@(88),%a4
    3224:	d9c8           	addal %a0,%a4
    3226:	d1c4           	addal %d4,%a0
    3228:	43e8 ffe0      	lea %a0@(-32),%a1
    322c:	2f45 0032      	movel %d5,%sp@(50)
    3230:	2f4a 0042      	movel %a2,%sp@(66)
    3234:	2448           	moveal %a0,%a2
    3236:	2f42 004e      	movel %d2,%sp@(78)
    323a:	2409           	movel %a1,%d2
    323c:	2f4b 004a      	movel %a3,%sp@(74)
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
    3240:	b882           	cmpl %d2,%d4
    3242:	6700 0092      	beqw 32d6 <_vsnprintf+0xc28>
      --count;
    3246:	2a04           	movel %d4,%d5
    3248:	5385           	subql #1,%d5
      buf[len++] = (char)(48U + (frac % 10U));
    324a:	264a           	moveal %a2,%a3
    324c:	97c5           	subal %d5,%a3
    324e:	4878 000a      	pea a <DUART_IMR>
    3252:	2f03           	movel %d3,%sp@-
    3254:	4eb9 0000 3598 	jsr 3598 <__umodsi3>
    325a:	508f           	addql #8,%sp
    325c:	0600 0030      	addib #48,%d0
    3260:	18c0           	moveb %d0,%a4@+
      if (!(frac /= 10U)) {
    3262:	4878 000a      	pea a <DUART_IMR>
    3266:	2f03           	movel %d3,%sp@-
    3268:	4eb9 0000 350c 	jsr 350c <__udivsi3>
    326e:	508f           	addql #8,%sp
    3270:	7209           	moveq #9,%d1
    3272:	b283           	cmpl %d3,%d1
    3274:	6400 00ca      	bccw 3340 <_vsnprintf+0xc92>
      --count;
    3278:	2805           	movel %d5,%d4
      if (!(frac /= 10U)) {
    327a:	2600           	movel %d0,%d3
    327c:	60c2           	bras 3240 <_vsnprintf+0xb92>
  else if (diff < 0.5) {
    327e:	42a7           	clrl %sp@-
    3280:	2f3c 3fe0 0000 	movel #1071644672,%sp@-
    3286:	2f2f 004e      	movel %sp@(78),%sp@-
    328a:	2f2f 004e      	movel %sp@(78),%sp@-
    328e:	2f48 003e      	movel %a0,%sp@(62)
    3292:	4eb9 0000 4078 	jsr 4078 <__ltdf2>
    3298:	4fef 0010      	lea %sp@(16),%sp
    329c:	206f 002e      	moveal %sp@(46),%a0
    32a0:	4a80           	tstl %d0
    32a2:	6d00 fa04      	bltw 2ca8 <_vsnprintf+0x5fa>
  else if ((frac == 0U) || (frac & 1U)) {
    32a6:	4a83           	tstl %d3
    32a8:	6708           	beqs 32b2 <_vsnprintf+0xc04>
    32aa:	0803 0000      	btst #0,%d3
    32ae:	6700 f9f8      	beqw 2ca8 <_vsnprintf+0x5fa>
    ++frac;
    32b2:	5283           	addql #1,%d3
    32b4:	6000 f9f2      	braw 2ca8 <_vsnprintf+0x5fa>
    32b8:	2043           	moveal %d3,%a0
    32ba:	2010           	movel %a0@,%d0
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
    32bc:	4a05           	tstb %d5
    32be:	6a00 fcd0      	bplw 2f90 <_vsnprintf+0x8e2>
    32c2:	0280 0000 ffff 	andil #65535,%d0
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    32c8:	2f05           	movel %d5,%sp@-
    32ca:	2f0a           	movel %a2,%sp@-
    32cc:	2f0c           	movel %a4,%sp@-
    32ce:	2f09           	movel %a1,%sp@-
    32d0:	42a7           	clrl %sp@-
    32d2:	6000 fcc6      	braw 2f9a <_vsnprintf+0x8ec>
    32d6:	2a2f 0032      	movel %sp@(50),%d5
    32da:	246f 0042      	moveal %sp@(66),%a2
    32de:	266f 004a      	moveal %sp@(74),%a3
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
    32e2:	7003           	moveq #3,%d0
    32e4:	c085           	andl %d5,%d0
    32e6:	5380           	subql #1,%d0
    32e8:	661e           	bnes 3308 <_vsnprintf+0xc5a>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
    32ea:	b4fc 0000      	cmpaw #0,%a2
    32ee:	6718           	beqs 3308 <_vsnprintf+0xc5a>
    32f0:	4a2f 0057      	tstb %sp@(87)
    32f4:	6600 0106      	bnew 33fc <_vsnprintf+0xd4e>
    32f8:	700c           	moveq #12,%d0
    32fa:	c085           	andl %d5,%d0
    32fc:	670a           	beqs 3308 <_vsnprintf+0xc5a>
      width--;
    32fe:	538a           	subql #1,%a2
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    3300:	7020           	moveq #32,%d0
    3302:	b08a           	cmpl %a2,%d0
    3304:	6500 fa92      	bcsw 2d98 <_vsnprintf+0x6ea>
    3308:	7020           	moveq #32,%d0
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
    330a:	2f05           	movel %d5,%sp@-
    330c:	2f0a           	movel %a2,%sp@-
    330e:	2f00           	movel %d0,%sp@-
    3310:	486f 0064      	pea %sp@(100)
    3314:	6000 fa8c      	braw 2da2 <_vsnprintf+0x6f4>
    else if (flags & FLAGS_PLUS) {
    3318:	0805 0002      	btst #2,%d5
    331c:	6700 00c0      	beqw 33de <_vsnprintf+0xd30>
      buf[len++] = '+';  // ignore the space if the '+' exists
    3320:	5280           	addql #1,%d0
    3322:	1fbc 002b 2858 	moveb #43,%sp@(0000000000000058,%d2:l)
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
    3328:	2f05           	movel %d5,%sp@-
    332a:	2f0a           	movel %a2,%sp@-
    332c:	2f00           	movel %d0,%sp@-
    332e:	486f 0064      	pea %sp@(100)
    3332:	6000 fa6e      	braw 2da2 <_vsnprintf+0x6f4>
    3336:	2a2f 0032      	movel %sp@(50),%d5
    333a:	2c2f 0042      	movel %sp@(66),%d6
    333e:	60a2           	bras 32e2 <_vsnprintf+0xc34>
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    3340:	224b           	moveal %a3,%a1
    3342:	246f 0042      	moveal %sp@(66),%a2
    3346:	242f 004e      	movel %sp@(78),%d2
    334a:	2205           	movel %d5,%d1
    334c:	2a2f 0032      	movel %sp@(50),%d5
    3350:	266f 004a      	moveal %sp@(74),%a3
    3354:	7020           	moveq #32,%d0
    3356:	b089           	cmpl %a1,%d0
    3358:	6788           	beqs 32e2 <_vsnprintf+0xc34>
    335a:	2009           	movel %a1,%d0
    335c:	4a81           	tstl %d1
    335e:	6722           	beqs 3382 <_vsnprintf+0xcd4>
    3360:	49ef 0058      	lea %sp@(88),%a4
    3364:	d9c9           	addal %a1,%a4
      buf[len++] = '0';
    3366:	5280           	addql #1,%d0
    3368:	18fc 0030      	moveb #48,%a4@+
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    336c:	7220           	moveq #32,%d1
    336e:	b280           	cmpl %d0,%d1
    3370:	6700 ff70      	beqw 32e2 <_vsnprintf+0xc34>
    3374:	2204           	movel %d4,%d1
    3376:	9280           	subl %d0,%d1
    3378:	41f1 18ff      	lea %a1@(ffffffffffffffff,%d1:l),%a0
    337c:	b0fc 0000      	cmpaw #0,%a0
    3380:	66e4           	bnes 3366 <_vsnprintf+0xcb8>
      buf[len++] = '.';
    3382:	2040           	moveal %d0,%a0
    3384:	5288           	addql #1,%a0
    3386:	1fbc 002e 0858 	moveb #46,%sp@(0000000000000058,%d0:l)
    338c:	49ef 0058      	lea %sp@(88),%a4
    3390:	d9c8           	addal %a0,%a4
    3392:	7658           	moveq #88,%d3
    3394:	d68f           	addl %sp,%d3
    3396:	7020           	moveq #32,%d0
    3398:	d680           	addl %d0,%d3
    if (!(whole /= 10)) {
    339a:	283c 0000 3568 	movel #13672,%d4
    33a0:	2f45 0032      	movel %d5,%sp@(50)
    33a4:	2f46 0042      	movel %d6,%sp@(66)
    33a8:	2c02           	movel %d2,%d6
    33aa:	2a2f 003e      	movel %sp@(62),%d5
    33ae:	6000 f98e      	braw 2d3e <_vsnprintf+0x690>
          while (l++ < width) {
    33b2:	244d           	moveal %a5,%a2
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    33b4:	4bea 0001      	lea %a2@(1),%a5
    33b8:	2f06           	movel %d6,%sp@-
    33ba:	2f0a           	movel %a2,%sp@-
    33bc:	2f07           	movel %d7,%sp@-
    33be:	2043           	moveal %d3,%a0
    33c0:	2010           	movel %a0@,%d0
    33c2:	4880           	extw %d0
    33c4:	3240           	moveaw %d0,%a1
    33c6:	2f09           	movel %a1,%sp@-
    33c8:	4e96           	jsr %fp@
    33ca:	4fef 0010      	lea %sp@(16),%sp
    33ce:	6000 fd44      	braw 3114 <_vsnprintf+0xa66>
          while (l++ < width) {
    33d2:	2400           	movel %d0,%d2
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    33d4:	1001           	moveb %d1,%d0
    33d6:	6600 fcee      	bnew 30c6 <_vsnprintf+0xa18>
    33da:	6000 fc56      	braw 3032 <_vsnprintf+0x984>
    else if (flags & FLAGS_SPACE) {
    33de:	0805 0003      	btst #3,%d5
    33e2:	6700 f9b4      	beqw 2d98 <_vsnprintf+0x6ea>
      buf[len++] = ' ';
    33e6:	5280           	addql #1,%d0
    33e8:	1fbc 0020 2858 	moveb #32,%sp@(0000000000000058,%d2:l)
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
    33ee:	2f05           	movel %d5,%sp@-
    33f0:	2f0a           	movel %a2,%sp@-
    33f2:	2f00           	movel %d0,%sp@-
    33f4:	486f 0064      	pea %sp@(100)
    33f8:	6000 f9a8      	braw 2da2 <_vsnprintf+0x6f4>
      width--;
    33fc:	538a           	subql #1,%a2
    33fe:	7020           	moveq #32,%d0
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
    3400:	2f05           	movel %d5,%sp@-
    3402:	2f0a           	movel %a2,%sp@-
    3404:	2f00           	movel %d0,%sp@-
    3406:	486f 0064      	pea %sp@(100)
    340a:	6000 f996      	braw 2da2 <_vsnprintf+0x6f4>
    switch (*format) {
    340e:	220b           	movel %a3,%d1
    3410:	6000 f3b2      	braw 27c4 <_vsnprintf+0x116>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
    3414:	b4fc 0000      	cmpaw #0,%a2
    3418:	6700 f964      	beqw 2d7e <_vsnprintf+0x6d0>
    341c:	4a2f 0057      	tstb %sp@(87)
    3420:	663a           	bnes 345c <_vsnprintf+0xdae>
    3422:	700c           	moveq #12,%d0
    3424:	c085           	andl %d5,%d0
    3426:	6634           	bnes 345c <_vsnprintf+0xdae>
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    3428:	b5c2           	cmpal %d2,%a2
    342a:	6300 f952      	blsw 2d7e <_vsnprintf+0x6d0>
    342e:	7820           	moveq #32,%d4
    3430:	b882           	cmpl %d2,%d4
    3432:	6700 fed4      	beqw 3308 <_vsnprintf+0xc5a>
    3436:	43ef 0058      	lea %sp@(88),%a1
    343a:	d3c2           	addal %d2,%a1
    343c:	2002           	movel %d2,%d0
      buf[len++] = '0';
    343e:	5280           	addql #1,%d0
    3440:	12fc 0030      	moveb #48,%a1@+
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    3444:	b5c0           	cmpal %d0,%a2
    3446:	6718           	beqs 3460 <_vsnprintf+0xdb2>
    3448:	7220           	moveq #32,%d1
    344a:	b280           	cmpl %d0,%d1
    344c:	66f0           	bnes 343e <_vsnprintf+0xd90>
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
    344e:	2f05           	movel %d5,%sp@-
    3450:	2f0a           	movel %a2,%sp@-
    3452:	2f00           	movel %d0,%sp@-
    3454:	486f 0064      	pea %sp@(100)
    3458:	6000 f948      	braw 2da2 <_vsnprintf+0x6f4>
      width--;
    345c:	538a           	subql #1,%a2
    345e:	60c8           	bras 3428 <_vsnprintf+0xd7a>
    3460:	240a           	movel %a2,%d2
    3462:	6000 f91a      	braw 2d7e <_vsnprintf+0x6d0>

00003466 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
    3466:	4e56 fffc      	linkw %fp,#-4
  va_list va;
  va_start(va, format);
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    346a:	486e 000c      	pea %fp@(12)
    346e:	2f2e 0008      	movel %fp@(8),%sp@-
    3472:	4878 ffff      	pea ffffffff <LESS+0x0>
    3476:	486e ffff      	pea %fp@(-1)
    347a:	4879 0000 2696 	pea 2696 <_out_char>
    3480:	4eb9 0000 26ae 	jsr 26ae <_vsnprintf>
  va_end(va);
  return ret;
    3486:	4fef 0014      	lea %sp@(20),%sp
}
    348a:	4e5e           	unlk %fp
    348c:	4e75           	rts

0000348e <sprintf_>:


int sprintf_(char* buffer, const char* format, ...)
{
    348e:	4e56 0000      	linkw %fp,#0
  va_list va;
  va_start(va, format);
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
    3492:	486e 0010      	pea %fp@(16)
    3496:	2f2e 000c      	movel %fp@(12),%sp@-
    349a:	4878 ffff      	pea ffffffff <LESS+0x0>
    349e:	2f2e 0008      	movel %fp@(8),%sp@-
    34a2:	4879 0000 21b2 	pea 21b2 <_out_buffer>
    34a8:	4eb9 0000 26ae 	jsr 26ae <_vsnprintf>
  va_end(va);
  return ret;
    34ae:	4fef 0014      	lea %sp@(20),%sp
}
    34b2:	4e5e           	unlk %fp
    34b4:	4e75           	rts

000034b6 <_putchar>:
static char crbuf[2] = { '\r', 0 };

/*
 * This is used by printf.
 */
void _putchar(char chr) {
    34b6:	2f02           	movel %d2,%sp@-
    34b8:	242f 0008      	movel %sp@(8),%d2
  if (chr == '\n') {
    34bc:	0c02 000a      	cmpib #10,%d2
    34c0:	6714           	beqs 34d6 <_putchar+0x20>
    // is LF, print CR too
    mcPrint(crbuf);
  }

  buf[0] = chr;
    34c2:	41f9 0000 7f66 	lea 7f66 <buf>,%a0
    34c8:	1082           	moveb %d2,%a0@
  mcPrint(buf);
    34ca:	2f48 0008      	movel %a0,%sp@(8)
}
    34ce:	241f           	movel %sp@+,%d2
  mcPrint(buf);
    34d0:	4ef9 0000 34f8 	jmp 34f8 <mcPrint>
    mcPrint(crbuf);
    34d6:	4879 0000 4744 	pea 4744 <crbuf>
    34dc:	4eb9 0000 34f8 	jsr 34f8 <mcPrint>
    34e2:	588f           	addql #4,%sp
  buf[0] = chr;
    34e4:	41f9 0000 7f66 	lea 7f66 <buf>,%a0
    34ea:	1082           	moveb %d2,%a0@
  mcPrint(buf);
    34ec:	2f48 0008      	movel %a0,%sp@(8)
}
    34f0:	241f           	movel %sp@+,%d2
  mcPrint(buf);
    34f2:	4ef9 0000 34f8 	jmp 34f8 <mcPrint>

000034f8 <mcPrint>:
    34f8:	48e7 c080      	moveml %d0-%d1/%a0,%sp@-
    34fc:	206f 0010      	moveal %sp@(16),%a0
    3500:	7200           	moveq #0,%d1
    3502:	4e4e           	trap #14
    3504:	4cdf 0103      	moveml %sp@+,%d0-%d1/%a0
    3508:	4e75           	rts
	...

0000350c <__udivsi3>:
    350c:	2f02           	movel %d2,%sp@-
    350e:	222f 000c      	movel %sp@(12),%d1
    3512:	202f 0008      	movel %sp@(8),%d0
    3516:	0c81 0001 0000 	cmpil #65536,%d1
    351c:	6416           	bccs 3534 <L3>
    351e:	2400           	movel %d0,%d2
    3520:	4242           	clrw %d2
    3522:	4842           	swap %d2
    3524:	84c1           	divuw %d1,%d2
    3526:	3002           	movew %d2,%d0
    3528:	4840           	swap %d0
    352a:	342f 000a      	movew %sp@(10),%d2
    352e:	84c1           	divuw %d1,%d2
    3530:	3002           	movew %d2,%d0
    3532:	6030           	bras 3564 <L6>

00003534 <L3>:
    3534:	2401           	movel %d1,%d2

00003536 <L4>:
    3536:	e289           	lsrl #1,%d1
    3538:	e288           	lsrl #1,%d0
    353a:	0c81 0001 0000 	cmpil #65536,%d1
    3540:	64f4           	bccs 3536 <L4>
    3542:	80c1           	divuw %d1,%d0
    3544:	0280 0000 ffff 	andil #65535,%d0
    354a:	2202           	movel %d2,%d1
    354c:	c2c0           	muluw %d0,%d1
    354e:	4842           	swap %d2
    3550:	c4c0           	muluw %d0,%d2
    3552:	4842           	swap %d2
    3554:	4a42           	tstw %d2
    3556:	660a           	bnes 3562 <L5>
    3558:	d282           	addl %d2,%d1
    355a:	6506           	bcss 3562 <L5>
    355c:	b2af 0008      	cmpl %sp@(8),%d1
    3560:	6302           	blss 3564 <L6>

00003562 <L5>:
    3562:	5380           	subql #1,%d0

00003564 <L6>:
    3564:	241f           	movel %sp@+,%d2
    3566:	4e75           	rts

00003568 <__divsi3>:
    3568:	2f02           	movel %d2,%sp@-
    356a:	7401           	moveq #1,%d2
    356c:	222f 000c      	movel %sp@(12),%d1
    3570:	6a04           	bpls 3576 <L1>
    3572:	4481           	negl %d1
    3574:	4402           	negb %d2

00003576 <L1>:
    3576:	202f 0008      	movel %sp@(8),%d0
    357a:	6a04           	bpls 3580 <L2>
    357c:	4480           	negl %d0
    357e:	4402           	negb %d2

00003580 <L2>:
    3580:	2f01           	movel %d1,%sp@-
    3582:	2f00           	movel %d0,%sp@-
    3584:	4eb9 0000 350c 	jsr 350c <__udivsi3>
    358a:	508f           	addql #8,%sp
    358c:	4a02           	tstb %d2
    358e:	6a02           	bpls 3592 <L3>
    3590:	4480           	negl %d0

00003592 <L3>:
    3592:	241f           	movel %sp@+,%d2
    3594:	4e75           	rts
	...

00003598 <__umodsi3>:
    3598:	222f 0008      	movel %sp@(8),%d1
    359c:	202f 0004      	movel %sp@(4),%d0
    35a0:	2f01           	movel %d1,%sp@-
    35a2:	2f00           	movel %d0,%sp@-
    35a4:	4eb9 0000 350c 	jsr 350c <__udivsi3>
    35aa:	508f           	addql #8,%sp
    35ac:	222f 0008      	movel %sp@(8),%d1
    35b0:	2f01           	movel %d1,%sp@-
    35b2:	2f00           	movel %d0,%sp@-
    35b4:	4eb9 0000 4660 	jsr 4660 <__mulsi3>
    35ba:	508f           	addql #8,%sp
    35bc:	222f 0004      	movel %sp@(4),%d1
    35c0:	9280           	subl %d0,%d1
    35c2:	2001           	movel %d1,%d0
    35c4:	4e75           	rts
	...

000035c8 <__modsi3>:
    35c8:	222f 0008      	movel %sp@(8),%d1
    35cc:	202f 0004      	movel %sp@(4),%d0
    35d0:	2f01           	movel %d1,%sp@-
    35d2:	2f00           	movel %d0,%sp@-
    35d4:	4eb9 0000 3568 	jsr 3568 <__divsi3>
    35da:	508f           	addql #8,%sp
    35dc:	222f 0008      	movel %sp@(8),%d1
    35e0:	2f01           	movel %d1,%sp@-
    35e2:	2f00           	movel %d0,%sp@-
    35e4:	4eb9 0000 4660 	jsr 4660 <__mulsi3>
    35ea:	508f           	addql #8,%sp
    35ec:	222f 0004      	movel %sp@(4),%d1
    35f0:	9280           	subl %d0,%d1
    35f2:	2001           	movel %d1,%d0
    35f4:	4e75           	rts
	...

000035f8 <Ld$den>:
    35f8:	8087           	orl %d7,%d0
    35fa:	3e3c 0003      	movew #3,%d7
    35fe:	7c02           	moveq #2,%d6
    3600:	4ef9 0000 3fd2 	jmp 3fd2 <$_exception_handler>

00003606 <Ld$infty>:
    3606:	203c 7ff0 0000 	movel #2146435072,%d0
    360c:	7200           	moveq #0,%d1
    360e:	8087           	orl %d7,%d0
    3610:	3e3c 0005      	movew #5,%d7
    3614:	7c02           	moveq #2,%d6
    3616:	4ef9 0000 3fd2 	jmp 3fd2 <$_exception_handler>

0000361c <Ld$underflow>:
    361c:	7000           	moveq #0,%d0
    361e:	2200           	movel %d0,%d1
    3620:	3e3c 0003      	movew #3,%d7
    3624:	7c02           	moveq #2,%d6
    3626:	4ef9 0000 3fd2 	jmp 3fd2 <$_exception_handler>

0000362c <Ld$inop>:
    362c:	70ff           	moveq #-1,%d0
    362e:	2200           	movel %d0,%d1
    3630:	3e3c 0011      	movew #17,%d7
    3634:	7c02           	moveq #2,%d6
    3636:	4ef9 0000 3fd2 	jmp 3fd2 <$_exception_handler>

0000363c <Ld$div$0>:
    363c:	203c 7ff0 0000 	movel #2146435072,%d0
    3642:	7200           	moveq #0,%d1
    3644:	8087           	orl %d7,%d0
    3646:	3e3c 0009      	movew #9,%d7
    364a:	7c02           	moveq #2,%d6
    364c:	4ef9 0000 3fd2 	jmp 3fd2 <$_exception_handler>

00003652 <__subdf3>:
    3652:	086f 001f 000c 	bchg #31,%sp@(12)

00003658 <__adddf3>:
    3658:	4e56 0000      	linkw %fp,#0
    365c:	48e7 3f00      	moveml %d2-%d7,%sp@-
    3660:	202e 0008      	movel %fp@(8),%d0
    3664:	222e 000c      	movel %fp@(12),%d1
    3668:	242e 0010      	movel %fp@(16),%d2
    366c:	262e 0014      	movel %fp@(20),%d3
    3670:	2e00           	movel %d0,%d7
    3672:	d281           	addl %d1,%d1
    3674:	d180           	addxl %d0,%d0
    3676:	6700 0286      	beqw 38fe <Ladddf$b>
    367a:	2c02           	movel %d2,%d6
    367c:	d683           	addl %d3,%d3
    367e:	d582           	addxl %d2,%d2
    3680:	6700 029a      	beqw 391c <Ladddf$a>
    3684:	0287 8000 0000 	andil #-2147483648,%d7
    368a:	4846           	swap %d6
    368c:	0246 8000      	andiw #-32768,%d6
    3690:	8e46           	orw %d6,%d7
    3692:	2047           	moveal %d7,%a0
    3694:	2c3c 001f ffff 	movel #2097151,%d6
    369a:	2e3c 0020 0000 	movel #2097152,%d7
    36a0:	2800           	movel %d0,%d4
    36a2:	c086           	andl %d6,%d0
    36a4:	4686           	notl %d6
    36a6:	c886           	andl %d6,%d4
    36a8:	6700 0246      	beqw 38f0 <Ladddf$a$den>
    36ac:	b886           	cmpl %d6,%d4
    36ae:	6700 02ca      	beqw 397a <Ladddf$nf>
    36b2:	8087           	orl %d7,%d0

000036b4 <Ladddf$1>:
    36b4:	4844           	swap %d4
    36b6:	ea4c           	lsrw #5,%d4
    36b8:	2a02           	movel %d2,%d5
    36ba:	ca86           	andl %d6,%d5
    36bc:	6700 0238      	beqw 38f6 <Ladddf$b$den>
    36c0:	ba86           	cmpl %d6,%d5
    36c2:	6700 02b6      	beqw 397a <Ladddf$nf>
    36c6:	4686           	notl %d6
    36c8:	c486           	andl %d6,%d2
    36ca:	8487           	orl %d7,%d2

000036cc <Ladddf$2>:
    36cc:	4845           	swap %d5
    36ce:	ea4d           	lsrw #5,%d5
    36d0:	48e7 0030      	moveml %a2-%a3,%sp@-
    36d4:	2444           	moveal %d4,%a2
    36d6:	2645           	moveal %d5,%a3
    36d8:	7e00           	moveq #0,%d7
    36da:	2c07           	movel %d7,%d6
    36dc:	2a03           	movel %d3,%d5
    36de:	2802           	movel %d2,%d4
    36e0:	2607           	movel %d7,%d3
    36e2:	2407           	movel %d7,%d2
    36e4:	c98a           	exg %d4,%a2
    36e6:	cb8b           	exg %d5,%a3
    36e8:	ba44           	cmpw %d4,%d5
    36ea:	6700 00cc      	beqw 37b8 <Ladddf$3>
    36ee:	6200 0064      	bhiw 3754 <Ladddf$2+0x88>
    36f2:	3404           	movew %d4,%d2
    36f4:	9445           	subw %d5,%d2
    36f6:	c98a           	exg %d4,%a2
    36f8:	cb8b           	exg %d5,%a3
    36fa:	0c42 0037      	cmpiw #55,%d2
    36fe:	6c00 01d2      	bgew 38d2 <Ladddf$b$small>
    3702:	0c42 0020      	cmpiw #32,%d2
    3706:	6c00 0022      	bgew 372a <Ladddf$2+0x5e>
    370a:	0c42 0010      	cmpiw #16,%d2
    370e:	6c00 002a      	bgew 373a <Ladddf$2+0x6e>
    3712:	6000 000a      	braw 371e <Ladddf$2+0x52>
    3716:	e28c           	lsrl #1,%d4
    3718:	e295           	roxrl #1,%d5
    371a:	e296           	roxrl #1,%d6
    371c:	e297           	roxrl #1,%d7
    371e:	51ca fff6      	dbf %d2,3716 <Ladddf$2+0x4a>
    3722:	7400           	moveq #0,%d2
    3724:	2602           	movel %d2,%d3
    3726:	6000 0094      	braw 37bc <Ladddf$4>
    372a:	2e06           	movel %d6,%d7
    372c:	2c05           	movel %d5,%d6
    372e:	2a04           	movel %d4,%d5
    3730:	7800           	moveq #0,%d4
    3732:	0442 0020      	subiw #32,%d2
    3736:	6000 ffd2      	braw 370a <Ladddf$2+0x3e>
    373a:	3e06           	movew %d6,%d7
    373c:	4847           	swap %d7
    373e:	3c05           	movew %d5,%d6
    3740:	4846           	swap %d6
    3742:	3a04           	movew %d4,%d5
    3744:	4845           	swap %d5
    3746:	383c 0000      	movew #0,%d4
    374a:	4844           	swap %d4
    374c:	0442 0010      	subiw #16,%d2
    3750:	6000 ffcc      	braw 371e <Ladddf$2+0x52>
    3754:	c945           	exg %d4,%d5
    3756:	3c04           	movew %d4,%d6
    3758:	9c45           	subw %d5,%d6
    375a:	c98a           	exg %d4,%a2
    375c:	cb8b           	exg %d5,%a3
    375e:	0c46 0037      	cmpiw #55,%d6
    3762:	6c00 0150      	bgew 38b4 <Ladddf$a$small>
    3766:	0c46 0020      	cmpiw #32,%d6
    376a:	6c00 0022      	bgew 378e <Ladddf$2+0xc2>
    376e:	0c46 0010      	cmpiw #16,%d6
    3772:	6c00 002a      	bgew 379e <Ladddf$2+0xd2>
    3776:	6000 000a      	braw 3782 <Ladddf$2+0xb6>
    377a:	e288           	lsrl #1,%d0
    377c:	e291           	roxrl #1,%d1
    377e:	e292           	roxrl #1,%d2
    3780:	e293           	roxrl #1,%d3
    3782:	51ce fff6      	dbf %d6,377a <Ladddf$2+0xae>
    3786:	7e00           	moveq #0,%d7
    3788:	2c07           	movel %d7,%d6
    378a:	6000 0030      	braw 37bc <Ladddf$4>
    378e:	2602           	movel %d2,%d3
    3790:	2401           	movel %d1,%d2
    3792:	2200           	movel %d0,%d1
    3794:	7000           	moveq #0,%d0
    3796:	0446 0020      	subiw #32,%d6
    379a:	6000 ffd2      	braw 376e <Ladddf$2+0xa2>
    379e:	3602           	movew %d2,%d3
    37a0:	4843           	swap %d3
    37a2:	3401           	movew %d1,%d2
    37a4:	4842           	swap %d2
    37a6:	3200           	movew %d0,%d1
    37a8:	4841           	swap %d1
    37aa:	303c 0000      	movew #0,%d0
    37ae:	4840           	swap %d0
    37b0:	0446 0010      	subiw #16,%d6
    37b4:	6000 ffcc      	braw 3782 <Ladddf$2+0xb6>

000037b8 <Ladddf$3>:
    37b8:	c98a           	exg %d4,%a2
    37ba:	cb8b           	exg %d5,%a3

000037bc <Ladddf$4>:
    37bc:	cf88           	exg %d7,%a0
    37be:	cd8b           	exg %d6,%a3
    37c0:	2c07           	movel %d7,%d6
    37c2:	3e3c 0000      	movew #0,%d7
    37c6:	4846           	swap %d6
    37c8:	3c3c 0000      	movew #0,%d6
    37cc:	bf86           	eorl %d7,%d6
    37ce:	6b00 006e      	bmiw 383e <Lsubdf$0>
    37d2:	cf88           	exg %d7,%a0
    37d4:	cd8b           	exg %d6,%a3
    37d6:	d687           	addl %d7,%d3
    37d8:	d586           	addxl %d6,%d2
    37da:	d385           	addxl %d5,%d1
    37dc:	d184           	addxl %d4,%d0
    37de:	280a           	movel %a2,%d4
    37e0:	2e08           	movel %a0,%d7
    37e2:	0287 8000 0000 	andil #-2147483648,%d7
    37e8:	4cdf 0c00      	moveml %sp@+,%a2-%a3
    37ec:	0800 0036      	btst #54,%d0
    37f0:	6700 000c      	beqw 37fe <Ladddf$4+0x42>
    37f4:	e288           	lsrl #1,%d0
    37f6:	e291           	roxrl #1,%d1
    37f8:	e292           	roxrl #1,%d2
    37fa:	e293           	roxrl #1,%d3
    37fc:	5244           	addqw #1,%d4
    37fe:	41fa 0020      	lea %pc@(3820 <Ladddf$5>),%a0
    3802:	43f9 0000 4748 	lea 4748 <_fpCCR>,%a1
    3808:	3c29 0006      	movew %a1@(6),%d6
    380c:	6700 0750      	beqw 3f5e <Lround$to$nearest>
    3810:	0c46 0002      	cmpiw #2,%d6
    3814:	6200 07ac      	bhiw 3fc2 <Lround$to$minus>
    3818:	6d00 07a8      	bltw 3fc2 <Lround$to$minus>
    381c:	6000 07a4      	braw 3fc2 <Lround$to$minus>

00003820 <Ladddf$5>:
    3820:	0c44 07ff      	cmpiw #2047,%d4
    3824:	6c00 0012      	bgew 3838 <Ladddf$5+0x18>
    3828:	0880 0034      	bclr #52,%d0
    382c:	e94c           	lslw #4,%d4
    382e:	4840           	swap %d0
    3830:	8044           	orw %d4,%d0
    3832:	4840           	swap %d0
    3834:	6000 0128      	braw 395e <Ladddf$ret>
    3838:	7a01           	moveq #1,%d5
    383a:	6000 fdca      	braw 3606 <Ld$infty>

0000383e <Lsubdf$0>:
    383e:	cf88           	exg %d7,%a0
    3840:	cd8b           	exg %d6,%a3
    3842:	9687           	subl %d7,%d3
    3844:	9586           	subxl %d6,%d2
    3846:	9385           	subxl %d5,%d1
    3848:	9184           	subxl %d4,%d0
    384a:	6700 010e      	beqw 395a <Ladddf$ret$1>
    384e:	6a00 0012      	bplw 3862 <Lsubdf$0+0x24>
    3852:	2e08           	movel %a0,%d7
    3854:	0847 001f      	bchg #31,%d7
    3858:	2047           	moveal %d7,%a0
    385a:	4483           	negl %d3
    385c:	4082           	negxl %d2
    385e:	4081           	negxl %d1
    3860:	4080           	negxl %d0
    3862:	280a           	movel %a2,%d4
    3864:	2e08           	movel %a0,%d7
    3866:	0287 8000 0000 	andil #-2147483648,%d7
    386c:	4cdf 0c00      	moveml %sp@+,%a2-%a3
    3870:	0800 0036      	btst #54,%d0
    3874:	6700 000c      	beqw 3882 <Lsubdf$0+0x44>
    3878:	e288           	lsrl #1,%d0
    387a:	e291           	roxrl #1,%d1
    387c:	e292           	roxrl #1,%d2
    387e:	e293           	roxrl #1,%d3
    3880:	5244           	addqw #1,%d4
    3882:	41fa 0020      	lea %pc@(38a4 <Lsubdf$1>),%a0
    3886:	43f9 0000 4748 	lea 4748 <_fpCCR>,%a1
    388c:	3c29 0006      	movew %a1@(6),%d6
    3890:	6700 06cc      	beqw 3f5e <Lround$to$nearest>
    3894:	0c46 0002      	cmpiw #2,%d6
    3898:	6200 0728      	bhiw 3fc2 <Lround$to$minus>
    389c:	6d00 0724      	bltw 3fc2 <Lround$to$minus>
    38a0:	6000 0720      	braw 3fc2 <Lround$to$minus>

000038a4 <Lsubdf$1>:
    38a4:	0880 0034      	bclr #52,%d0
    38a8:	e94c           	lslw #4,%d4
    38aa:	4840           	swap %d0
    38ac:	8044           	orw %d4,%d0
    38ae:	4840           	swap %d0
    38b0:	6000 00ac      	braw 395e <Ladddf$ret>

000038b4 <Ladddf$a$small>:
    38b4:	4cdf 0c00      	moveml %sp@+,%a2-%a3
    38b8:	202e 0010      	movel %fp@(16),%d0
    38bc:	222e 0014      	movel %fp@(20),%d1
    38c0:	41f9 0000 4748 	lea 4748 <_fpCCR>,%a0
    38c6:	30bc 0000      	movew #0,%a0@
    38ca:	4cdf 00fc      	moveml %sp@+,%d2-%d7
    38ce:	4e5e           	unlk %fp
    38d0:	4e75           	rts

000038d2 <Ladddf$b$small>:
    38d2:	4cdf 0c00      	moveml %sp@+,%a2-%a3
    38d6:	202e 0008      	movel %fp@(8),%d0
    38da:	222e 000c      	movel %fp@(12),%d1
    38de:	41f9 0000 4748 	lea 4748 <_fpCCR>,%a0
    38e4:	30bc 0000      	movew #0,%a0@
    38e8:	4cdf 00fc      	moveml %sp@+,%d2-%d7
    38ec:	4e5e           	unlk %fp
    38ee:	4e75           	rts

000038f0 <Ladddf$a$den>:
    38f0:	2807           	movel %d7,%d4
    38f2:	6000 fdc0      	braw 36b4 <Ladddf$1>

000038f6 <Ladddf$b$den>:
    38f6:	2a07           	movel %d7,%d5
    38f8:	4686           	notl %d6
    38fa:	6000 fdd0      	braw 36cc <Ladddf$2>

000038fe <Ladddf$b>:
    38fe:	2002           	movel %d2,%d0
    3900:	2203           	movel %d3,%d1
    3902:	6600 0020      	bnew 3924 <Ladddf$a+0x8>
    3906:	0c80 8000 0000 	cmpil #-2147483648,%d0
    390c:	6600 0016      	bnew 3924 <Ladddf$a+0x8>
    3910:	0287 8000 0000 	andil #-2147483648,%d7
    3916:	4280           	clrl %d0
    3918:	6000 0044      	braw 395e <Ladddf$ret>

0000391c <Ladddf$a>:
    391c:	202e 0008      	movel %fp@(8),%d0
    3920:	222e 000c      	movel %fp@(12),%d1
    3924:	7a01           	moveq #1,%d5
    3926:	2e00           	movel %d0,%d7
    3928:	0287 8000 0000 	andil #-2147483648,%d7
    392e:	0880 001f      	bclr #31,%d0
    3932:	0c80 7ff0 0000 	cmpil #2146435072,%d0
    3938:	6c00 0010      	bgew 394a <Ladddf$a+0x2e>
    393c:	2000           	movel %d0,%d0
    393e:	6600 001e      	bnew 395e <Ladddf$ret>
    3942:	0887 001f      	bclr #31,%d7
    3946:	6000 0016      	braw 395e <Ladddf$ret>
    394a:	0280 000f ffff 	andil #1048575,%d0
    3950:	8081           	orl %d1,%d0
    3952:	6600 fcd8      	bnew 362c <Ld$inop>
    3956:	6000 fcae      	braw 3606 <Ld$infty>

0000395a <Ladddf$ret$1>:
    395a:	4cdf 0c00      	moveml %sp@+,%a2-%a3

0000395e <Ladddf$ret>:
    395e:	41f9 0000 4748 	lea 4748 <_fpCCR>,%a0
    3964:	30bc 0000      	movew #0,%a0@
    3968:	8087           	orl %d7,%d0
    396a:	4cdf 00fc      	moveml %sp@+,%d2-%d7
    396e:	4e5e           	unlk %fp
    3970:	4e75           	rts

00003972 <Ladddf$ret$den>:
    3972:	e288           	lsrl #1,%d0
    3974:	e291           	roxrl #1,%d1
    3976:	6000 ffe6      	braw 395e <Ladddf$ret>

0000397a <Ladddf$nf>:
    397a:	7a01           	moveq #1,%d5
    397c:	202e 0008      	movel %fp@(8),%d0
    3980:	222e 000c      	movel %fp@(12),%d1
    3984:	242e 0010      	movel %fp@(16),%d2
    3988:	262e 0014      	movel %fp@(20),%d3
    398c:	283c 7ff0 0000 	movel #2146435072,%d4
    3992:	2e00           	movel %d0,%d7
    3994:	2c02           	movel %d2,%d6
    3996:	0880 001f      	bclr #31,%d0
    399a:	0882 001f      	bclr #31,%d2
    399e:	b084           	cmpl %d4,%d0
    39a0:	6200 fc8a      	bhiw 362c <Ld$inop>
    39a4:	6600 0008      	bnew 39ae <Ladddf$nf+0x34>
    39a8:	4a81           	tstl %d1
    39aa:	6600 fc80      	bnew 362c <Ld$inop>
    39ae:	b484           	cmpl %d4,%d2
    39b0:	6200 fc7a      	bhiw 362c <Ld$inop>
    39b4:	6600 0008      	bnew 39be <Ladddf$nf+0x44>
    39b8:	4a83           	tstl %d3
    39ba:	6600 fc70      	bnew 362c <Ld$inop>
    39be:	bf86           	eorl %d7,%d6
    39c0:	6b00 000c      	bmiw 39ce <Ladddf$nf+0x54>
    39c4:	0287 8000 0000 	andil #-2147483648,%d7
    39ca:	6000 fc3a      	braw 3606 <Ld$infty>
    39ce:	b082           	cmpl %d2,%d0
    39d0:	6600 0008      	bnew 39da <Ladddf$nf+0x60>
    39d4:	b283           	cmpl %d3,%d1
    39d6:	6700 fc54      	beqw 362c <Ld$inop>
    39da:	0287 8000 0000 	andil #-2147483648,%d7
    39e0:	b084           	cmpl %d4,%d0
    39e2:	6700 fc22      	beqw 3606 <Ld$infty>
    39e6:	0847 001f      	bchg #31,%d7
    39ea:	6000 fc1a      	braw 3606 <Ld$infty>

000039ee <__muldf3>:
    39ee:	4e56 0000      	linkw %fp,#0
    39f2:	48e7 3f00      	moveml %d2-%d7,%sp@-
    39f6:	202e 0008      	movel %fp@(8),%d0
    39fa:	222e 000c      	movel %fp@(12),%d1
    39fe:	242e 0010      	movel %fp@(16),%d2
    3a02:	262e 0014      	movel %fp@(20),%d3
    3a06:	2e00           	movel %d0,%d7
    3a08:	b587           	eorl %d2,%d7
    3a0a:	0287 8000 0000 	andil #-2147483648,%d7
    3a10:	2047           	moveal %d7,%a0
    3a12:	2e3c 7ff0 0000 	movel #2146435072,%d7
    3a18:	2c07           	movel %d7,%d6
    3a1a:	4686           	notl %d6
    3a1c:	0880 001f      	bclr #31,%d0
    3a20:	2800           	movel %d0,%d4
    3a22:	8881           	orl %d1,%d4
    3a24:	6700 0120      	beqw 3b46 <Lmuldf$a$0>
    3a28:	2800           	movel %d0,%d4
    3a2a:	0882 001f      	bclr #31,%d2
    3a2e:	2a02           	movel %d2,%d5
    3a30:	8a83           	orl %d3,%d5
    3a32:	6700 0106      	beqw 3b3a <Lmuldf$b$0>
    3a36:	2a02           	movel %d2,%d5
    3a38:	b087           	cmpl %d7,%d0
    3a3a:	6200 00dc      	bhiw 3b18 <Lmuldf$inop>
    3a3e:	6700 00ec      	beqw 3b2c <Lmuldf$a$nf>
    3a42:	b487           	cmpl %d7,%d2
    3a44:	6200 00d2      	bhiw 3b18 <Lmuldf$inop>
    3a48:	6700 00d4      	beqw 3b1e <Lmuldf$b$nf>
    3a4c:	c887           	andl %d7,%d4
    3a4e:	6700 0120      	beqw 3b70 <Lmuldf$a$den>
    3a52:	c086           	andl %d6,%d0
    3a54:	0080 0010 0000 	oril #1048576,%d0
    3a5a:	4844           	swap %d4
    3a5c:	e84c           	lsrw #4,%d4

00003a5e <Lmuldf$1>:
    3a5e:	ca87           	andl %d7,%d5
    3a60:	6700 0124      	beqw 3b86 <Lmuldf$b$den>
    3a64:	c486           	andl %d6,%d2
    3a66:	0082 0010 0000 	oril #1048576,%d2
    3a6c:	4845           	swap %d5
    3a6e:	e84d           	lsrw #4,%d5

00003a70 <Lmuldf$2>:
    3a70:	d845           	addw %d5,%d4
    3a72:	0444 03ff      	subiw #1023,%d4
    3a76:	48e7 0030      	moveml %a2-%a3,%sp@-
    3a7a:	247c 0000 0000 	moveal #0,%a2
    3a80:	2644           	moveal %d4,%a3
    3a82:	ea9a           	rorl #5,%d2
    3a84:	4842           	swap %d2
    3a86:	ea9b           	rorl #5,%d3
    3a88:	4843           	swap %d3
    3a8a:	3c03           	movew %d3,%d6
    3a8c:	0246 07ff      	andiw #2047,%d6
    3a90:	8446           	orw %d6,%d2
    3a92:	0243 f800      	andiw #-2048,%d3
    3a96:	2c02           	movel %d2,%d6
    3a98:	2e03           	movel %d3,%d7
    3a9a:	2800           	movel %d0,%d4
    3a9c:	2a01           	movel %d1,%d5
    3a9e:	7600           	moveq #0,%d3
    3aa0:	2403           	movel %d3,%d2
    3aa2:	2203           	movel %d3,%d1
    3aa4:	2003           	movel %d3,%d0
    3aa6:	227c 0000 0034 	moveal #52,%a1
    3aac:	cf89           	exg %d7,%a1
    3aae:	cf89           	exg %d7,%a1
    3ab0:	d683           	addl %d3,%d3
    3ab2:	d582           	addxl %d2,%d2
    3ab4:	d381           	addxl %d1,%d1
    3ab6:	d180           	addxl %d0,%d0
    3ab8:	de87           	addl %d7,%d7
    3aba:	dd86           	addxl %d6,%d6
    3abc:	6400 000e      	bccw 3acc <Lmuldf$2+0x5c>
    3ac0:	cf8a           	exg %d7,%a2
    3ac2:	d685           	addl %d5,%d3
    3ac4:	d584           	addxl %d4,%d2
    3ac6:	d387           	addxl %d7,%d1
    3ac8:	d187           	addxl %d7,%d0
    3aca:	cf8a           	exg %d7,%a2
    3acc:	cf89           	exg %d7,%a1
    3ace:	51cf ffde      	dbf %d7,3aae <Lmuldf$2+0x3e>
    3ad2:	280b           	movel %a3,%d4
    3ad4:	4cdf 0c00      	moveml %sp@+,%a2-%a3
    3ad8:	4840           	swap %d0
    3ada:	4841           	swap %d1
    3adc:	3001           	movew %d1,%d0
    3ade:	4842           	swap %d2
    3ae0:	3202           	movew %d2,%d1
    3ae2:	4843           	swap %d3
    3ae4:	3403           	movew %d3,%d2
    3ae6:	363c 0000      	movew #0,%d3
    3aea:	e288           	lsrl #1,%d0
    3aec:	e291           	roxrl #1,%d1
    3aee:	e292           	roxrl #1,%d2
    3af0:	e293           	roxrl #1,%d3
    3af2:	e288           	lsrl #1,%d0
    3af4:	e291           	roxrl #1,%d1
    3af6:	e292           	roxrl #1,%d2
    3af8:	e293           	roxrl #1,%d3
    3afa:	e288           	lsrl #1,%d0
    3afc:	e291           	roxrl #1,%d1
    3afe:	e292           	roxrl #1,%d2
    3b00:	e293           	roxrl #1,%d3
    3b02:	2e08           	movel %a0,%d7
    3b04:	7a02           	moveq #2,%d5
    3b06:	0800 0016      	btst #22,%d0
    3b0a:	6700 027a      	beqw 3d86 <Lround$exit>
    3b0e:	e288           	lsrl #1,%d0
    3b10:	e291           	roxrl #1,%d1
    3b12:	5244           	addqw #1,%d4
    3b14:	6000 0270      	braw 3d86 <Lround$exit>

00003b18 <Lmuldf$inop>:
    3b18:	7a02           	moveq #2,%d5
    3b1a:	6000 fb10      	braw 362c <Ld$inop>

00003b1e <Lmuldf$b$nf>:
    3b1e:	7a02           	moveq #2,%d5
    3b20:	2e08           	movel %a0,%d7
    3b22:	4a83           	tstl %d3
    3b24:	6600 fb06      	bnew 362c <Ld$inop>
    3b28:	6000 fadc      	braw 3606 <Ld$infty>

00003b2c <Lmuldf$a$nf>:
    3b2c:	7a02           	moveq #2,%d5
    3b2e:	2e08           	movel %a0,%d7
    3b30:	4a81           	tstl %d1
    3b32:	6600 faf8      	bnew 362c <Ld$inop>
    3b36:	6000 face      	braw 3606 <Ld$infty>

00003b3a <Lmuldf$b$0>:
    3b3a:	7a02           	moveq #2,%d5
    3b3c:	c540           	exg %d2,%d0
    3b3e:	c741           	exg %d3,%d1
    3b40:	2008           	movel %a0,%d0
    3b42:	6000 0010      	braw 3b54 <Lmuldf$a$0+0xe>

00003b46 <Lmuldf$a$0>:
    3b46:	2008           	movel %a0,%d0
    3b48:	242e 0010      	movel %fp@(16),%d2
    3b4c:	262e 0014      	movel %fp@(20),%d3
    3b50:	0882 001f      	bclr #31,%d2
    3b54:	0c82 7ff0 0000 	cmpil #2146435072,%d2
    3b5a:	6c00 fad0      	bgew 362c <Ld$inop>
    3b5e:	41f9 0000 4748 	lea 4748 <_fpCCR>,%a0
    3b64:	30bc 0000      	movew #0,%a0@
    3b68:	4cdf 00fc      	moveml %sp@+,%d2-%d7
    3b6c:	4e5e           	unlk %fp
    3b6e:	4e75           	rts

00003b70 <Lmuldf$a$den>:
    3b70:	7801           	moveq #1,%d4
    3b72:	c086           	andl %d6,%d0
    3b74:	d281           	addl %d1,%d1
    3b76:	d180           	addxl %d0,%d0
    3b78:	5344           	subqw #1,%d4
    3b7a:	0800 0014      	btst #20,%d0
    3b7e:	6600 fede      	bnew 3a5e <Lmuldf$1>
    3b82:	6000 fff0      	braw 3b74 <Lmuldf$a$den+0x4>

00003b86 <Lmuldf$b$den>:
    3b86:	7a01           	moveq #1,%d5
    3b88:	c486           	andl %d6,%d2
    3b8a:	d683           	addl %d3,%d3
    3b8c:	d582           	addxl %d2,%d2
    3b8e:	5345           	subqw #1,%d5
    3b90:	0802 0014      	btst #20,%d2
    3b94:	6600 feda      	bnew 3a70 <Lmuldf$2>
    3b98:	6000 fff0      	braw 3b8a <Lmuldf$b$den+0x4>

00003b9c <__divdf3>:
    3b9c:	4e56 0000      	linkw %fp,#0
    3ba0:	48e7 3f00      	moveml %d2-%d7,%sp@-
    3ba4:	202e 0008      	movel %fp@(8),%d0
    3ba8:	222e 000c      	movel %fp@(12),%d1
    3bac:	242e 0010      	movel %fp@(16),%d2
    3bb0:	262e 0014      	movel %fp@(20),%d3
    3bb4:	2e00           	movel %d0,%d7
    3bb6:	b587           	eorl %d2,%d7
    3bb8:	0287 8000 0000 	andil #-2147483648,%d7
    3bbe:	2047           	moveal %d7,%a0
    3bc0:	2e3c 7ff0 0000 	movel #2146435072,%d7
    3bc6:	2c07           	movel %d7,%d6
    3bc8:	4686           	notl %d6
    3bca:	0880 001f      	bclr #31,%d0
    3bce:	2800           	movel %d0,%d4
    3bd0:	8881           	orl %d1,%d4
    3bd2:	6700 0112      	beqw 3ce6 <Ldivdf$a$0>
    3bd6:	2800           	movel %d0,%d4
    3bd8:	0882 001f      	bclr #31,%d2
    3bdc:	2a02           	movel %d2,%d5
    3bde:	8a83           	orl %d3,%d5
    3be0:	6700 013c      	beqw 3d1e <Ldivdf$b$0>
    3be4:	2a02           	movel %d2,%d5
    3be6:	b087           	cmpl %d7,%d0
    3be8:	6200 00f6      	bhiw 3ce0 <Ldivdf$inop>
    3bec:	6700 0154      	beqw 3d42 <Ldivdf$a$nf>
    3bf0:	b487           	cmpl %d7,%d2
    3bf2:	6200 00ec      	bhiw 3ce0 <Ldivdf$inop>
    3bf6:	6700 013e      	beqw 3d36 <Ldivdf$b$nf>
    3bfa:	c887           	andl %d7,%d4
    3bfc:	6700 015c      	beqw 3d5a <Ldivdf$a$den>
    3c00:	c086           	andl %d6,%d0
    3c02:	0080 0010 0000 	oril #1048576,%d0
    3c08:	4844           	swap %d4
    3c0a:	e84c           	lsrw #4,%d4

00003c0c <Ldivdf$1>:
    3c0c:	ca87           	andl %d7,%d5
    3c0e:	6700 0160      	beqw 3d70 <Ldivdf$b$den>
    3c12:	c486           	andl %d6,%d2
    3c14:	0082 0010 0000 	oril #1048576,%d2
    3c1a:	4845           	swap %d5
    3c1c:	e84d           	lsrw #4,%d5

00003c1e <Ldivdf$2>:
    3c1e:	9845           	subw %d5,%d4
    3c20:	0644 03fe      	addiw #1022,%d4
    3c24:	7c00           	moveq #0,%d6
    3c26:	2e06           	movel %d6,%d7
    3c28:	227c 0000 0000 	moveal #0,%a1
    3c2e:	7a16           	moveq #22,%d5
    3c30:	b480           	cmpl %d0,%d2
    3c32:	6200 000c      	bhiw 3c40 <Ldivdf$2+0x22>
    3c36:	6700 0014      	beqw 3c4c <Ldivdf$2+0x2e>
    3c3a:	9283           	subl %d3,%d1
    3c3c:	9182           	subxl %d2,%d0
    3c3e:	0bc6           	bset %d5,%d6
    3c40:	d281           	addl %d1,%d1
    3c42:	d180           	addxl %d0,%d0
    3c44:	51cd ffea      	dbf %d5,3c30 <Ldivdf$2+0x12>
    3c48:	6000 000c      	braw 3c56 <Ldivdf$2+0x38>
    3c4c:	b681           	cmpl %d1,%d3
    3c4e:	6200 fff0      	bhiw 3c40 <Ldivdf$2+0x22>
    3c52:	6000 ffe6      	braw 3c3a <Ldivdf$2+0x1c>
    3c56:	7a1f           	moveq #31,%d5
    3c58:	b480           	cmpl %d0,%d2
    3c5a:	6200 000c      	bhiw 3c68 <Ldivdf$2+0x4a>
    3c5e:	6700 0014      	beqw 3c74 <Ldivdf$2+0x56>
    3c62:	9283           	subl %d3,%d1
    3c64:	9182           	subxl %d2,%d0
    3c66:	0bc7           	bset %d5,%d7
    3c68:	d281           	addl %d1,%d1
    3c6a:	d180           	addxl %d0,%d0
    3c6c:	51cd ffea      	dbf %d5,3c58 <Ldivdf$2+0x3a>
    3c70:	6000 000c      	braw 3c7e <Ldivdf$2+0x60>
    3c74:	b681           	cmpl %d1,%d3
    3c76:	6200 fff0      	bhiw 3c68 <Ldivdf$2+0x4a>
    3c7a:	6000 ffe6      	braw 3c62 <Ldivdf$2+0x44>
    3c7e:	7a35           	moveq #53,%d5
    3c80:	b082           	cmpl %d2,%d0
    3c82:	6200 001c      	bhiw 3ca0 <Ldivdf$2+0x82>
    3c86:	6700 0012      	beqw 3c9a <Ldivdf$2+0x7c>
    3c8a:	d281           	addl %d1,%d1
    3c8c:	d180           	addxl %d0,%d0
    3c8e:	51cd fff0      	dbf %d5,3c80 <Ldivdf$2+0x62>
    3c92:	7400           	moveq #0,%d2
    3c94:	2602           	movel %d2,%d3
    3c96:	6000 0028      	braw 3cc0 <Ldivdf$2+0xa2>
    3c9a:	b681           	cmpl %d1,%d3
    3c9c:	6200 ffec      	bhiw 3c8a <Ldivdf$2+0x6c>
    3ca0:	7400           	moveq #0,%d2
    3ca2:	2602           	movel %d2,%d3
    3ca4:	0445 0035      	subiw #53,%d5
    3ca8:	0645 003f      	addiw #63,%d5
    3cac:	0c45 001f      	cmpiw #31,%d5
    3cb0:	6200 000c      	bhiw 3cbe <Ldivdf$2+0xa0>
    3cb4:	0bc3           	bset %d5,%d3
    3cb6:	6000 0008      	braw 3cc0 <Ldivdf$2+0xa2>
    3cba:	0445 0020      	subiw #32,%d5
    3cbe:	0bc2           	bset %d5,%d2
    3cc0:	2006           	movel %d6,%d0
    3cc2:	2207           	movel %d7,%d1
    3cc4:	7600           	moveq #0,%d3
    3cc6:	0800 0016      	btst #22,%d0
    3cca:	6700 000c      	beqw 3cd8 <Ldivdf$2+0xba>
    3cce:	e288           	lsrl #1,%d0
    3cd0:	e291           	roxrl #1,%d1
    3cd2:	e292           	roxrl #1,%d2
    3cd4:	e293           	roxrl #1,%d3
    3cd6:	5244           	addqw #1,%d4
    3cd8:	2e08           	movel %a0,%d7
    3cda:	7a03           	moveq #3,%d5
    3cdc:	6000 00a8      	braw 3d86 <Lround$exit>

00003ce0 <Ldivdf$inop>:
    3ce0:	7a03           	moveq #3,%d5
    3ce2:	6000 f948      	braw 362c <Ld$inop>

00003ce6 <Ldivdf$a$0>:
    3ce6:	7a03           	moveq #3,%d5
    3ce8:	0882 001f      	bclr #31,%d2
    3cec:	2802           	movel %d2,%d4
    3cee:	8883           	orl %d3,%d4
    3cf0:	6700 f93a      	beqw 362c <Ld$inop>
    3cf4:	0c82 7ff0 0000 	cmpil #2146435072,%d2
    3cfa:	6200 f930      	bhiw 362c <Ld$inop>
    3cfe:	6d00 0008      	bltw 3d08 <Ldivdf$a$0+0x22>
    3d02:	4a83           	tstl %d3
    3d04:	6600 f926      	bnew 362c <Ld$inop>
    3d08:	2008           	movel %a0,%d0
    3d0a:	7200           	moveq #0,%d1
    3d0c:	41f9 0000 4748 	lea 4748 <_fpCCR>,%a0
    3d12:	30bc 0000      	movew #0,%a0@
    3d16:	4cdf 00fc      	moveml %sp@+,%d2-%d7
    3d1a:	4e5e           	unlk %fp
    3d1c:	4e75           	rts

00003d1e <Ldivdf$b$0>:
    3d1e:	7a03           	moveq #3,%d5
    3d20:	2e08           	movel %a0,%d7
    3d22:	0c80 7ff0 0000 	cmpil #2146435072,%d0
    3d28:	6200 f902      	bhiw 362c <Ld$inop>
    3d2c:	4a81           	tstl %d1
    3d2e:	6600 f8fc      	bnew 362c <Ld$inop>
    3d32:	6000 f908      	braw 363c <Ld$div$0>

00003d36 <Ldivdf$b$nf>:
    3d36:	7a03           	moveq #3,%d5
    3d38:	4a83           	tstl %d3
    3d3a:	6600 f8f0      	bnew 362c <Ld$inop>
    3d3e:	6000 f8dc      	braw 361c <Ld$underflow>

00003d42 <Ldivdf$a$nf>:
    3d42:	7a03           	moveq #3,%d5
    3d44:	4a81           	tstl %d1
    3d46:	6600 f8e4      	bnew 362c <Ld$inop>
    3d4a:	b487           	cmpl %d7,%d2
    3d4c:	6c00 f8de      	bgew 362c <Ld$inop>
    3d50:	4a83           	tstl %d3
    3d52:	6600 f8d8      	bnew 362c <Ld$inop>
    3d56:	6000 f8ae      	braw 3606 <Ld$infty>

00003d5a <Ldivdf$a$den>:
    3d5a:	7801           	moveq #1,%d4
    3d5c:	c086           	andl %d6,%d0
    3d5e:	d281           	addl %d1,%d1
    3d60:	d180           	addxl %d0,%d0
    3d62:	5344           	subqw #1,%d4
    3d64:	0800 0014      	btst #20,%d0
    3d68:	6600 fea2      	bnew 3c0c <Ldivdf$1>
    3d6c:	6000 fff0      	braw 3d5e <Ldivdf$a$den+0x4>

00003d70 <Ldivdf$b$den>:
    3d70:	7a01           	moveq #1,%d5
    3d72:	c486           	andl %d6,%d2
    3d74:	d683           	addl %d3,%d3
    3d76:	d582           	addxl %d2,%d2
    3d78:	5345           	subqw #1,%d5
    3d7a:	0802 0014      	btst #20,%d2
    3d7e:	6600 fe9e      	bnew 3c1e <Ldivdf$2>
    3d82:	6000 fff0      	braw 3d74 <Ldivdf$b$den+0x4>

00003d86 <Lround$exit>:
    3d86:	0c44 ffca      	cmpiw #-54,%d4
    3d8a:	6d00 f890      	bltw 361c <Ld$underflow>
    3d8e:	2047           	moveal %d7,%a0
    3d90:	7c00           	moveq #0,%d6
    3d92:	2e06           	movel %d6,%d7
    3d94:	0c44 0001      	cmpiw #1,%d4
    3d98:	6c00 0020      	bgew 3dba <Lround$exit+0x34>
    3d9c:	5244           	addqw #1,%d4
    3d9e:	e288           	lsrl #1,%d0
    3da0:	e291           	roxrl #1,%d1
    3da2:	e292           	roxrl #1,%d2
    3da4:	e293           	roxrl #1,%d3
    3da6:	e296           	roxrl #1,%d6
    3da8:	e297           	roxrl #1,%d7
    3daa:	0c44 0001      	cmpiw #1,%d4
    3dae:	6700 000a      	beqw 3dba <Lround$exit+0x34>
    3db2:	6000 ffe8      	braw 3d9c <Lround$exit+0x16>
    3db6:	6000 f864      	braw 361c <Ld$underflow>
    3dba:	8486           	orl %d6,%d2
    3dbc:	8687           	orl %d7,%d3
    3dbe:	2e08           	movel %a0,%d7
    3dc0:	41fa 0020      	lea %pc@(3de2 <Lround$0>),%a0
    3dc4:	43f9 0000 4748 	lea 4748 <_fpCCR>,%a1
    3dca:	3c29 0006      	movew %a1@(6),%d6
    3dce:	6700 018e      	beqw 3f5e <Lround$to$nearest>
    3dd2:	0c46 0002      	cmpiw #2,%d6
    3dd6:	6200 01ea      	bhiw 3fc2 <Lround$to$minus>
    3dda:	6d00 01e6      	bltw 3fc2 <Lround$to$minus>
    3dde:	6000 01e2      	braw 3fc2 <Lround$to$minus>

00003de2 <Lround$0>:
    3de2:	0c44 07ff      	cmpiw #2047,%d4
    3de6:	6c00 f81e      	bgew 3606 <Ld$infty>
    3dea:	3804           	movew %d4,%d4
    3dec:	6700 f80a      	beqw 35f8 <Ld$den>
    3df0:	e94c           	lslw #4,%d4
    3df2:	0880 0014      	bclr #20,%d0
    3df6:	4840           	swap %d0
    3df8:	8044           	orw %d4,%d0
    3dfa:	4840           	swap %d0
    3dfc:	8087           	orl %d7,%d0
    3dfe:	41f9 0000 4748 	lea 4748 <_fpCCR>,%a0
    3e04:	30bc 0000      	movew #0,%a0@
    3e08:	4cdf 00fc      	moveml %sp@+,%d2-%d7
    3e0c:	4e5e           	unlk %fp
    3e0e:	4e75           	rts

00003e10 <__negdf2>:
    3e10:	4e56 0000      	linkw %fp,#0
    3e14:	48e7 3f00      	moveml %d2-%d7,%sp@-
    3e18:	7a04           	moveq #4,%d5
    3e1a:	202e 0008      	movel %fp@(8),%d0
    3e1e:	222e 000c      	movel %fp@(12),%d1
    3e22:	0840 001f      	bchg #31,%d0
    3e26:	2400           	movel %d0,%d2
    3e28:	0882 001f      	bclr #31,%d2
    3e2c:	2802           	movel %d2,%d4
    3e2e:	8881           	orl %d1,%d4
    3e30:	6700 0034      	beqw 3e66 <__negdf2+0x56>
    3e34:	0c82 7ff0 0000 	cmpil #2146435072,%d2
    3e3a:	6d00 0018      	bltw 3e54 <__negdf2+0x44>
    3e3e:	6200 f7ec      	bhiw 362c <Ld$inop>
    3e42:	4a81           	tstl %d1
    3e44:	6600 f7e6      	bnew 362c <Ld$inop>
    3e48:	2e00           	movel %d0,%d7
    3e4a:	0287 8000 0000 	andil #-2147483648,%d7
    3e50:	6000 f7b4      	braw 3606 <Ld$infty>
    3e54:	41f9 0000 4748 	lea 4748 <_fpCCR>,%a0
    3e5a:	30bc 0000      	movew #0,%a0@
    3e5e:	4cdf 00fc      	moveml %sp@+,%d2-%d7
    3e62:	4e5e           	unlk %fp
    3e64:	4e75           	rts
    3e66:	0880 001f      	bclr #31,%d0
    3e6a:	6000 ffe8      	braw 3e54 <__negdf2+0x44>

00003e6e <__cmpdf2_internal>:
    3e6e:	4e56 0000      	linkw %fp,#0
    3e72:	48e7 3f00      	moveml %d2-%d7,%sp@-
    3e76:	7a05           	moveq #5,%d5
    3e78:	202e 0008      	movel %fp@(8),%d0
    3e7c:	222e 000c      	movel %fp@(12),%d1
    3e80:	242e 0010      	movel %fp@(16),%d2
    3e84:	262e 0014      	movel %fp@(20),%d3
    3e88:	2c00           	movel %d0,%d6
    3e8a:	0880 001f      	bclr #31,%d0
    3e8e:	2e02           	movel %d2,%d7
    3e90:	0882 001f      	bclr #31,%d2
    3e94:	0c80 7ff0 0000 	cmpil #2146435072,%d0
    3e9a:	6200 0094      	bhiw 3f30 <Lcmpd$inop>
    3e9e:	6700 007c      	beqw 3f1c <Lcmpdf$a$nf>
    3ea2:	2800           	movel %d0,%d4
    3ea4:	8881           	orl %d1,%d4
    3ea6:	6700 0064      	beqw 3f0c <Lcmpdf$a$0>

00003eaa <Lcmpdf$0>:
    3eaa:	0c82 7ff0 0000 	cmpil #2146435072,%d2
    3eb0:	6200 007e      	bhiw 3f30 <Lcmpd$inop>
    3eb4:	6700 0070      	beqw 3f26 <Lcmpdf$b$nf>
    3eb8:	2802           	movel %d2,%d4
    3eba:	8883           	orl %d3,%d4
    3ebc:	6700 0056      	beqw 3f14 <Lcmpdf$b$0>

00003ec0 <Lcmpdf$1>:
    3ec0:	bd87           	eorl %d6,%d7
    3ec2:	6a00 000c      	bplw 3ed0 <Lcmpdf$1+0x10>
    3ec6:	4a86           	tstl %d6
    3ec8:	6a00 002e      	bplw 3ef8 <Lcmpdf$a$gt$b>
    3ecc:	6b00 0034      	bmiw 3f02 <Lcmpdf$b$gt$a>
    3ed0:	4a86           	tstl %d6
    3ed2:	6a00 0006      	bplw 3eda <Lcmpdf$1+0x1a>
    3ed6:	c142           	exg %d0,%d2
    3ed8:	c343           	exg %d1,%d3
    3eda:	b480           	cmpl %d0,%d2
    3edc:	6200 0024      	bhiw 3f02 <Lcmpdf$b$gt$a>
    3ee0:	6600 0016      	bnew 3ef8 <Lcmpdf$a$gt$b>
    3ee4:	b681           	cmpl %d1,%d3
    3ee6:	6200 001a      	bhiw 3f02 <Lcmpdf$b$gt$a>
    3eea:	6600 000c      	bnew 3ef8 <Lcmpdf$a$gt$b>
    3eee:	7000           	moveq #0,%d0
    3ef0:	4cdf 00fc      	moveml %sp@+,%d2-%d7
    3ef4:	4e5e           	unlk %fp
    3ef6:	4e75           	rts

00003ef8 <Lcmpdf$a$gt$b>:
    3ef8:	7001           	moveq #1,%d0
    3efa:	4cdf 00fc      	moveml %sp@+,%d2-%d7
    3efe:	4e5e           	unlk %fp
    3f00:	4e75           	rts

00003f02 <Lcmpdf$b$gt$a>:
    3f02:	70ff           	moveq #-1,%d0
    3f04:	4cdf 00fc      	moveml %sp@+,%d2-%d7
    3f08:	4e5e           	unlk %fp
    3f0a:	4e75           	rts

00003f0c <Lcmpdf$a$0>:
    3f0c:	0886 001f      	bclr #31,%d6
    3f10:	6000 ff98      	braw 3eaa <Lcmpdf$0>

00003f14 <Lcmpdf$b$0>:
    3f14:	0887 001f      	bclr #31,%d7
    3f18:	6000 ffa6      	braw 3ec0 <Lcmpdf$1>

00003f1c <Lcmpdf$a$nf>:
    3f1c:	4a81           	tstl %d1
    3f1e:	6600 f70c      	bnew 362c <Ld$inop>
    3f22:	6000 ff86      	braw 3eaa <Lcmpdf$0>

00003f26 <Lcmpdf$b$nf>:
    3f26:	4a83           	tstl %d3
    3f28:	6600 f702      	bnew 362c <Ld$inop>
    3f2c:	6000 ff92      	braw 3ec0 <Lcmpdf$1>

00003f30 <Lcmpd$inop>:
    3f30:	202e 0018      	movel %fp@(24),%d0
    3f34:	7e11           	moveq #17,%d7
    3f36:	7c02           	moveq #2,%d6
    3f38:	4ef9 0000 3fd2 	jmp 3fd2 <$_exception_handler>

00003f3e <__cmpdf2>:
    3f3e:	4e56 0000      	linkw %fp,#0
    3f42:	4878 0001      	pea 1 <ADD>
    3f46:	2f2e 0014      	movel %fp@(20),%sp@-
    3f4a:	2f2e 0010      	movel %fp@(16),%sp@-
    3f4e:	2f2e 000c      	movel %fp@(12),%sp@-
    3f52:	2f2e 0008      	movel %fp@(8),%sp@-
    3f56:	6100 ff16      	bsrw 3e6e <__cmpdf2_internal>
    3f5a:	4e5e           	unlk %fp
    3f5c:	4e75           	rts

00003f5e <Lround$to$nearest>:
    3f5e:	0800 0015      	btst #21,%d0
    3f62:	6600 0016      	bnew 3f7a <Lround$to$nearest+0x1c>
    3f66:	0c44 0001      	cmpiw #1,%d4
    3f6a:	6700 000e      	beqw 3f7a <Lround$to$nearest+0x1c>
    3f6e:	d683           	addl %d3,%d3
    3f70:	d582           	addxl %d2,%d2
    3f72:	d381           	addxl %d1,%d1
    3f74:	d180           	addxl %d0,%d0
    3f76:	51cc ffe6      	dbf %d4,3f5e <Lround$to$nearest>
    3f7a:	0801 0000      	btst #0,%d1
    3f7e:	6700 0022      	beqw 3fa2 <Lround$to$nearest+0x44>
    3f82:	8682           	orl %d2,%d3
    3f84:	6600 0014      	bnew 3f9a <Lround$to$nearest+0x3c>
    3f88:	2601           	movel %d1,%d3
    3f8a:	0283 0000 0002 	andil #2,%d3
    3f90:	7400           	moveq #0,%d2
    3f92:	d283           	addl %d3,%d1
    3f94:	d182           	addxl %d2,%d0
    3f96:	6000 000a      	braw 3fa2 <Lround$to$nearest+0x44>
    3f9a:	7601           	moveq #1,%d3
    3f9c:	7400           	moveq #0,%d2
    3f9e:	d283           	addl %d3,%d1
    3fa0:	d182           	addxl %d2,%d0
    3fa2:	e288           	lsrl #1,%d0
    3fa4:	e291           	roxrl #1,%d1
    3fa6:	0800 0015      	btst #21,%d0
    3faa:	6700 0008      	beqw 3fb4 <Lround$to$nearest+0x56>
    3fae:	e288           	lsrl #1,%d0
    3fb0:	e291           	roxrl #1,%d1
    3fb2:	5244           	addqw #1,%d4
    3fb4:	0800 0014      	btst #20,%d0
    3fb8:	6700 0004      	beqw 3fbe <Lround$to$nearest+0x60>
    3fbc:	4ed0           	jmp %a0@
    3fbe:	7800           	moveq #0,%d4
    3fc0:	4ed0           	jmp %a0@

00003fc2 <Lround$to$minus>:
    3fc2:	4ed0           	jmp %a0@

00003fc4 <__clear_sticky_bit>:
    3fc4:	41f9 0000 4748 	lea 4748 <_fpCCR>,%a0
    3fca:	317c 0000 0004 	movew #0,%a0@(4)
    3fd0:	4e75           	rts

00003fd2 <$_exception_handler>:
    3fd2:	41f9 0000 4748 	lea 4748 <_fpCCR>,%a0
    3fd8:	3087           	movew %d7,%a0@
    3fda:	8f68 0004      	orw %d7,%a0@(4)
    3fde:	3146 0008      	movew %d6,%a0@(8)
    3fe2:	3145 000a      	movew %d5,%a0@(10)
    3fe6:	0c46 0001      	cmpiw #1,%d6
    3fea:	6700 001e      	beqw 400a <$_exception_handler+0x38>
    3fee:	216e 0008 000c 	movel %fp@(8),%a0@(12)
    3ff4:	216e 000c 0010 	movel %fp@(12),%a0@(16)
    3ffa:	216e 0010 0014 	movel %fp@(16),%a0@(20)
    4000:	216e 0014 0018 	movel %fp@(20),%a0@(24)
    4006:	6000 000e      	braw 4016 <$_exception_handler+0x44>
    400a:	216e 0008 000c 	movel %fp@(8),%a0@(12)
    4010:	216e 000c 0014 	movel %fp@(12),%a0@(20)
    4016:	ce68 0002      	andw %a0@(2),%d7
    401a:	6700 000a      	beqw 4026 <$_exception_handler+0x54>
    401e:	4879 0000 4748 	pea 4748 <_fpCCR>
    4024:	4e4f           	trap #15
    4026:	4cdf 00fc      	moveml %sp@+,%d2-%d7
    402a:	4e5e           	unlk %fp
    402c:	4e75           	rts
	...

00004030 <__nedf2>:
    4030:	4e56 0000      	linkw %fp,#0
    4034:	4878 0001      	pea 1 <ADD>
    4038:	2f2e 0014      	movel %fp@(20),%sp@-
    403c:	2f2e 0010      	movel %fp@(16),%sp@-
    4040:	2f2e 000c      	movel %fp@(12),%sp@-
    4044:	2f2e 0008      	movel %fp@(8),%sp@-
    4048:	4eb9 0000 3e6e 	jsr 3e6e <__cmpdf2_internal>
    404e:	4e5e           	unlk %fp
    4050:	4e75           	rts
	...

00004054 <__gtdf2>:
    4054:	4e56 0000      	linkw %fp,#0
    4058:	4878 ffff      	pea ffffffff <LESS+0x0>
    405c:	2f2e 0014      	movel %fp@(20),%sp@-
    4060:	2f2e 0010      	movel %fp@(16),%sp@-
    4064:	2f2e 000c      	movel %fp@(12),%sp@-
    4068:	2f2e 0008      	movel %fp@(8),%sp@-
    406c:	4eb9 0000 3e6e 	jsr 3e6e <__cmpdf2_internal>
    4072:	4e5e           	unlk %fp
    4074:	4e75           	rts
	...

00004078 <__ltdf2>:
    4078:	4e56 0000      	linkw %fp,#0
    407c:	4878 0001      	pea 1 <ADD>
    4080:	2f2e 0014      	movel %fp@(20),%sp@-
    4084:	2f2e 0010      	movel %fp@(16),%sp@-
    4088:	2f2e 000c      	movel %fp@(12),%sp@-
    408c:	2f2e 0008      	movel %fp@(8),%sp@-
    4090:	4eb9 0000 3e6e 	jsr 3e6e <__cmpdf2_internal>
    4096:	4e5e           	unlk %fp
    4098:	4e75           	rts
	...

0000409c <__ledf2>:
    409c:	4e56 0000      	linkw %fp,#0
    40a0:	4878 0001      	pea 1 <ADD>
    40a4:	2f2e 0014      	movel %fp@(20),%sp@-
    40a8:	2f2e 0010      	movel %fp@(16),%sp@-
    40ac:	2f2e 000c      	movel %fp@(12),%sp@-
    40b0:	2f2e 0008      	movel %fp@(8),%sp@-
    40b4:	4eb9 0000 3e6e 	jsr 3e6e <__cmpdf2_internal>
    40ba:	4e5e           	unlk %fp
    40bc:	4e75           	rts
	...

000040c0 <__fixunsdfsi>:
    40c0:	48e7 3c00      	moveml %d2-%d5,%sp@-
    40c4:	242f 0014      	movel %sp@(20),%d2
    40c8:	262f 0018      	movel %sp@(24),%d3
    40cc:	283c 41e0 0000 	movel #1105199104,%d4
    40d2:	4285           	clrl %d5
    40d4:	2f05           	movel %d5,%sp@-
    40d6:	2f04           	movel %d4,%sp@-
    40d8:	2f03           	movel %d3,%sp@-
    40da:	2f02           	movel %d2,%sp@-
    40dc:	4eb9 0000 4684 	jsr 4684 <__gedf2>
    40e2:	4fef 0010      	lea %sp@(16),%sp
    40e6:	4a80           	tstl %d0
    40e8:	6c12           	bges 40fc <__fixunsdfsi+0x3c>
    40ea:	2f03           	movel %d3,%sp@-
    40ec:	2f02           	movel %d2,%sp@-
    40ee:	4eb9 0000 453a 	jsr 453a <__fixdfsi>
    40f4:	508f           	addql #8,%sp
    40f6:	4cdf 003c      	moveml %sp@+,%d2-%d5
    40fa:	4e75           	rts
    40fc:	2f05           	movel %d5,%sp@-
    40fe:	2f04           	movel %d4,%sp@-
    4100:	2f03           	movel %d3,%sp@-
    4102:	2f02           	movel %d2,%sp@-
    4104:	4eb9 0000 3652 	jsr 3652 <__subdf3>
    410a:	4fef 000c      	lea %sp@(12),%sp
    410e:	2e81           	movel %d1,%sp@
    4110:	2f00           	movel %d0,%sp@-
    4112:	4eb9 0000 453a 	jsr 453a <__fixdfsi>
    4118:	508f           	addql #8,%sp
    411a:	0680 8000 0000 	addil #-2147483648,%d0
    4120:	4cdf 003c      	moveml %sp@+,%d2-%d5
    4124:	4e75           	rts
	...

00004128 <__floatsidf.part.0>:
    4128:	48e7 3800      	moveml %d2-%d4,%sp@-
    412c:	202f 0010      	movel %sp@(16),%d0
    4130:	6b52           	bmis 4184 <__floatsidf.part.0+0x5c>
    4132:	7400           	moveq #0,%d2
    4134:	223c 0000 041d 	movel #1053,%d1
    413a:	0c80 00ff ffff 	cmpil #16777215,%d0
    4140:	6e5a           	bgts 419c <__floatsidf.part.0+0x74>
    4142:	e988           	lsll #4,%d0
    4144:	5981           	subql #4,%d1
    4146:	0c80 00ff ffff 	cmpil #16777215,%d0
    414c:	6ff4           	bles 4142 <__floatsidf.part.0+0x1a>
    414e:	d080           	addl %d0,%d0
    4150:	5381           	subql #1,%d1
    4152:	0c80 3fff ffff 	cmpil #1073741823,%d0
    4158:	6ff4           	bles 414e <__floatsidf.part.0+0x26>
    415a:	2601           	movel %d1,%d3
    415c:	e94b           	lslw #4,%d3
    415e:	4843           	swap %d3
    4160:	4243           	clrw %d3
    4162:	2200           	movel %d0,%d1
    4164:	780a           	moveq #10,%d4
    4166:	e8a1           	asrl %d4,%d1
    4168:	0881 0014      	bclr #20,%d1
    416c:	8483           	orl %d3,%d2
    416e:	2801           	movel %d1,%d4
    4170:	8882           	orl %d2,%d4
    4172:	2600           	movel %d0,%d3
    4174:	ed4b           	lslw #6,%d3
    4176:	4843           	swap %d3
    4178:	4243           	clrw %d3
    417a:	2004           	movel %d4,%d0
    417c:	2203           	movel %d3,%d1
    417e:	4cdf 001c      	moveml %sp@+,%d2-%d4
    4182:	4e75           	rts
    4184:	4480           	negl %d0
    4186:	6b40           	bmis 41c8 <__floatsidf.part.0+0xa0>
    4188:	243c 8000 0000 	movel #-2147483648,%d2
    418e:	223c 0000 041d 	movel #1053,%d1
    4194:	0c80 00ff ffff 	cmpil #16777215,%d0
    419a:	6fa6           	bles 4142 <__floatsidf.part.0+0x1a>
    419c:	263c 41d0 0000 	movel #1104150528,%d3
    41a2:	0c80 3fff ffff 	cmpil #1073741823,%d0
    41a8:	6fa4           	bles 414e <__floatsidf.part.0+0x26>
    41aa:	2200           	movel %d0,%d1
    41ac:	780a           	moveq #10,%d4
    41ae:	e8a1           	asrl %d4,%d1
    41b0:	0881 0014      	bclr #20,%d1
    41b4:	8483           	orl %d3,%d2
    41b6:	2801           	movel %d1,%d4
    41b8:	8882           	orl %d2,%d4
    41ba:	2600           	movel %d0,%d3
    41bc:	ed4b           	lslw #6,%d3
    41be:	4843           	swap %d3
    41c0:	4243           	clrw %d3
    41c2:	2004           	movel %d4,%d0
    41c4:	2203           	movel %d3,%d1
    41c6:	60b6           	bras 417e <__floatsidf.part.0+0x56>
    41c8:	203c c1e0 0000 	movel #-1042284544,%d0
    41ce:	4281           	clrl %d1
    41d0:	4cdf 001c      	moveml %sp@+,%d2-%d4
    41d4:	4e75           	rts

000041d6 <__unordsf2>:
    41d6:	2f02           	movel %d2,%sp@-
    41d8:	222f 0008      	movel %sp@(8),%d1
    41dc:	2001           	movel %d1,%d0
    41de:	4840           	swap %d0
    41e0:	ee40           	asrw #7,%d0
    41e2:	48c0           	extl %d0
    41e4:	7400           	moveq #0,%d2
    41e6:	4602           	notb %d2
    41e8:	c082           	andl %d2,%d0
    41ea:	b480           	cmpl %d0,%d2
    41ec:	671a           	beqs 4208 <__unordsf2+0x32>
    41ee:	202f 000c      	movel %sp@(12),%d0
    41f2:	4840           	swap %d0
    41f4:	ee40           	asrw #7,%d0
    41f6:	48c0           	extl %d0
    41f8:	7200           	moveq #0,%d1
    41fa:	4601           	notb %d1
    41fc:	c081           	andl %d1,%d0
    41fe:	b280           	cmpl %d0,%d1
    4200:	6714           	beqs 4216 <__unordsf2+0x40>
    4202:	7000           	moveq #0,%d0
    4204:	241f           	movel %sp@+,%d2
    4206:	4e75           	rts
    4208:	0281 007f ffff 	andil #8388607,%d1
    420e:	67de           	beqs 41ee <__unordsf2+0x18>
    4210:	7001           	moveq #1,%d0
    4212:	241f           	movel %sp@+,%d2
    4214:	4e75           	rts
    4216:	202f 000c      	movel %sp@(12),%d0
    421a:	0280 007f ffff 	andil #8388607,%d0
    4220:	56c0           	sne %d0
    4222:	4880           	extw %d0
    4224:	48c0           	extl %d0
    4226:	4480           	negl %d0
    4228:	241f           	movel %sp@+,%d2
    422a:	4e75           	rts

0000422c <__unorddf2>:
    422c:	48e7 3800      	moveml %d2-%d4,%sp@-
    4230:	242f 0010      	movel %sp@(16),%d2
    4234:	262f 0014      	movel %sp@(20),%d3
    4238:	202f 0018      	movel %sp@(24),%d0
    423c:	282f 001c      	movel %sp@(28),%d4
    4240:	2202           	movel %d2,%d1
    4242:	4841           	swap %d1
    4244:	e841           	asrw #4,%d1
    4246:	48c1           	extl %d1
    4248:	0281 0000 07ff 	andil #2047,%d1
    424e:	0c81 0000 07ff 	cmpil #2047,%d1
    4254:	671e           	beqs 4274 <__unorddf2+0x48>
    4256:	2200           	movel %d0,%d1
    4258:	4841           	swap %d1
    425a:	e841           	asrw #4,%d1
    425c:	48c1           	extl %d1
    425e:	0281 0000 07ff 	andil #2047,%d1
    4264:	0c81 0000 07ff 	cmpil #2047,%d1
    426a:	671a           	beqs 4286 <__unorddf2+0x5a>
    426c:	7000           	moveq #0,%d0
    426e:	4cdf 001c      	moveml %sp@+,%d2-%d4
    4272:	4e75           	rts
    4274:	0282 000f ffff 	andil #1048575,%d2
    427a:	8483           	orl %d3,%d2
    427c:	67d8           	beqs 4256 <__unorddf2+0x2a>
    427e:	7001           	moveq #1,%d0
    4280:	4cdf 001c      	moveml %sp@+,%d2-%d4
    4284:	4e75           	rts
    4286:	0280 000f ffff 	andil #1048575,%d0
    428c:	8084           	orl %d4,%d0
    428e:	56c0           	sne %d0
    4290:	4880           	extw %d0
    4292:	48c0           	extl %d0
    4294:	4480           	negl %d0
    4296:	4cdf 001c      	moveml %sp@+,%d2-%d4
    429a:	4e75           	rts

0000429c <__floatunsidf>:
    429c:	48e7 3800      	moveml %d2-%d4,%sp@-
    42a0:	202f 0010      	movel %sp@(16),%d0
    42a4:	6748           	beqs 42ee <__floatunsidf+0x52>
    42a6:	0c80 01ff ffff 	cmpil #33554431,%d0
    42ac:	624a           	bhis 42f8 <__floatunsidf+0x5c>
    42ae:	223c 0000 041e 	movel #1054,%d1
    42b4:	e988           	lsll #4,%d0
    42b6:	5981           	subql #4,%d1
    42b8:	0c80 01ff ffff 	cmpil #33554431,%d0
    42be:	63f4           	blss 42b4 <__floatunsidf+0x18>
    42c0:	d080           	addl %d0,%d0
    42c2:	5381           	subql #1,%d1
    42c4:	4a80           	tstl %d0
    42c6:	6cf8           	bges 42c0 <__floatunsidf+0x24>
    42c8:	e949           	lslw #4,%d1
    42ca:	4841           	swap %d1
    42cc:	4241           	clrw %d1
    42ce:	2400           	movel %d0,%d2
    42d0:	760b           	moveq #11,%d3
    42d2:	e6aa           	lsrl %d3,%d2
    42d4:	0882 0014      	bclr #20,%d2
    42d8:	2802           	movel %d2,%d4
    42da:	8881           	orl %d1,%d4
    42dc:	2600           	movel %d0,%d3
    42de:	eb4b           	lslw #5,%d3
    42e0:	4843           	swap %d3
    42e2:	4243           	clrw %d3
    42e4:	2004           	movel %d4,%d0
    42e6:	2203           	movel %d3,%d1
    42e8:	4cdf 001c      	moveml %sp@+,%d2-%d4
    42ec:	4e75           	rts
    42ee:	4280           	clrl %d0
    42f0:	4281           	clrl %d1
    42f2:	4cdf 001c      	moveml %sp@+,%d2-%d4
    42f6:	4e75           	rts
    42f8:	223c 41e0 0000 	movel #1105199104,%d1
    42fe:	4a80           	tstl %d0
    4300:	6dcc           	blts 42ce <__floatunsidf+0x32>
    4302:	223c 0000 041e 	movel #1054,%d1
    4308:	d080           	addl %d0,%d0
    430a:	5381           	subql #1,%d1
    430c:	4a80           	tstl %d0
    430e:	6cb0           	bges 42c0 <__floatunsidf+0x24>
    4310:	60b6           	bras 42c8 <__floatunsidf+0x2c>

00004312 <__floatsidf>:
    4312:	202f 0004      	movel %sp@(4),%d0
    4316:	6704           	beqs 431c <__floatsidf+0xa>
    4318:	6000 fe0e      	braw 4128 <__floatsidf.part.0>
    431c:	4280           	clrl %d0
    431e:	4281           	clrl %d1
    4320:	4e75           	rts

00004322 <__floatunsisf>:
    4322:	48e7 3800      	moveml %d2-%d4,%sp@-
    4326:	202f 0010      	movel %sp@(16),%d0
    432a:	674e           	beqs 437a <__floatunsisf+0x58>
    432c:	0c80 01ff ffff 	cmpil #33554431,%d0
    4332:	624e           	bhis 4382 <__floatunsisf+0x60>
    4334:	223c 0000 041e 	movel #1054,%d1
    433a:	e988           	lsll #4,%d0
    433c:	5981           	subql #4,%d1
    433e:	0c80 01ff ffff 	cmpil #33554431,%d0
    4344:	63f4           	blss 433a <__floatunsisf+0x18>
    4346:	d080           	addl %d0,%d0
    4348:	5381           	subql #1,%d1
    434a:	4a80           	tstl %d0
    434c:	6cf8           	bges 4346 <__floatunsisf+0x24>
    434e:	e949           	lslw #4,%d1
    4350:	4841           	swap %d1
    4352:	4241           	clrw %d1
    4354:	2800           	movel %d0,%d4
    4356:	740b           	moveq #11,%d2
    4358:	e4ac           	lsrl %d2,%d4
    435a:	0884 0014      	bclr #20,%d4
    435e:	2404           	movel %d4,%d2
    4360:	8481           	orl %d1,%d2
    4362:	2600           	movel %d0,%d3
    4364:	eb4b           	lslw #5,%d3
    4366:	4843           	swap %d3
    4368:	4243           	clrw %d3
    436a:	2f03           	movel %d3,%sp@-
    436c:	2f02           	movel %d2,%sp@-
    436e:	4eba 00bc      	jsr %pc@(442c <__truncdfsf2>)
    4372:	508f           	addql #8,%sp
    4374:	4cdf 001c      	moveml %sp@+,%d2-%d4
    4378:	4e75           	rts
    437a:	7000           	moveq #0,%d0
    437c:	4cdf 001c      	moveml %sp@+,%d2-%d4
    4380:	4e75           	rts
    4382:	223c 41e0 0000 	movel #1105199104,%d1
    4388:	4a80           	tstl %d0
    438a:	6dc8           	blts 4354 <__floatunsisf+0x32>
    438c:	223c 0000 041e 	movel #1054,%d1
    4392:	d080           	addl %d0,%d0
    4394:	5381           	subql #1,%d1
    4396:	4a80           	tstl %d0
    4398:	6cac           	bges 4346 <__floatunsisf+0x24>
    439a:	60b2           	bras 434e <__floatunsisf+0x2c>

0000439c <__floatsisf>:
    439c:	202f 0004      	movel %sp@(4),%d0
    43a0:	6712           	beqs 43b4 <__floatsisf+0x18>
    43a2:	2f00           	movel %d0,%sp@-
    43a4:	4eba fd82      	jsr %pc@(4128 <__floatsidf.part.0>)
    43a8:	2e81           	movel %d1,%sp@
    43aa:	2f00           	movel %d0,%sp@-
    43ac:	4eba 007e      	jsr %pc@(442c <__truncdfsf2>)
    43b0:	508f           	addql #8,%sp
    43b2:	4e75           	rts
    43b4:	7000           	moveq #0,%d0
    43b6:	4e75           	rts

000043b8 <__extendsfdf2>:
    43b8:	48e7 3800      	moveml %d2-%d4,%sp@-
    43bc:	202f 0010      	movel %sp@(16),%d0
    43c0:	2600           	movel %d0,%d3
    43c2:	0283 8000 0000 	andil #-2147483648,%d3
    43c8:	2200           	movel %d0,%d1
    43ca:	0881 001f      	bclr #31,%d1
    43ce:	4a81           	tstl %d1
    43d0:	674e           	beqs 4420 <__extendsfdf2+0x68>
    43d2:	2400           	movel %d0,%d2
    43d4:	4842           	swap %d2
    43d6:	ee42           	asrw #7,%d2
    43d8:	48c2           	extl %d2
    43da:	7200           	moveq #0,%d1
    43dc:	4601           	notb %d1
    43de:	c282           	andl %d2,%d1
    43e0:	0280 007f ffff 	andil #8388607,%d0
    43e6:	4a02           	tstb %d2
    43e8:	6610           	bnes 43fa <__extendsfdf2+0x42>
    43ea:	7201           	moveq #1,%d1
    43ec:	d080           	addl %d0,%d0
    43ee:	5381           	subql #1,%d1
    43f0:	0800 0017      	btst #23,%d0
    43f4:	67f6           	beqs 43ec <__extendsfdf2+0x34>
    43f6:	0880 0017      	bclr #23,%d0
    43fa:	2400           	movel %d0,%d2
    43fc:	e682           	asrl #3,%d2
    43fe:	8483           	orl %d3,%d2
    4400:	0681 0000 0380 	addil #896,%d1
    4406:	e949           	lslw #4,%d1
    4408:	4841           	swap %d1
    440a:	4241           	clrw %d1
    440c:	2802           	movel %d2,%d4
    440e:	8881           	orl %d1,%d4
    4410:	2600           	movel %d0,%d3
    4412:	721d           	moveq #29,%d1
    4414:	e3ab           	lsll %d1,%d3
    4416:	2004           	movel %d4,%d0
    4418:	2203           	movel %d3,%d1
    441a:	4cdf 001c      	moveml %sp@+,%d2-%d4
    441e:	4e75           	rts
    4420:	91c8           	subal %a0,%a0
    4422:	2003           	movel %d3,%d0
    4424:	2208           	movel %a0,%d1
    4426:	4cdf 001c      	moveml %sp@+,%d2-%d4
    442a:	4e75           	rts

0000442c <__truncdfsf2>:
    442c:	48e7 3c00      	moveml %d2-%d5,%sp@-
    4430:	262f 0014      	movel %sp@(20),%d3
    4434:	242f 0018      	movel %sp@(24),%d2
    4438:	2003           	movel %d3,%d0
    443a:	0880 001f      	bclr #31,%d0
    443e:	8082           	orl %d2,%d0
    4440:	6700 00ea      	beqw 452c <__truncdfsf2+0x100>
    4444:	2203           	movel %d3,%d1
    4446:	4841           	swap %d1
    4448:	e841           	asrw #4,%d1
    444a:	48c1           	extl %d1
    444c:	0281 0000 07ff 	andil #2047,%d1
    4452:	0681 ffff fc80 	addil #-896,%d1
    4458:	2802           	movel %d2,%d4
    445a:	0284 003f ffff 	andil #4194303,%d4
    4460:	2003           	movel %d3,%d0
    4462:	7a0a           	moveq #10,%d5
    4464:	eba8           	lsll %d5,%d0
    4466:	0280 3fff fc00 	andil #1073740800,%d0
    446c:	4242           	clrw %d2
    446e:	4842           	swap %d2
    4470:	ec4a           	lsrw #6,%d2
    4472:	8082           	orl %d2,%d0
    4474:	2400           	movel %d0,%d2
    4476:	08c2 001e      	bset #30,%d2
    447a:	7a3f           	moveq #63,%d5
    447c:	c085           	andl %d5,%d0
    447e:	8084           	orl %d4,%d0
    4480:	ec82           	asrl #6,%d2
    4482:	4a81           	tstl %d1
    4484:	6f64           	bles 44ea <__truncdfsf2+0xbe>
    4486:	7801           	moveq #1,%d4
    4488:	c882           	andl %d2,%d4
    448a:	0802 0000      	btst #0,%d2
    448e:	6740           	beqs 44d0 <__truncdfsf2+0xa4>
    4490:	7a02           	moveq #2,%d5
    4492:	ca82           	andl %d2,%d5
    4494:	8085           	orl %d5,%d0
    4496:	6738           	beqs 44d0 <__truncdfsf2+0xa4>
    4498:	4a81           	tstl %d1
    449a:	6702           	beqs 449e <__truncdfsf2+0x72>
    449c:	7802           	moveq #2,%d4
    449e:	5282           	addql #1,%d2
    44a0:	203c 0200 0000 	movel #33554432,%d0
    44a6:	7a01           	moveq #1,%d5
    44a8:	ba84           	cmpl %d4,%d5
    44aa:	6774           	beqs 4520 <__truncdfsf2+0xf4>
    44ac:	b480           	cmpl %d0,%d2
    44ae:	6d20           	blts 44d0 <__truncdfsf2+0xa4>
    44b0:	2001           	movel %d1,%d0
    44b2:	5280           	addql #1,%d0
    44b4:	ef48           	lslw #7,%d0
    44b6:	4840           	swap %d0
    44b8:	4240           	clrw %d0
    44ba:	e8a2           	asrl %d4,%d2
    44bc:	0882 0017      	bclr #23,%d2
    44c0:	8082           	orl %d2,%d0
    44c2:	0283 8000 0000 	andil #-2147483648,%d3
    44c8:	8083           	orl %d3,%d0
    44ca:	4cdf 003c      	moveml %sp@+,%d2-%d5
    44ce:	4e75           	rts
    44d0:	2001           	movel %d1,%d0
    44d2:	ef48           	lslw #7,%d0
    44d4:	4840           	swap %d0
    44d6:	4240           	clrw %d0
    44d8:	e282           	asrl #1,%d2
    44da:	0882 0017      	bclr #23,%d2
    44de:	8082           	orl %d2,%d0
    44e0:	0283 8000 0000 	andil #-2147483648,%d3
    44e6:	8083           	orl %d3,%d0
    44e8:	60e0           	bras 44ca <__truncdfsf2+0x9e>
    44ea:	78e8           	moveq #-24,%d4
    44ec:	b881           	cmpl %d1,%d4
    44ee:	6f10           	bles 4500 <__truncdfsf2+0xd4>
    44f0:	7400           	moveq #0,%d2
    44f2:	7000           	moveq #0,%d0
    44f4:	8082           	orl %d2,%d0
    44f6:	0283 8000 0000 	andil #-2147483648,%d3
    44fc:	8083           	orl %d3,%d0
    44fe:	60ca           	bras 44ca <__truncdfsf2+0x9e>
    4500:	7801           	moveq #1,%d4
    4502:	9881           	subl %d1,%d4
    4504:	7201           	moveq #1,%d1
    4506:	e9a9           	lsll %d4,%d1
    4508:	5381           	subql #1,%d1
    450a:	c282           	andl %d2,%d1
    450c:	8081           	orl %d1,%d0
    450e:	e8a2           	asrl %d4,%d2
    4510:	7200           	moveq #0,%d1
    4512:	7801           	moveq #1,%d4
    4514:	c882           	andl %d2,%d4
    4516:	0802 0000      	btst #0,%d2
    451a:	6600 ff74      	bnew 4490 <__truncdfsf2+0x64>
    451e:	60b0           	bras 44d0 <__truncdfsf2+0xa4>
    4520:	203c 0100 0000 	movel #16777216,%d0
    4526:	b480           	cmpl %d0,%d2
    4528:	6c86           	bges 44b0 <__truncdfsf2+0x84>
    452a:	60a4           	bras 44d0 <__truncdfsf2+0xa4>
    452c:	2003           	movel %d3,%d0
    452e:	0280 8000 0000 	andil #-2147483648,%d0
    4534:	4cdf 003c      	moveml %sp@+,%d2-%d5
    4538:	4e75           	rts

0000453a <__fixdfsi>:
    453a:	48e7 3800      	moveml %d2-%d4,%sp@-
    453e:	222f 0010      	movel %sp@(16),%d1
    4542:	262f 0014      	movel %sp@(20),%d3
    4546:	2001           	movel %d1,%d0
    4548:	6724           	beqs 456e <__fixdfsi+0x34>
    454a:	2401           	movel %d1,%d2
    454c:	4842           	swap %d2
    454e:	e842           	asrw #4,%d2
    4550:	48c2           	extl %d2
    4552:	0282 0000 07ff 	andil #2047,%d2
    4558:	2042           	moveal %d2,%a0
    455a:	41e8 fbe3      	lea %a0@(-1053),%a0
    455e:	b0fc 0000      	cmpaw #0,%a0
    4562:	6f10           	bles 4574 <__fixdfsi+0x3a>
    4564:	4a81           	tstl %d1
    4566:	6d4e           	blts 45b6 <__fixdfsi+0x7c>
    4568:	203c 7fff ffff 	movel #2147483647,%d0
    456e:	4cdf 001c      	moveml %sp@+,%d2-%d4
    4572:	4e75           	rts
    4574:	78e1           	moveq #-31,%d4
    4576:	b888           	cmpl %a0,%d4
    4578:	6e48           	bgts 45c2 <__fixdfsi+0x88>
    457a:	780a           	moveq #10,%d4
    457c:	e9a9           	lsll %d4,%d1
    457e:	0281 3fff fc00 	andil #1073740800,%d1
    4584:	4243           	clrw %d3
    4586:	4843           	swap %d3
    4588:	ec4b           	lsrw #6,%d3
    458a:	8283           	orl %d3,%d1
    458c:	08c1 001e      	bset #30,%d1
    4590:	b0fc 0000      	cmpaw #0,%a0
    4594:	670a           	beqs 45a0 <__fixdfsi+0x66>
    4596:	263c 0000 041d 	movel #1053,%d3
    459c:	9682           	subl %d2,%d3
    459e:	e6a1           	asrl %d3,%d1
    45a0:	4a80           	tstl %d0
    45a2:	6d08           	blts 45ac <__fixdfsi+0x72>
    45a4:	2001           	movel %d1,%d0
    45a6:	4cdf 001c      	moveml %sp@+,%d2-%d4
    45aa:	4e75           	rts
    45ac:	2001           	movel %d1,%d0
    45ae:	4480           	negl %d0
    45b0:	4cdf 001c      	moveml %sp@+,%d2-%d4
    45b4:	4e75           	rts
    45b6:	203c 8000 0000 	movel #-2147483648,%d0
    45bc:	4cdf 001c      	moveml %sp@+,%d2-%d4
    45c0:	4e75           	rts
    45c2:	7000           	moveq #0,%d0
    45c4:	4cdf 001c      	moveml %sp@+,%d2-%d4
    45c8:	4e75           	rts

000045ca <__fixsfsi>:
    45ca:	48e7 3800      	moveml %d2-%d4,%sp@-
    45ce:	2f2f 0010      	movel %sp@(16),%sp@-
    45d2:	4eba fde4      	jsr %pc@(43b8 <__extendsfdf2>)
    45d6:	588f           	addql #4,%sp
    45d8:	2400           	movel %d0,%d2
    45da:	2002           	movel %d2,%d0
    45dc:	6724           	beqs 4602 <__fixsfsi+0x38>
    45de:	2602           	movel %d2,%d3
    45e0:	4843           	swap %d3
    45e2:	e843           	asrw #4,%d3
    45e4:	48c3           	extl %d3
    45e6:	0283 0000 07ff 	andil #2047,%d3
    45ec:	2043           	moveal %d3,%a0
    45ee:	41e8 fbe3      	lea %a0@(-1053),%a0
    45f2:	b0fc 0000      	cmpaw #0,%a0
    45f6:	6f10           	bles 4608 <__fixsfsi+0x3e>
    45f8:	4a82           	tstl %d2
    45fa:	6d4e           	blts 464a <__fixsfsi+0x80>
    45fc:	203c 7fff ffff 	movel #2147483647,%d0
    4602:	4cdf 001c      	moveml %sp@+,%d2-%d4
    4606:	4e75           	rts
    4608:	78e1           	moveq #-31,%d4
    460a:	b888           	cmpl %a0,%d4
    460c:	6e48           	bgts 4656 <__fixsfsi+0x8c>
    460e:	780a           	moveq #10,%d4
    4610:	e9aa           	lsll %d4,%d2
    4612:	0282 3fff fc00 	andil #1073740800,%d2
    4618:	4241           	clrw %d1
    461a:	4841           	swap %d1
    461c:	ec49           	lsrw #6,%d1
    461e:	8481           	orl %d1,%d2
    4620:	08c2 001e      	bset #30,%d2
    4624:	b0fc 0000      	cmpaw #0,%a0
    4628:	670a           	beqs 4634 <__fixsfsi+0x6a>
    462a:	223c 0000 041d 	movel #1053,%d1
    4630:	9283           	subl %d3,%d1
    4632:	e2a2           	asrl %d1,%d2
    4634:	4a80           	tstl %d0
    4636:	6d08           	blts 4640 <__fixsfsi+0x76>
    4638:	2002           	movel %d2,%d0
    463a:	4cdf 001c      	moveml %sp@+,%d2-%d4
    463e:	4e75           	rts
    4640:	2002           	movel %d2,%d0
    4642:	4480           	negl %d0
    4644:	4cdf 001c      	moveml %sp@+,%d2-%d4
    4648:	4e75           	rts
    464a:	203c 8000 0000 	movel #-2147483648,%d0
    4650:	4cdf 001c      	moveml %sp@+,%d2-%d4
    4654:	4e75           	rts
    4656:	7000           	moveq #0,%d0
    4658:	4cdf 001c      	moveml %sp@+,%d2-%d4
    465c:	4e75           	rts
	...

00004660 <__mulsi3>:
    4660:	302f 0004      	movew %sp@(4),%d0
    4664:	c0ef 000a      	muluw %sp@(10),%d0
    4668:	322f 0006      	movew %sp@(6),%d1
    466c:	c2ef 0008      	muluw %sp@(8),%d1
    4670:	d041           	addw %d1,%d0
    4672:	4840           	swap %d0
    4674:	4240           	clrw %d0
    4676:	322f 0006      	movew %sp@(6),%d1
    467a:	c2ef 000a      	muluw %sp@(10),%d1
    467e:	d081           	addl %d1,%d0
    4680:	4e75           	rts
	...

00004684 <__gedf2>:
    4684:	4e56 0000      	linkw %fp,#0
    4688:	4878 ffff      	pea ffffffff <LESS+0x0>
    468c:	2f2e 0014      	movel %fp@(20),%sp@-
    4690:	2f2e 0010      	movel %fp@(16),%sp@-
    4694:	2f2e 000c      	movel %fp@(12),%sp@-
    4698:	2f2e 0008      	movel %fp@(8),%sp@-
    469c:	4eb9 0000 3e6e 	jsr 3e6e <__cmpdf2_internal>
    46a2:	4e5e           	unlk %fp
    46a4:	4e75           	rts
    46a6:	5374 6172 7469 	subqw #1,%a4@(0000000074696e67)@(0000000000002075)
    46ac:	6e67 2075 
    46b0:	702e           	moveq #46,%d0
    46b2:	2e2e 0053      	movel %fp@(83),%d7
    46b6:	656e           	bcss 4726 <pow10.0+0x3a>
    46b8:	6469           	bccs 4723 <pow10.0+0x37>
    46ba:	6e67           	bgts 4723 <pow10.0+0x37>
    46bc:	2025           	movel %a5@-,%d0
    46be:	6c75           	bges 4735 <pow10.0+0x49>
    46c0:	2077 6974 6820 	moveal %sp@(0000000068207661)@(0000000000000000),%a0
    46c6:	7661 
    46c8:	6c75           	bges 473f <_code_end+0x3>
    46ca:	6520           	bcss 46ec <pow10.0>
    46cc:	2564 0063      	movel %a4@-,%a2@(99)
    46d0:	6f6d           	bles 473f <_code_end+0x3>
    46d2:	706c           	moveq #108,%d0
    46d4:	6574           	bcss 474a <__trap_enable_bits>
    46d6:	650d           	bcss 46e5 <__gedf2+0x61>
    46d8:	0a00 666e      	eorib #110,%d0
    46dc:	692b           	bvss 4709 <pow10.0+0x1d>
    46de:	0066 6e69      	oriw #28265,%fp@-
    46e2:	006e 616e 0066 	oriw #24942,%fp@(102)
    46e8:	6e69           	bgts 4753 <__last_operation+0x1>
    46ea:	2d00           	movel %d0,%fp@-

000046ec <pow10.0>:
    46ec:	3ff0 0000 0000 0000 4024 0000 0000 0000     ?.......@$......
    46fc:	4059 0000 0000 0000 408f 4000 0000 0000     @Y......@.@.....
    470c:	40c3 8800 0000 0000 40f8 6a00 0000 0000     @.......@.j.....
    471c:	412e 8480 0000 0000 4163 12d0 0000 0000     A.......Ac......
    472c:	4197 d784 0000 0000 41cd cd65 0000 0000     A.......A..e....

Disassembly of section .data:

0000473c <_ctors>:
    473c:	0000 0000      	orib #0,%d0

00004740 <SAVE_PROG_EXIT>:
    4740:	0000 0000      	orib #0,%d0

00004744 <crbuf>:
    4744:	0d00 0000                                   ....

00004748 <_fpCCR>:
	...

0000474a <__trap_enable_bits>:
	...

0000474c <__sticky_bits>:
	...

0000474e <__rounding_mode>:
	...

00004750 <__format>:
	...

00004752 <__last_operation>:
	...

00004754 <__operand1>:
	...

0000475c <__operand2>:
	...
